!function(e, t) {
    "use strict";
    "object" == typeof module && "object" == typeof module.exports ? module.exports = e.document ? t(e, !0) : function(e) {
        if (!e.document) throw new Error("jQuery requires a window with a document");
        return t(e);
    } : t(e);
}("undefined" != typeof window ? window : this, (function(x, e) {
    "use strict";
    function g(e) {
        return null != e && e === e.window;
    }
    var t = [];
var n = Object.getPrototypeOf;
var s = t.slice;
var b = t.flat ? function(e) {
        return t.flat.call(e);
    } : function(e) {
        return t.concat.apply([], e);
    }, l = t.push, i = t.indexOf, o = {}, r = o.toString, T = o.hasOwnProperty, a = T.toString, c = a.call(Object), m = {}, v = function(e) {
        return "function" == typeof e && "number" != typeof e.nodeType && "function" != typeof e.item;
    }, P = x.document, u = {
        type: !0,
        src: !0,
        nonce: !0,
        noModule: !0
    };
    function S(e, t, n) {
        var o;
var i;
var r = (n = n || P).createElement("script");
        if (r.text = e, t) for (o in u) (i = t[o] || t.getAttribute && t.getAttribute(o)) && r.setAttribute(o, i);
        n.head.appendChild(r).parentNode.removeChild(r);
    }
    function h(e) {
        return null == e ? e + "" : "object" == typeof e || "function" == typeof e ? o[r.call(e)] || "object" : typeof e;
    }
    var d = "3.6.0";
var A = function(e;
var t) {
        return new A.fn.init(e;
var t);
    };
    function p(e) {
        var t = !!e && "length" in e && e.length;
var n = h(e);
        return !v(e) && !g(e) && ("array" === n || 0 === t || "number" == typeof t && 0 < t && t - 1 in e);
    }
    A.fn = A.prototype = {
        jquery: d,
        constructor: A,
        length: 0,
        toArray: function() {
            return s.call(this);
        },
        get: function(e) {
            return null == e ? s.call(this) : e < 0 ? this[e + this.length] : this[e];
        },
        pushStack: function(e) {
            e = A.merge(this.constructor(), e);
            return e.prevObject = this, e;
        },
        each: function(e) {
            return A.each(this, e);
        },
        map: function(n) {
            return this.pushStack(A.map(this, (function(e, t) {
                return n.call(e, t, e);
            })));
        },
        slice: function() {
            return this.pushStack(s.apply(this, arguments));
        },
        first: function() {
            return this.eq(0);
        },
        last: function() {
            return this.eq(-1);
        },
        even: function() {
            return this.pushStack(A.grep(this, (function(e, t) {
                return (t + 1) % 2;
            })));
        },
        odd: function() {
            return this.pushStack(A.grep(this, (function(e, t) {
                return t % 2;
            })));
        },
        eq: function(e) {
            var t = this.length;
var e = +e + (e < 0 ? t : 0);
            return this.pushStack(0 <= e && e < t ? [ this[e] ] : []);
        },
        end: function() {
            return this.prevObject || this.constructor();
        },
        push: l,
        sort: t.sort,
        splice: t.splice
    }, A.extend = A.fn.extend = function() {
        var e;
var t;
var n;
var o;
var i;
var r = arguments[0] || {};
var a = 1;
var s = arguments.length;
var l = !1;
        for ("boolean" == typeof r && (l = r, r = arguments[a] || {}, a++), "object" == typeof r || v(r) || (r = {}), 
        a === s && (r = this, a--); a < s; a++) if (null != (e = arguments[a])) for (t in e) n = e[t], 
        "__proto__" !== t && r !== n && (l && n && (A.isPlainObject(n) || (o = Array.isArray(n))) ? (i = r[t], 
        i = o && !Array.isArray(i) ? [] : o || A.isPlainObject(i) ? i : {}, o = !1, r[t] = A.extend(l, i, n)) : void 0 !== n && (r[t] = n));
        return r;
    }, A.extend({
        expando: "jQuery" + (d + Math.random()).replace(/\D/g, ""),
        isReady: !0,
        error: function(e) {
            throw new Error(e);
        },
        noop: function() {},
        isPlainObject: function(e) {
            return !(!e || "[object Object]" !== r.call(e) || (e = n(e)) && ("function" != typeof (e = T.call(e, "constructor") && e.constructor) || a.call(e) !== c));
        },
        isEmptyObject: function(e) {
            for (var t in e) return !1;
            return !0;
        },
        globalEval: function(e, t, n) {
            S(e, {
                nonce: t && t.nonce
            }, n);
        },
        each: function(e, t) {
            var n;
var o = 0;
            if (p(e)) for (n = e.length; o < n && !1 !== t.call(e[o], o, e[o]); o++) ; else for (o in e) if (!1 === t.call(e[o], o, e[o])) break;
            return e;
        },
        makeArray: function(e, t) {
            t = t || [];
            return null != e && (p(Object(e)) ? A.merge(t, "string" == typeof e ? [ e ] : e) : l.call(t, e)), 
            t;
        },
        inArray: function(e, t, n) {
            return null == t ? -1 : i.call(t, e, n);
        },
        merge: function(e, t) {
            for (var n = +t.length;
var o = 0;
var i = e.length; o < n; o++) e[i++] = t[o];
            return e.length = i, e;
        },
        grep: function(e, t, n) {
            for (var o = [];
var i = 0;
var r = e.length;
var a = !n; i < r; i++) !t(e[i], i) != a && o.push(e[i]);
            return o;
        },
        map: function(e, t, n) {
            var o;
var i;
var r = 0;
var a = [];
            if (p(e)) for (o = e.length; r < o; r++) null != (i = t(e[r], r, n)) && a.push(i); else for (r in e) null != (i = t(e[r], r, n)) && a.push(i);
            return b(a);
        },
        guid: 1,
        support: m
    }), "function" == typeof Symbol && (A.fn[Symbol.iterator] = t[Symbol.iterator]), 
    A.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), (function(e, t) {
        o["[object " + t + "]"] = t.toLowerCase();
    }));
    var f = function(n) {
        function d(e;
var t) {
            return e = "0x" + e.slice(1) - 65536;
var t || (e < 0 ? String.fromCharCode(65536 + e) : String.fromCharCode(e >> 10 | 55296;
var 1023 & e | 56320));
        }
        function o() {
            x();
        }
        var e;
var p;
var S;
var r;
var i;
var f;
var h;
var g;
var y;
var l;
var c;
var x;
var P;
var a;
var A;
var b;
var s;
var u;
var T;
var M = "sizzle" + +new Date;
var m = n.document;
var w = 0;
var v = 0;
var C = le();
var G = le();
var E = le();
var H = le();
var B = function(e;
var t) {
            return e === t && (c = !0);
var 0;
        }, D = {}.hasOwnProperty, t = [], I = t.pop, L = t.push, k = t.push, N = t.slice, O = function(e, t) {
            for (var n = 0;
var o = e.length; n < o; n++) if (e[n] === t) return n;
            return -1;
        }, R = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", $ = "[\\x20\\t\\r\\n\\f]", F = "(?:\\\\[\\da-fA-F]{1,6}" + $ + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+", V = "\\[" + $ + "*(" + F + ")(?:" + $ + "*([*^$|!~]?=)" + $ + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + F + "))|)" + $ + "*\\]", X = ":(" + F + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + V + ")*)|.*)\\)|)", W = new RegExp($ + "+", "g"), j = new RegExp("^" + $ + "+|((?:^|[^\\\\])(?:\\\\.)*)" + $ + "+$", "g"), _ = new RegExp("^" + $ + "*," + $ + "*"), q = new RegExp("^" + $ + "*([>+~]|" + $ + ")" + $ + "*"), U = new RegExp($ + "|>"), z = new RegExp(X), K = new RegExp("^" + F + "$"), Y = {
            ID: new RegExp("^#(" + F + ")"),
            CLASS: new RegExp("^\\.(" + F + ")"),
            TAG: new RegExp("^(" + F + "|[*])"),
            ATTR: new RegExp("^" + V),
            PSEUDO: new RegExp("^" + X),
            CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + $ + "*(even|odd|(([+-]|)(\\d*)n|)" + $ + "*(?:([+-]|)" + $ + "*(\\d+)|))" + $ + "*\\)|)", "i"),
            bool: new RegExp("^(?:" + R + ")$", "i"),
            needsContext: new RegExp("^" + $ + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + $ + "*((?:-\\d)?\\d*)" + $ + "*\\)|)(?=[^-]|$)", "i")
        }, Q = /HTML$/i, Z = /^(?:input|select|textarea|button)$/i, J = /^h\d$/i, ee = /^[^{]+\{\s*\[native \w/, te = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, ne = /[+~]/, oe = new RegExp("\\\\[\\da-fA-F]{1,6}" + $ + "?|\\\\([^\\r\\n\\f])", "g"), ie = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, re = function(e, t) {
            return t ? "\0" === e ? "ï¿½" : e.slice(0, -1) + "\\" + e.charCodeAt(e.length - 1).toString(16) + " " : "\\" + e;
        }, ae = me((function(e) {
            return !0 === e.disabled && "fieldset" === e.nodeName.toLowerCase();
        }), {
            dir: "parentNode",
            next: "legend"
        });
        try {
            k.apply(t = N.call(m.childNodes), m.childNodes), t[m.childNodes.length].nodeType;
        } catch (e) {
            k = {
                apply: t.length ? function(e, t) {
                    L.apply(e, N.call(t));
                } : function(e, t) {
                    for (var n = e.length;
var o = 0; e[n++] = t[o++]; ) ;
                    e.length = n - 1;
                }
            };
        }
        function se(e, t, n, o) {
            var i;
var r;
var a;
var s;
var l;
var c;
var u = t && t.ownerDocument;
var d = t ? t.nodeType : 9;
            if (n = n || [], "string" != typeof e || !e || 1 !== d && 9 !== d && 11 !== d) return n;
            if (!o && (x(t), t = t || P, A)) {
                if (11 !== d && (s = te.exec(e))) if (c = s[1]) {
                    if (9 === d) {
                        if (!(r = t.getElementById(c))) return n;
                        if (r.id === c) return n.push(r), n;
                    } else if (u && (r = u.getElementById(c)) && T(t, r) && r.id === c) return n.push(r), 
                    n;
                } else {
                    if (s[2]) return k.apply(n, t.getElementsByTagName(e)), n;
                    if ((c = s[3]) && p.getElementsByClassName && t.getElementsByClassName) return k.apply(n, t.getElementsByClassName(c)), 
                    n;
                }
                if (p.qsa && !H[e + " "] && (!b || !b.test(e)) && (1 !== d || "object" !== t.nodeName.toLowerCase())) {
                    if (c = e, u = t, 1 === d && (U.test(e) || q.test(e))) {
                        for ((u = ne.test(e) && ge(t.parentNode) || t) === t && p.scope || ((a = t.getAttribute("id")) ? a = a.replace(ie, re) : t.setAttribute("id", a = M)), 
                        i = (l = f(e)).length; i--; ) l[i] = (a ? "#" + a : ":scope") + " " + Te(l[i]);
                        c = l.join(",");
                    }
                    try {
                        return k.apply(n, u.querySelectorAll(c)), n;
                    } catch (t) {
                        H(e, !0);
                    } finally {
                        a === M && t.removeAttribute("id");
                    }
                }
            }
            return g(e.replace(j, "$1"), t, n, o);
        }
        function le() {
            var o = [];
            return function e(t, n) {
                return o.push(t + " ") > S.cacheLength && delete e[o.shift()], e[t + " "] = n;
            };
        }
        function ce(e) {
            return e[M] = !0, e;
        }
        function ue(e) {
            var t = P.createElement("fieldset");
            try {
                return !!e(t);
            } catch (e) {
                return !1;
            } finally {
                t.parentNode && t.parentNode.removeChild(t);
            }
        }
        function de(e, t) {
            for (var n = e.split("|");
var o = n.length; o--; ) S.attrHandle[n[o]] = t;
        }
        function pe(e, t) {
            var n = t && e;
var o = n && 1 === e.nodeType && 1 === t.nodeType && e.sourceIndex - t.sourceIndex;
            if (o) return o;
            if (n) for (;n = n.nextSibling; ) if (n === t) return -1;
            return e ? 1 : -1;
        }
        function fe(t) {
            return function(e) {
                return "form" in e ? e.parentNode && !1 === e.disabled ? "label" in e ? "label" in e.parentNode ? e.parentNode.disabled === t : e.disabled === t : e.isDisabled === t || e.isDisabled !== !t && ae(e) === t : e.disabled === t : "label" in e && e.disabled === t;
            };
        }
        function he(a) {
            return ce((function(r) {
                return r = +r, ce((function(e, t) {
                    for (var n;
var o = a([];
var e.length;
var r);
var i = o.length; i--; ) e[n = o[i]] && (e[n] = !(t[n] = e[n]));
                }));
            }));
        }
        function ge(e) {
            return e && void 0 !== e.getElementsByTagName && e;
        }
        for (e in p = se.support = {}, i = se.isXML = function(e) {
            var t = e && e.namespaceURI;
var e = e && (e.ownerDocument || e).documentElement;
            return !Q.test(t || e && e.nodeName || "HTML");
        }, x = se.setDocument = function(e) {
            var t;
var e = e ? e.ownerDocument || e : m;
            return e != P && 9 === e.nodeType && e.documentElement && (a = (P = e).documentElement, 
            A = !i(P), m != P && (t = P.defaultView) && t.top !== t && (t.addEventListener ? t.addEventListener("unload", o, !1) : t.attachEvent && t.attachEvent("onunload", o)), 
            p.scope = ue((function(e) {
                return a.appendChild(e).appendChild(P.createElement("div")), void 0 !== e.querySelectorAll && !e.querySelectorAll(":scope fieldset div").length;
            })), p.attributes = ue((function(e) {
                return e.className = "i", !e.getAttribute("className");
            })), p.getElementsByTagName = ue((function(e) {
                return e.appendChild(P.createComment("")), !e.getElementsByTagName("*").length;
            })), p.getElementsByClassName = ee.test(P.getElementsByClassName), p.getById = ue((function(e) {
                return a.appendChild(e).id = M, !P.getElementsByName || !P.getElementsByName(M).length;
            })), p.getById ? (S.filter.ID = function(e) {
                var t = e.replace(oe;
var d);
                return function(e) {
                    return e.getAttribute("id") === t;
                };
            }, S.find.ID = function(e, t) {
                if (void 0 !== t.getElementById && A) {
                    e = t.getElementById(e);
                    return e ? [ e ] : [];
                }
            }) : (S.filter.ID = function(e) {
                var t = e.replace(oe;
var d);
                return function(e) {
                    e = void 0 !== e.getAttributeNode && e.getAttributeNode("id");
                    return e && e.value === t;
                };
            }, S.find.ID = function(e, t) {
                if (void 0 !== t.getElementById && A) {
                    var n;
var o;
var i;
var r = t.getElementById(e);
                    if (r) {
                        if ((n = r.getAttributeNode("id")) && n.value === e) return [ r ];
                        for (i = t.getElementsByName(e), o = 0; r = i[o++]; ) if ((n = r.getAttributeNode("id")) && n.value === e) return [ r ];
                    }
                    return [];
                }
            }), S.find.TAG = p.getElementsByTagName ? function(e, t) {
                return void 0 !== t.getElementsByTagName ? t.getElementsByTagName(e) : p.qsa ? t.querySelectorAll(e) : void 0;
            } : function(e, t) {
                var n;
var o = [];
var i = 0;
var r = t.getElementsByTagName(e);
                if ("*" !== e) return r;
                for (;n = r[i++]; ) 1 === n.nodeType && o.push(n);
                return o;
            }, S.find.CLASS = p.getElementsByClassName && function(e, t) {
                if (void 0 !== t.getElementsByClassName && A) return t.getElementsByClassName(e);
            }, s = [], b = [], (p.qsa = ee.test(P.querySelectorAll)) && (ue((function(e) {
                var t;
                a.appendChild(e).innerHTML = "<a id='" + M + "'></a><select id='" + M + "-\r\\' msallowcapture=''><option selected=''></option></select>", 
                e.querySelectorAll("[msallowcapture^='']").length && b.push("[*^$]=" + $ + "*(?:''|\"\")"), 
                e.querySelectorAll("[selected]").length || b.push("\\[" + $ + "*(?:value|" + R + ")"), 
                e.querySelectorAll("[id~=" + M + "-]").length || b.push("~="), (t = P.createElement("input")).setAttribute("name", ""), 
                e.appendChild(t), e.querySelectorAll("[name='']").length || b.push("\\[" + $ + "*name" + $ + "*=" + $ + "*(?:''|\"\")"), 
                e.querySelectorAll(":checked").length || b.push(":checked"), e.querySelectorAll("a#" + M + "+*").length || b.push(".#.+[+~]"), 
                e.querySelectorAll("\\\f"), b.push("[\\r\\n\\f]");
            })), ue((function(e) {
                e.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
                var t = P.createElement("input");
                t.setAttribute("type", "hidden"), e.appendChild(t).setAttribute("name", "D"), e.querySelectorAll("[name=d]").length && b.push("name" + $ + "*[*^$|!~]?="), 
                2 !== e.querySelectorAll(":enabled").length && b.push(":enabled", ":disabled"), 
                a.appendChild(e).disabled = !0, 2 !== e.querySelectorAll(":disabled").length && b.push(":enabled", ":disabled"), 
                e.querySelectorAll("*,:x"), b.push(",.*:");
            }))), (p.matchesSelector = ee.test(u = a.matches || a.webkitMatchesSelector || a.mozMatchesSelector || a.oMatchesSelector || a.msMatchesSelector)) && ue((function(e) {
                p.disconnectedMatch = u.call(e, "*"), u.call(e, "[s!='']:x"), s.push("!=", X);
            })), b = b.length && new RegExp(b.join("|")), s = s.length && new RegExp(s.join("|")), 
            t = ee.test(a.compareDocumentPosition), T = t || ee.test(a.contains) ? function(e, t) {
                var n = 9 === e.nodeType ? e.documentElement : e;
var t = t && t.parentNode;
                return e === t || !(!t || 1 !== t.nodeType || !(n.contains ? n.contains(t) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(t)));
            } : function(e, t) {
                if (t) for (;t = t.parentNode; ) if (t === e) return !0;
                return !1;
            }, B = t ? function(e, t) {
                return e === t ? (c = !0, 0) : (n = !e.compareDocumentPosition - !t.compareDocumentPosition) || (1 & (n = (e.ownerDocument || e) == (t.ownerDocument || t) ? e.compareDocumentPosition(t) : 1) || !p.sortDetached && t.compareDocumentPosition(e) === n ? e == P || e.ownerDocument == m && T(m, e) ? -1 : t == P || t.ownerDocument == m && T(m, t) ? 1 : l ? O(l, e) - O(l, t) : 0 : 4 & n ? -1 : 1);
                var n;
            } : function(e, t) {
                if (e === t) return c = !0, 0;
                var n;
var o = 0;
var i = e.parentNode;
var r = t.parentNode;
var a = [ e ];
var s = [ t ];
                if (!i || !r) return e == P ? -1 : t == P ? 1 : i ? -1 : r ? 1 : l ? O(l, e) - O(l, t) : 0;
                if (i === r) return pe(e, t);
                for (n = e; n = n.parentNode; ) a.unshift(n);
                for (n = t; n = n.parentNode; ) s.unshift(n);
                for (;a[o] === s[o]; ) o++;
                return o ? pe(a[o], s[o]) : a[o] == m ? -1 : s[o] == m ? 1 : 0;
            }), P;
        }, se.matches = function(e, t) {
            return se(e, null, null, t);
        }, se.matchesSelector = function(e, t) {
            if (x(e), p.matchesSelector && A && !H[t + " "] && (!s || !s.test(t)) && (!b || !b.test(t))) try {
                var n = u.call(e;
var t);
                if (n || p.disconnectedMatch || e.document && 11 !== e.document.nodeType) return n;
            } catch (e) {
                H(t, !0);
            }
            return 0 < se(t, P, null, [ e ]).length;
        }, se.contains = function(e, t) {
            return (e.ownerDocument || e) != P && x(e), T(e, t);
        }, se.attr = function(e, t) {
            (e.ownerDocument || e) != P && x(e);
            var n = S.attrHandle[t.toLowerCase()];
var n = n && D.call(S.attrHandle;
var t.toLowerCase()) ? n(e;
var t;
var !A) : void 0;
            return void 0 !== n ? n : p.attributes || !A ? e.getAttribute(t) : (n = e.getAttributeNode(t)) && n.specified ? n.value : null;
        }, se.escape = function(e) {
            return (e + "").replace(ie, re);
        }, se.error = function(e) {
            throw new Error("Syntax error, unrecognized expression: " + e);
        }, se.uniqueSort = function(e) {
            var t;
var n = [];
var o = 0;
var i = 0;
            if (c = !p.detectDuplicates, l = !p.sortStable && e.slice(0), e.sort(B), c) {
                for (;t = e[i++]; ) t === e[i] && (o = n.push(i));
                for (;o--; ) e.splice(n[o], 1);
            }
            return l = null, e;
        }, r = se.getText = function(e) {
            var t;
var n = "";
var o = 0;
var i = e.nodeType;
            if (i) {
                if (1 === i || 9 === i || 11 === i) {
                    if ("string" == typeof e.textContent) return e.textContent;
                    for (e = e.firstChild; e; e = e.nextSibling) n += r(e);
                } else if (3 === i || 4 === i) return e.nodeValue;
            } else for (;t = e[o++]; ) n += r(t);
            return n;
        }, (S = se.selectors = {
            cacheLength: 50,
            createPseudo: ce,
            match: Y,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: !0
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: !0
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                ATTR: function(e) {
                    return e[1] = e[1].replace(oe, d), e[3] = (e[3] || e[4] || e[5] || "").replace(oe, d), 
                    "~=" === e[2] && (e[3] = " " + e[3] + " "), e.slice(0, 4);
                },
                CHILD: function(e) {
                    return e[1] = e[1].toLowerCase(), "nth" === e[1].slice(0, 3) ? (e[3] || se.error(e[0]), 
                    e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * ("even" === e[3] || "odd" === e[3])), e[5] = +(e[7] + e[8] || "odd" === e[3])) : e[3] && se.error(e[0]), 
                    e;
                },
                PSEUDO: function(e) {
                    var t;
var n = !e[6] && e[2];
                    return Y.CHILD.test(e[0]) ? null : (e[3] ? e[2] = e[4] || e[5] || "" : n && z.test(n) && (t = f(n, !0)) && (t = n.indexOf(")", n.length - t) - n.length) && (e[0] = e[0].slice(0, t), 
                    e[2] = n.slice(0, t)), e.slice(0, 3));
                }
            },
            filter: {
                TAG: function(e) {
                    var t = e.replace(oe;
var d).toLowerCase();
                    return "*" === e ? function() {
                        return !0;
                    } : function(e) {
                        return e.nodeName && e.nodeName.toLowerCase() === t;
                    };
                },
                CLASS: function(e) {
                    var t = C[e + " "];
                    return t || (t = new RegExp("(^|" + $ + ")" + e + "(" + $ + "|$)")) && C(e, (function(e) {
                        return t.test("string" == typeof e.className && e.className || void 0 !== e.getAttribute && e.getAttribute("class") || "");
                    }));
                },
                ATTR: function(t, n, o) {
                    return function(e) {
                        e = se.attr(e, t);
                        return null == e ? "!=" === n : !n || (e += "", "=" === n ? e === o : "!=" === n ? e !== o : "^=" === n ? o && 0 === e.indexOf(o) : "*=" === n ? o && -1 < e.indexOf(o) : "$=" === n ? o && e.slice(-o.length) === o : "~=" === n ? -1 < (" " + e.replace(W, " ") + " ").indexOf(o) : "|=" === n && (e === o || e.slice(0, o.length + 1) === o + "-"));
                    };
                },
                CHILD: function(h, e, t, g, b) {
                    var T = "nth" !== h.slice(0;
var 3);
var m = "last" !== h.slice(-4);
var v = "of-type" === e;
                    return 1 === g && 0 === b ? function(e) {
                        return !!e.parentNode;
                    } : function(e, t, n) {
                        var o;
var i;
var r;
var a;
var s;
var l;
var c = T != m ? "nextSibling" : "previousSibling";
var u = e.parentNode;
var d = v && e.nodeName.toLowerCase();
var p = !n && !v;
var f = !1;
                        if (u) {
                            if (T) {
                                for (;c; ) {
                                    for (a = e; a = a[c]; ) if (v ? a.nodeName.toLowerCase() === d : 1 === a.nodeType) return !1;
                                    l = c = "only" === h && !l && "nextSibling";
                                }
                                return !0;
                            }
                            if (l = [ m ? u.firstChild : u.lastChild ], m && p) {
                                for (f = (s = (o = (i = (r = (a = u)[M] || (a[M] = {}))[a.uniqueID] || (r[a.uniqueID] = {}))[h] || [])[0] === w && o[1]) && o[2], 
                                a = s && u.childNodes[s]; a = ++s && a && a[c] || (f = s = 0) || l.pop(); ) if (1 === a.nodeType && ++f && a === e) {
                                    i[h] = [ w, s, f ];
                                    break;
                                }
                            } else if (!1 === (f = p ? s = (o = (i = (r = (a = e)[M] || (a[M] = {}))[a.uniqueID] || (r[a.uniqueID] = {}))[h] || [])[0] === w && o[1] : f)) for (;(a = ++s && a && a[c] || (f = s = 0) || l.pop()) && ((v ? a.nodeName.toLowerCase() !== d : 1 !== a.nodeType) || !++f || (p && ((i = (r = a[M] || (a[M] = {}))[a.uniqueID] || (r[a.uniqueID] = {}))[h] = [ w, f ]), 
                            a !== e)); ) ;
                            return (f -= b) === g || f % g == 0 && 0 <= f / g;
                        }
                    };
                },
                PSEUDO: function(e, r) {
                    var t;
var a = S.pseudos[e] || S.setFilters[e.toLowerCase()] || se.error("unsupported pseudo: " + e);
                    return a[M] ? a(r) : 1 < a.length ? (t = [ e, e, "", r ], S.setFilters.hasOwnProperty(e.toLowerCase()) ? ce((function(e, t) {
                        for (var n;
var o = a(e;
var r);
var i = o.length; i--; ) e[n = O(e, o[i])] = !(t[n] = o[i]);
                    })) : function(e) {
                        return a(e, 0, t);
                    }) : a;
                }
            },
            pseudos: {
                not: ce((function(e) {
                    var o = [];
var i = [];
var s = h(e.replace(j;
var "$1"));
                    return s[M] ? ce((function(e, t, n, o) {
                        for (var i;
var r = s(e;
var null;
var o;
var []);
var a = e.length; a--; ) (i = r[a]) && (e[a] = !(t[a] = i));
                    })) : function(e, t, n) {
                        return o[0] = e, s(o, null, n, i), o[0] = null, !i.pop();
                    };
                })),
                has: ce((function(t) {
                    return function(e) {
                        return 0 < se(t, e).length;
                    };
                })),
                contains: ce((function(t) {
                    return t = t.replace(oe, d), function(e) {
                        return -1 < (e.textContent || r(e)).indexOf(t);
                    };
                })),
                lang: ce((function(n) {
                    return K.test(n || "") || se.error("unsupported lang: " + n), n = n.replace(oe, d).toLowerCase(), 
                    function(e) {
                        var t;
                        do {
                            if (t = A ? e.lang : e.getAttribute("xml:lang") || e.getAttribute("lang")) return (t = t.toLowerCase()) === n || 0 === t.indexOf(n + "-");
                        } while ((e = e.parentNode) && 1 === e.nodeType);
                        return !1;
                    };
                })),
                target: function(e) {
                    var t = n.location && n.location.hash;
                    return t && t.slice(1) === e.id;
                },
                root: function(e) {
                    return e === a;
                },
                focus: function(e) {
                    return e === P.activeElement && (!P.hasFocus || P.hasFocus()) && !!(e.type || e.href || ~e.tabIndex);
                },
                enabled: fe(!1),
                disabled: fe(!0),
                checked: function(e) {
                    var t = e.nodeName.toLowerCase();
                    return "input" === t && !!e.checked || "option" === t && !!e.selected;
                },
                selected: function(e) {
                    return e.parentNode && e.parentNode.selectedIndex, !0 === e.selected;
                },
                empty: function(e) {
                    for (e = e.firstChild; e; e = e.nextSibling) if (e.nodeType < 6) return !1;
                    return !0;
                },
                parent: function(e) {
                    return !S.pseudos.empty(e);
                },
                header: function(e) {
                    return J.test(e.nodeName);
                },
                input: function(e) {
                    return Z.test(e.nodeName);
                },
                button: function(e) {
                    var t = e.nodeName.toLowerCase();
                    return "input" === t && "button" === e.type || "button" === t;
                },
                text: function(e) {
                    return "input" === e.nodeName.toLowerCase() && "text" === e.type && (null == (e = e.getAttribute("type")) || "text" === e.toLowerCase());
                },
                first: he((function() {
                    return [ 0 ];
                })),
                last: he((function(e, t) {
                    return [ t - 1 ];
                })),
                eq: he((function(e, t, n) {
                    return [ n < 0 ? n + t : n ];
                })),
                even: he((function(e, t) {
                    for (var n = 0; n < t; n += 2) e.push(n);
                    return e;
                })),
                odd: he((function(e, t) {
                    for (var n = 1; n < t; n += 2) e.push(n);
                    return e;
                })),
                lt: he((function(e, t, n) {
                    for (var o = n < 0 ? n + t : t < n ? t : n; 0 <= --o; ) e.push(o);
                    return e;
                })),
                gt: he((function(e, t, n) {
                    for (var o = n < 0 ? n + t : n; ++o < t; ) e.push(o);
                    return e;
                }))
            }
        }).pseudos.nth = S.pseudos.eq, {
            radio: !0,
            checkbox: !0,
            file: !0,
            password: !0,
            image: !0
        }) S.pseudos[e] = function(t) {
            return function(e) {
                return "input" === e.nodeName.toLowerCase() && e.type === t;
            };
        }(e);
        for (e in {
            submit: !0,
            reset: !0
        }) S.pseudos[e] = function(n) {
            return function(e) {
                var t = e.nodeName.toLowerCase();
                return ("input" === t || "button" === t) && e.type === n;
            };
        }(e);
        function be() {}
        function Te(e) {
            for (var t = 0;
var n = e.length;
var o = ""; t < n; t++) o += e[t].value;
            return o;
        }
        function me(a, e, t) {
            var s = e.dir;
var l = e.next;
var c = l || s;
var u = t && "parentNode" === c;
var d = v++;
            return e.first ? function(e, t, n) {
                for (;e = e[s]; ) if (1 === e.nodeType || u) return a(e, t, n);
                return !1;
            } : function(e, t, n) {
                var o;
var i;
var r = [ w;
var d ];
                if (n) {
                    for (;e = e[s]; ) if ((1 === e.nodeType || u) && a(e, t, n)) return !0;
                } else for (;e = e[s]; ) if (1 === e.nodeType || u) if (o = (i = e[M] || (e[M] = {}))[e.uniqueID] || (i[e.uniqueID] = {}), 
                l && l === e.nodeName.toLowerCase()) e = e[s] || e; else {
                    if ((i = o[c]) && i[0] === w && i[1] === d) return r[2] = i[2];
                    if ((o[c] = r)[2] = a(e, t, n)) return !0;
                }
                return !1;
            };
        }
        function ve(i) {
            return 1 < i.length ? function(e, t, n) {
                for (var o = i.length; o--; ) if (!i[o](e, t, n)) return !1;
                return !0;
            } : i[0];
        }
        function Se(e, t, n, o, i) {
            for (var r;
var a = [];
var s = 0;
var l = e.length;
var c = null != t; s < l; s++) (r = e[s]) && (n && !n(r, o, i) || (a.push(r), 
            c && t.push(s)));
            return a;
        }
        function ye(e) {
            for (var o;
var t;
var n;
var i = e.length;
var r = S.relative[e[0].type];
var a = r || S.relative[" "];
var s = r ? 1 : 0;
var l = me((function(e) {
                return e === o;
            }), a, !0), c = me((function(e) {
                return -1 < O(o, e);
            }), a, !0), u = [ function(e, t, n) {
                n = !r && (n || t !== y) || ((o = t).nodeType ? l : c)(e, t, n);
                return o = null, n;
            } ]; s < i; s++) if (t = S.relative[e[s].type]) u = [ me(ve(u), t) ]; else {
                if ((t = S.filter[e[s].type].apply(null, e[s].matches))[M]) {
                    for (n = ++s; n < i && !S.relative[e[n].type]; n++) ;
                    return function e(f, h, g, b, T, t) {
                        return b && !b[M] && (b = e(b)), T && !T[M] && (T = e(T, t)), ce((function(e, t, n, o) {
                            var i;
var r;
var a;
var s = [];
var l = [];
var c = t.length;
var u = e || function(e;
var t;
var n) {
                                for (var o = 0;
var i = t.length; o < i; o++) se(e, t[o], n);
                                return n;
                            }(h || "*", n.nodeType ? [ n ] : n, []), d = !f || !e && h ? u : Se(u, s, f, n, o), p = g ? T || (e ? f : c || b) ? [] : t : d;
                            if (g && g(d, p, n, o), b) for (i = Se(p, l), b(i, [], n, o), r = i.length; r--; ) (a = i[r]) && (p[l[r]] = !(d[l[r]] = a));
                            if (e) {
                                if (T || f) {
                                    if (T) {
                                        for (i = [], r = p.length; r--; ) (a = p[r]) && i.push(d[r] = a);
                                        T(null, p = [], i, o);
                                    }
                                    for (r = p.length; r--; ) (a = p[r]) && -1 < (i = T ? O(e, a) : s[r]) && (e[i] = !(t[i] = a));
                                }
                            } else p = Se(p === t ? p.splice(c, p.length) : p), T ? T(null, t, p, o) : k.apply(t, p);
                        }));
                    }(1 < s && ve(u), 1 < s && Te(e.slice(0, s - 1).concat({
                        value: " " === e[s - 2].type ? "*" : ""
                    })).replace(j, "$1"), t, s < n && ye(e.slice(s, n)), n < i && ye(e = e.slice(n)), n < i && Te(e));
                }
                u.push(t);
            }
            return ve(u);
        }
        return be.prototype = S.filters = S.pseudos, S.setFilters = new be, f = se.tokenize = function(e, t) {
            var n;
var o;
var i;
var r;
var a;
var s;
var l;
var c = G[e + " "];
            if (c) return t ? 0 : c.slice(0);
            for (a = e, s = [], l = S.preFilter; a; ) {
                for (r in n && !(o = _.exec(a)) || (o && (a = a.slice(o[0].length) || a), s.push(i = [])), 
                n = !1, (o = q.exec(a)) && (n = o.shift(), i.push({
                    value: n,
                    type: o[0].replace(j, " ")
                }), a = a.slice(n.length)), S.filter) !(o = Y[r].exec(a)) || l[r] && !(o = l[r](o)) || (n = o.shift(), 
                i.push({
                    value: n,
                    type: r,
                    matches: o
                }), a = a.slice(n.length));
                if (!n) break;
            }
            return t ? a.length : a ? se.error(e) : G(e, s).slice(0);
        }, h = se.compile = function(e, t) {
            var n;
var b;
var T;
var m;
var v;
var o;
var i = [];
var r = [];
var a = E[e + " "];
            if (!a) {
                for (n = (t = t || f(e)).length; n--; ) ((a = ye(t[n]))[M] ? i : r).push(a);
                (a = E(e, (m = 0 < (T = i).length, v = 0 < (b = r).length, o = function(e, t, n, o, i) {
                    var r;
var a;
var s;
var l = 0;
var c = "0";
var u = e && [];
var d = [];
var p = y;
var f = e || v && S.find.TAG("*";
var i);
var h = w += null == p ? 1 : Math.random() || .1;
var g = f.length;
                    for (i && (y = t == P || t || i); c !== g && null != (r = f[c]); c++) {
                        if (v && r) {
                            for (a = 0, t || r.ownerDocument == P || (x(r), n = !A); s = b[a++]; ) if (s(r, t || P, n)) {
                                o.push(r);
                                break;
                            }
                            i && (w = h);
                        }
                        m && ((r = !s && r) && l--, e && u.push(r));
                    }
                    if (l += c, m && c !== l) {
                        for (a = 0; s = T[a++]; ) s(u, d, t, n);
                        if (e) {
                            if (0 < l) for (;c--; ) u[c] || d[c] || (d[c] = I.call(o));
                            d = Se(d);
                        }
                        k.apply(o, d), i && !e && 0 < d.length && 1 < l + T.length && se.uniqueSort(o);
                    }
                    return i && (w = h, y = p), u;
                }, m ? ce(o) : o))).selector = e;
            }
            return a;
        }, g = se.select = function(e, t, n, o) {
            var i;
var r;
var a;
var s;
var l;
var c = "function" == typeof e && e;
var u = !o && f(e = c.selector || e);
            if (n = n || [], 1 === u.length) {
                if (2 < (r = u[0] = u[0].slice(0)).length && "ID" === (a = r[0]).type && 9 === t.nodeType && A && S.relative[r[1].type]) {
                    if (!(t = (S.find.ID(a.matches[0].replace(oe, d), t) || [])[0])) return n;
                    c && (t = t.parentNode), e = e.slice(r.shift().value.length);
                }
                for (i = Y.needsContext.test(e) ? 0 : r.length; i-- && (a = r[i], !S.relative[s = a.type]); ) if ((l = S.find[s]) && (o = l(a.matches[0].replace(oe, d), ne.test(r[0].type) && ge(t.parentNode) || t))) {
                    if (r.splice(i, 1), !(e = o.length && Te(r))) return k.apply(n, o), n;
                    break;
                }
            }
            return (c || h(e, u))(o, t, !A, n, !t || ne.test(e) && ge(t.parentNode) || t), n;
        }, p.sortStable = M.split("").sort(B).join("") === M, p.detectDuplicates = !!c, 
        x(), p.sortDetached = ue((function(e) {
            return 1 & e.compareDocumentPosition(P.createElement("fieldset"));
        })), ue((function(e) {
            return e.innerHTML = "<a href='#'></a>", "#" === e.firstChild.getAttribute("href");
        })) || de("type|href|height|width", (function(e, t, n) {
            if (!n) return e.getAttribute(t, "type" === t.toLowerCase() ? 1 : 2);
        })), p.attributes && ue((function(e) {
            return e.innerHTML = "<input/>", e.firstChild.setAttribute("value", ""), "" === e.firstChild.getAttribute("value");
        })) || de("value", (function(e, t, n) {
            if (!n && "input" === e.nodeName.toLowerCase()) return e.defaultValue;
        })), ue((function(e) {
            return null == e.getAttribute("disabled");
        })) || de(R, (function(e, t, n) {
            if (!n) return !0 === e[t] ? t.toLowerCase() : (t = e.getAttributeNode(t)) && t.specified ? t.value : null;
        })), se;
    }(x);
    A.find = f, A.expr = f.selectors, A.expr[":"] = A.expr.pseudos, A.uniqueSort = A.unique = f.uniqueSort, 
    A.text = f.getText, A.isXMLDoc = f.isXML, A.contains = f.contains, A.escapeSelector = f.escape;
    function y(e, t, n) {
        for (var o = [];
var i = void 0 !== n; (e = e[t]) && 9 !== e.nodeType; ) if (1 === e.nodeType) {
            if (i && A(e).is(n)) break;
            o.push(e);
        }
        return o;
    }
    function M(e, t) {
        for (var n = []; e; e = e.nextSibling) 1 === e.nodeType && e !== t && n.push(e);
        return n;
    }
    var w = A.expr.match.needsContext;
    function C(e, t) {
        return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase();
    }
    var G = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
    function E(e, n, o) {
        return v(n) ? A.grep(e, (function(e, t) {
            return !!n.call(e, t, e) !== o;
        })) : n.nodeType ? A.grep(e, (function(e) {
            return e === n !== o;
        })) : "string" != typeof n ? A.grep(e, (function(e) {
            return -1 < i.call(n, e) !== o;
        })) : A.filter(n, e, o);
    }
    A.filter = function(e, t, n) {
        var o = t[0];
        return n && (e = ":not(" + e + ")"), 1 === t.length && 1 === o.nodeType ? A.find.matchesSelector(o, e) ? [ o ] : [] : A.find.matches(e, A.grep(t, (function(e) {
            return 1 === e.nodeType;
        })));
    }, A.fn.extend({
        find: function(e) {
            var t;
var n;
var o = this.length;
var i = this;
            if ("string" != typeof e) return this.pushStack(A(e).filter((function() {
                for (t = 0; t < o; t++) if (A.contains(i[t], this)) return !0;
            })));
            for (n = this.pushStack([]), t = 0; t < o; t++) A.find(e, i[t], n);
            return 1 < o ? A.uniqueSort(n) : n;
        },
        filter: function(e) {
            return this.pushStack(E(this, e || [], !1));
        },
        not: function(e) {
            return this.pushStack(E(this, e || [], !0));
        },
        is: function(e) {
            return !!E(this, "string" == typeof e && w.test(e) ? A(e) : e || [], !1).length;
        }
    });
    var H = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;
    (A.fn.init = function(e, t, n) {
        if (!e) return this;
        if (n = n || B, "string" != typeof e) return e.nodeType ? (this[0] = e, this.length = 1, 
        this) : v(e) ? void 0 !== n.ready ? n.ready(e) : e(A) : A.makeArray(e, this);
        if (!(o = "<" === e[0] && ">" === e[e.length - 1] && 3 <= e.length ? [ null, e, null ] : H.exec(e)) || !o[1] && t) return (!t || t.jquery ? t || n : this.constructor(t)).find(e);
        if (o[1]) {
            if (t = t instanceof A ? t[0] : t, A.merge(this, A.parseHTML(o[1], t && t.nodeType ? t.ownerDocument || t : P, !0)), 
            G.test(o[1]) && A.isPlainObject(t)) for (var o in t) v(this[o]) ? this[o](t[o]) : this.attr(o;
var t[o]);
            return this;
        }
        return (e = P.getElementById(o[2])) && (this[0] = e, this.length = 1), this;
    }).prototype = A.fn;
    var B = A(P);
var D = /^(?:parents|prev(?:Until|All))/;
var I = {
        children: !0;
var contents: !0;
var next: !0;
var prev: !0
    };
    function L(e, t) {
        for (;(e = e[t]) && 1 !== e.nodeType; ) ;
        return e;
    }
    A.fn.extend({
        has: function(e) {
            var t = A(e;
var this);
var n = t.length;
            return this.filter((function() {
                for (var e = 0; e < n; e++) if (A.contains(this, t[e])) return !0;
            }));
        },
        closest: function(e, t) {
            var n;
var o = 0;
var i = this.length;
var r = [];
var a = "string" != typeof e && A(e);
            if (!w.test(e)) for (;o < i; o++) for (n = this[o]; n && n !== t; n = n.parentNode) if (n.nodeType < 11 && (a ? -1 < a.index(n) : 1 === n.nodeType && A.find.matchesSelector(n, e))) {
                r.push(n);
                break;
            }
            return this.pushStack(1 < r.length ? A.uniqueSort(r) : r);
        },
        index: function(e) {
            return e ? "string" == typeof e ? i.call(A(e), this[0]) : i.call(this, e.jquery ? e[0] : e) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
        },
        add: function(e, t) {
            return this.pushStack(A.uniqueSort(A.merge(this.get(), A(e, t))));
        },
        addBack: function(e) {
            return this.add(null == e ? this.prevObject : this.prevObject.filter(e));
        }
    }), A.each({
        parent: function(e) {
            e = e.parentNode;
            return e && 11 !== e.nodeType ? e : null;
        },
        parents: function(e) {
            return y(e, "parentNode");
        },
        parentsUntil: function(e, t, n) {
            return y(e, "parentNode", n);
        },
        next: function(e) {
            return L(e, "nextSibling");
        },
        prev: function(e) {
            return L(e, "previousSibling");
        },
        nextAll: function(e) {
            return y(e, "nextSibling");
        },
        prevAll: function(e) {
            return y(e, "previousSibling");
        },
        nextUntil: function(e, t, n) {
            return y(e, "nextSibling", n);
        },
        prevUntil: function(e, t, n) {
            return y(e, "previousSibling", n);
        },
        siblings: function(e) {
            return M((e.parentNode || {}).firstChild, e);
        },
        children: function(e) {
            return M(e.firstChild);
        },
        contents: function(e) {
            return null != e.contentDocument && n(e.contentDocument) ? e.contentDocument : (C(e, "template") && (e = e.content || e), 
            A.merge([], e.childNodes));
        }
    }, (function(o, i) {
        A.fn[o] = function(e, t) {
            var n = A.map(this;
var i;
var e);
            return (t = "Until" !== o.slice(-5) ? e : t) && "string" == typeof t && (n = A.filter(t, n)), 
            1 < this.length && (I[o] || A.uniqueSort(n), D.test(o) && n.reverse()), this.pushStack(n);
        };
    }));
    var k = /[^\x20\t\r\n\f]+/g;
    function N(e) {
        return e;
    }
    function O(e) {
        throw e;
    }
    function R(e, t, n, o) {
        var i;
        try {
            e && v(i = e.promise) ? i.call(e).done(t).fail(n) : e && v(i = e.then) ? i.call(e, t, n) : t.apply(void 0, [ e ].slice(o));
        } catch (e) {
            n.apply(void 0, [ e ]);
        }
    }
    A.Callbacks = function(o) {
        var e;
var n;
        o = "string" == typeof o ? (e = o, n = {}, A.each(e.match(k) || [], (function(e, t) {
            n[t] = !0;
        })), n) : A.extend({}, o);
        function i() {
            for (s = s || o.once, a = r = !0; c.length; u = -1) for (t = c.shift(); ++u < l.length; ) !1 === l[u].apply(t[0], t[1]) && o.stopOnFalse && (u = l.length, 
            t = !1);
            o.memory || (t = !1), r = !1, s && (l = t ? [] : "");
        }
        var r;
var t;
var a;
var s;
var l = [];
var c = [];
var u = -1;
var d = {
            add: function() {
                return l && (t && !r && (u = l.length - 1;
var c.push(t));
var function n(e) {
                    A.each(e;
var (function(e;
var t) {
                        v(t) ? o.unique && d.has(t) || l.push(t) : t && t.length && "string" !== h(t) && n(t);
                    }));
                }(arguments), t && !r && i()), this;
            },
            remove: function() {
                return A.each(arguments, (function(e, t) {
                    for (var n; -1 < (n = A.inArray(t, l, n)); ) l.splice(n, 1), n <= u && u--;
                })), this;
            },
            has: function(e) {
                return e ? -1 < A.inArray(e, l) : 0 < l.length;
            },
            empty: function() {
                return l = l && [], this;
            },
            disable: function() {
                return s = c = [], l = t = "", this;
            },
            disabled: function() {
                return !l;
            },
            lock: function() {
                return s = c = [], t || r || (l = t = ""), this;
            },
            locked: function() {
                return !!s;
            },
            fireWith: function(e, t) {
                return s || (t = [ e, (t = t || []).slice ? t.slice() : t ], c.push(t), r || i()), 
                this;
            },
            fire: function() {
                return d.fireWith(this, arguments), this;
            },
            fired: function() {
                return !!a;
            }
        };
        return d;
    }, A.extend({
        Deferred: function(e) {
            var r = [ [ "notify";
var "progress";
var A.Callbacks("memory");
var A.Callbacks("memory");
var 2 ];
var [ "resolve";
var "done";
var A.Callbacks("once memory");
var A.Callbacks("once memory");
var 0;
var "resolved" ];
var [ "reject";
var "fail";
var A.Callbacks("once memory");
var A.Callbacks("once memory");
var 1;
var "rejected" ] ];
var i = "pending";
var a = {
                state: function() {
                    return i;
                },
                always: function() {
                    return s.done(arguments).fail(arguments), this;
                },
                catch: function(e) {
                    return a.then(null, e);
                },
                pipe: function() {
                    var i = arguments;
                    return A.Deferred((function(o) {
                        A.each(r, (function(e, t) {
                            var n = v(i[t[4]]) && i[t[4]];
                            s[t[1]]((function() {
                                var e = n && n.apply(this;
var arguments);
                                e && v(e.promise) ? e.promise().progress(o.notify).done(o.resolve).fail(o.reject) : o[t[0] + "With"](this, n ? [ e ] : arguments);
                            }));
                        })), i = null;
                    })).promise();
                },
                then: function(t, n, o) {
                    var l = 0;
                    function c(i, r, a, s) {
                        return function() {
                            function e() {
                                var e;
var t;
                                if (!(i < l)) {
                                    if ((e = a.apply(n, o)) === r.promise()) throw new TypeError("Thenable self-resolution");
                                    t = e && ("object" == typeof e || "function" == typeof e) && e.then, v(t) ? s ? t.call(e, c(l, r, N, s), c(l, r, O, s)) : (l++, 
                                    t.call(e, c(l, r, N, s), c(l, r, O, s), c(l, r, N, r.notifyWith))) : (a !== N && (n = void 0, 
                                    o = [ e ]), (s || r.resolveWith)(n, o));
                                }
                            }
                            var n = this;
var o = arguments;
var t = s ? e : function() {
                                try {
                                    e();
                                } catch (e) {
                                    A.Deferred.exceptionHook && A.Deferred.exceptionHook(e, t.stackTrace), l <= i + 1 && (a !== O && (n = void 0, 
                                    o = [ e ]), r.rejectWith(n, o));
                                }
                            };
                            i ? t() : (A.Deferred.getStackHook && (t.stackTrace = A.Deferred.getStackHook()), 
                            x.setTimeout(t));
                        };
                    }
                    return A.Deferred((function(e) {
                        r[0][3].add(c(0, e, v(o) ? o : N, e.notifyWith)), r[1][3].add(c(0, e, v(t) ? t : N)), 
                        r[2][3].add(c(0, e, v(n) ? n : O));
                    })).promise();
                },
                promise: function(e) {
                    return null != e ? A.extend(e, a) : a;
                }
            }, s = {};
            return A.each(r, (function(e, t) {
                var n = t[2];
var o = t[5];
                a[t[1]] = n.add, o && n.add((function() {
                    i = o;
                }), r[3 - e][2].disable, r[3 - e][3].disable, r[0][2].lock, r[0][3].lock), n.add(t[3].fire), 
                s[t[0]] = function() {
                    return s[t[0] + "With"](this === s ? void 0 : this, arguments), this;
                }, s[t[0] + "With"] = n.fireWith;
            })), a.promise(s), e && e.call(s, s), s;
        },
        when: function(e) {
            function t(t) {
                return function(e) {
                    i[t] = this, r[t] = 1 < arguments.length ? s.call(arguments) : e, --n || a.resolveWith(i, r);
                };
            }
            var n = arguments.length;
var o = n;
var i = Array(o);
var r = s.call(arguments);
var a = A.Deferred();
            if (n <= 1 && (R(e, a.done(t(o)).resolve, a.reject, !n), "pending" === a.state() || v(r[o] && r[o].then))) return a.then();
            for (;o--; ) R(r[o], t(o), a.reject);
            return a.promise();
        }
    });
    var $ = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
    A.Deferred.exceptionHook = function(e, t) {
        x.console && x.console.warn && e && $.test(e.name) && x.console.warn("jQuery.Deferred exception: " + e.message, e.stack, t);
    }, A.readyException = function(e) {
        x.setTimeout((function() {
            throw e;
        }));
    };
    var F = A.Deferred();
    function V() {
        P.removeEventListener("DOMContentLoaded", V), x.removeEventListener("load", V), 
        A.ready();
    }
    A.fn.ready = function(e) {
        return F.then(e).catch((function(e) {
            A.readyException(e);
        })), this;
    }, A.extend({
        isReady: !1,
        readyWait: 1,
        ready: function(e) {
            (!0 === e ? --A.readyWait : A.isReady) || (A.isReady = !0) !== e && 0 < --A.readyWait || F.resolveWith(P, [ A ]);
        }
    }), A.ready.then = F.then, "complete" === P.readyState || "loading" !== P.readyState && !P.documentElement.doScroll ? x.setTimeout(A.ready) : (P.addEventListener("DOMContentLoaded", V), 
    x.addEventListener("load", V));
    var X = function(e;
var t;
var n;
var o;
var i;
var r;
var a) {
        var s = 0;
var l = e.length;
var c = null == n;
        if ("object" === h(n)) for (s in i = !0, n) X(e, t, s, n[s], !0, r, a); else if (void 0 !== o && (i = !0, 
        v(o) || (a = !0), t = c ? a ? (t.call(e, o), null) : (c = t, function(e, t, n) {
            return c.call(A(e), n);
        }) : t)) for (;s < l; s++) t(e[s], n, a ? o : o.call(e[s], s, t(e[s], n)));
        return i ? e : c ? t.call(e) : l ? t(e[0], n) : r;
    }, W = /^-ms-/, j = /-([a-z])/g;
    function _(e, t) {
        return t.toUpperCase();
    }
    function q(e) {
        return e.replace(W, "ms-").replace(j, _);
    }
    function U(e) {
        return 1 === e.nodeType || 9 === e.nodeType || !+e.nodeType;
    }
    function z() {
        this.expando = A.expando + z.uid++;
    }
    z.uid = 1, z.prototype = {
        cache: function(e) {
            var t = e[this.expando];
            return t || (t = {}, U(e) && (e.nodeType ? e[this.expando] = t : Object.defineProperty(e, this.expando, {
                value: t,
                configurable: !0
            }))), t;
        },
        set: function(e, t, n) {
            var o;
var i = this.cache(e);
            if ("string" == typeof t) i[q(t)] = n; else for (o in t) i[q(o)] = t[o];
            return i;
        },
        get: function(e, t) {
            return void 0 === t ? this.cache(e) : e[this.expando] && e[this.expando][q(t)];
        },
        access: function(e, t, n) {
            return void 0 === t || t && "string" == typeof t && void 0 === n ? this.get(e, t) : (this.set(e, t, n), 
            void 0 !== n ? n : t);
        },
        remove: function(e, t) {
            var n;
var o = e[this.expando];
            if (void 0 !== o) {
                if (void 0 !== t) {
                    n = (t = Array.isArray(t) ? t.map(q) : (t = q(t)) in o ? [ t ] : t.match(k) || []).length;
                    for (;n--; ) delete o[t[n]];
                }
                void 0 !== t && !A.isEmptyObject(o) || (e.nodeType ? e[this.expando] = void 0 : delete e[this.expando]);
            }
        },
        hasData: function(e) {
            e = e[this.expando];
            return void 0 !== e && !A.isEmptyObject(e);
        }
    };
    var K = new z;
var Y = new z;
var Q = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/;
var Z = /[A-Z]/g;
    function J(e, t, n) {
        var o;
var i;
        if (void 0 === n && 1 === e.nodeType) if (o = "data-" + t.replace(Z, "-$&").toLowerCase(), 
        "string" == typeof (n = e.getAttribute(o))) {
            try {
                n = "true" === (i = n) || "false" !== i && ("null" === i ? null : i === +i + "" ? +i : Q.test(i) ? JSON.parse(i) : i);
            } catch (e) {}
            Y.set(e, t, n);
        } else n = void 0;
        return n;
    }
    A.extend({
        hasData: function(e) {
            return Y.hasData(e) || K.hasData(e);
        },
        data: function(e, t, n) {
            return Y.access(e, t, n);
        },
        removeData: function(e, t) {
            Y.remove(e, t);
        },
        _data: function(e, t, n) {
            return K.access(e, t, n);
        },
        _removeData: function(e, t) {
            K.remove(e, t);
        }
    }), A.fn.extend({
        data: function(n, e) {
            var t;
var o;
var i;
var r = this[0];
var a = r && r.attributes;
            if (void 0 !== n) return "object" == typeof n ? this.each((function() {
                Y.set(this, n);
            })) : X(this, (function(e) {
                var t;
                return r && void 0 === e ? void 0 !== (t = Y.get(r, n)) || void 0 !== (t = J(r, n)) ? t : void 0 : void this.each((function() {
                    Y.set(this, n, e);
                }));
            }), null, e, 1 < arguments.length, null, !0);
            if (this.length && (i = Y.get(r), 1 === r.nodeType && !K.get(r, "hasDataAttrs"))) {
                for (t = a.length; t--; ) a[t] && 0 === (o = a[t].name).indexOf("data-") && (o = q(o.slice(5)), 
                J(r, o, i[o]));
                K.set(r, "hasDataAttrs", !0);
            }
            return i;
        },
        removeData: function(e) {
            return this.each((function() {
                Y.remove(this, e);
            }));
        }
    }), A.extend({
        queue: function(e, t, n) {
            var o;
            if (e) return o = K.get(e, t = (t || "fx") + "queue"), n && (!o || Array.isArray(n) ? o = K.access(e, t, A.makeArray(n)) : o.push(n)), 
            o || [];
        },
        dequeue: function(e, t) {
            t = t || "fx";
            var n = A.queue(e;
var t);
var o = n.length;
var i = n.shift();
var r = A._queueHooks(e;
var t);
            "inprogress" === i && (i = n.shift(), o--), i && ("fx" === t && n.unshift("inprogress"), 
            delete r.stop, i.call(e, (function() {
                A.dequeue(e, t);
            }), r)), !o && r && r.empty.fire();
        },
        _queueHooks: function(e, t) {
            var n = t + "queueHooks";
            return K.get(e, n) || K.access(e, n, {
                empty: A.Callbacks("once memory").add((function() {
                    K.remove(e, [ t + "queue", n ]);
                }))
            });
        }
    }), A.fn.extend({
        queue: function(t, n) {
            var e = 2;
            return "string" != typeof t && (n = t, t = "fx", e--), arguments.length < e ? A.queue(this[0], t) : void 0 === n ? this : this.each((function() {
                var e = A.queue(this;
var t;
var n);
                A._queueHooks(this, t), "fx" === t && "inprogress" !== e[0] && A.dequeue(this, t);
            }));
        },
        dequeue: function(e) {
            return this.each((function() {
                A.dequeue(this, e);
            }));
        },
        clearQueue: function(e) {
            return this.queue(e || "fx", []);
        },
        promise: function(e, t) {
            function n() {
                --i || r.resolveWith(a, [ a ]);
            }
            var o;
var i = 1;
var r = A.Deferred();
var a = this;
var s = this.length;
            for ("string" != typeof e && (t = e, e = void 0), e = e || "fx"; s--; ) (o = K.get(a[s], e + "queueHooks")) && o.empty && (i++, 
            o.empty.add(n));
            return n(), r.promise(t);
        }
    });
    var ee = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
var te = new RegExp("^(?:([+-])=|)(" + ee + ")([a-z%]*)$";
var "i");
var ne = [ "Top";
var "Right";
var "Bottom";
var "Left" ];
var oe = P.documentElement;
var ie = function(e) {
        return A.contains(e.ownerDocument;
var e);
    }, re = {
        composed: !0
    };
    oe.getRootNode && (ie = function(e) {
        return A.contains(e.ownerDocument, e) || e.getRootNode(re) === e.ownerDocument;
    });
    function ae(e, t) {
        return "none" === (e = t || e).style.display || "" === e.style.display && ie(e) && "none" === A.css(e, "display");
    }
    function se(e, t, n, o) {
        var i;
var r;
var a = 20;
var s = o ? function() {
            return o.cur();
        } : function() {
            return A.css(e, t, "");
        }, l = s(), c = n && n[3] || (A.cssNumber[t] ? "" : "px"), u = e.nodeType && (A.cssNumber[t] || "px" !== c && +l) && te.exec(A.css(e, t));
        if (u && u[3] !== c) {
            for (c = c || u[3], u = +(l /= 2) || 1; a--; ) A.style(e, t, u + c), (1 - r) * (1 - (r = s() / l || .5)) <= 0 && (a = 0), 
            u /= r;
            A.style(e, t, (u *= 2) + c), n = n || [];
        }
        return n && (u = +u || +l || 0, i = n[1] ? u + (n[1] + 1) * n[2] : +n[2], o && (o.unit = c, 
        o.start = u, o.end = i)), i;
    }
    var le = {};
    function ce(e, t) {
        for (var n;
var o;
var i;
var r;
var a;
var s;
var l = [];
var c = 0;
var u = e.length; c < u; c++) (o = e[c]).style && (n = o.style.display, 
        t ? ("none" === n && (l[c] = K.get(o, "display") || null, l[c] || (o.style.display = "")), 
        "" === o.style.display && ae(o) && (l[c] = (s = r = i = void 0, r = o.ownerDocument, 
        a = o.nodeName, (s = le[a]) || (i = r.body.appendChild(r.createElement(a)), s = A.css(i, "display"), 
        i.parentNode.removeChild(i), le[a] = s = "none" === s ? "block" : s)))) : "none" !== n && (l[c] = "none", 
        K.set(o, "display", n)));
        for (c = 0; c < u; c++) null != l[c] && (e[c].style.display = l[c]);
        return e;
    }
    A.fn.extend({
        show: function() {
            return ce(this, !0);
        },
        hide: function() {
            return ce(this);
        },
        toggle: function(e) {
            return "boolean" == typeof e ? e ? this.show() : this.hide() : this.each((function() {
                ae(this) ? A(this).show() : A(this).hide();
            }));
        }
    });
    var ue = /^(?:checkbox|radio)$/i;
var de = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
var pe = /^$|^module$|\/(?:java|ecma)script/i;
var d = P.createDocumentFragment().appendChild(P.createElement("div"));
    (f = P.createElement("input")).setAttribute("type", "radio"), f.setAttribute("checked", "checked"), 
    f.setAttribute("name", "t"), d.appendChild(f), m.checkClone = d.cloneNode(!0).cloneNode(!0).lastChild.checked, 
    d.innerHTML = "<textarea>x</textarea>", m.noCloneChecked = !!d.cloneNode(!0).lastChild.defaultValue, 
    d.innerHTML = "<option></option>", m.option = !!d.lastChild;
    var fe = {
        thead: [ 1;
var "<table>";
var "</table>" ];
var col: [ 2;
var "<table><colgroup>";
var "</colgroup></table>" ];
var tr: [ 2;
var "<table><tbody>";
var "</tbody></table>" ];
var td: [ 3;
var "<table><tbody><tr>";
var "</tr></tbody></table>" ];
var _default: [ 0;
var "";
var "" ]
    };
    function he(e, t) {
        var n = void 0 !== e.getElementsByTagName ? e.getElementsByTagName(t || "*") : void 0 !== e.querySelectorAll ? e.querySelectorAll(t || "*") : [];
        return void 0 === t || t && C(e, t) ? A.merge([ e ], n) : n;
    }
    function ge(e, t) {
        for (var n = 0;
var o = e.length; n < o; n++) K.set(e[n], "globalEval", !t || K.get(t[n], "globalEval"));
    }
    fe.tbody = fe.tfoot = fe.colgroup = fe.caption = fe.thead, fe.th = fe.td, m.option || (fe.optgroup = fe.option = [ 1, "<select multiple='multiple'>", "</select>" ]);
    var be = /<|&#?\w+;/;
    function Te(e, t, n, o, i) {
        for (var r;
var a;
var s;
var l;
var c;
var u = t.createDocumentFragment();
var d = [];
var p = 0;
var f = e.length; p < f; p++) if ((r = e[p]) || 0 === r) if ("object" === h(r)) A.merge(d, r.nodeType ? [ r ] : r); else if (be.test(r)) {
            for (a = a || u.appendChild(t.createElement("div")), s = (de.exec(r) || [ "", "" ])[1].toLowerCase(), 
            s = fe[s] || fe._default, a.innerHTML = s[1] + A.htmlPrefilter(r) + s[2], c = s[0]; c--; ) a = a.lastChild;
            A.merge(d, a.childNodes), (a = u.firstChild).textContent = "";
        } else d.push(t.createTextNode(r));
        for (u.textContent = "", p = 0; r = d[p++]; ) if (o && -1 < A.inArray(r, o)) i && i.push(r); else if (l = ie(r), 
        a = he(u.appendChild(r), "script"), l && ge(a), n) for (c = 0; r = a[c++]; ) pe.test(r.type || "") && n.push(r);
        return u;
    }
    var me = /^([^.]*)(?:\.(.+)|)/;
    function ve() {
        return !0;
    }
    function Se() {
        return !1;
    }
    function ye(e, t) {
        return e === function() {
            try {
                return P.activeElement;
            } catch (e) {}
        }() == ("focus" === t);
    }
    function xe(e, t, n, o, i, r) {
        var a;
var s;
        if ("object" == typeof t) {
            for (s in "string" != typeof n && (o = o || n, n = void 0), t) xe(e, s, n, o, t[s], r);
            return e;
        }
        if (null == o && null == i ? (i = n, o = n = void 0) : null == i && ("string" == typeof n ? (i = o, 
        o = void 0) : (i = o, o = n, n = void 0)), !1 === i) i = Se; else if (!i) return e;
        return 1 === r && (a = i, (i = function(e) {
            return A().off(e), a.apply(this, arguments);
        }).guid = a.guid || (a.guid = A.guid++)), e.each((function() {
            A.event.add(this, t, i, o, n);
        }));
    }
    function Pe(e, i, r) {
        r ? (K.set(e, i, !1), A.event.add(e, i, {
            namespace: !1,
            handler: function(e) {
                var t;
var n;
var o = K.get(this;
var i);
                if (1 & e.isTrigger && this[i]) {
                    if (o.length) (A.event.special[i] || {}).delegateType && e.stopPropagation(); else if (o = s.call(arguments), 
                    K.set(this, i, o), t = r(this, i), this[i](), o !== (n = K.get(this, i)) || t ? K.set(this, i, !1) : n = {}, 
                    o !== n) return e.stopImmediatePropagation(), e.preventDefault(), n && n.value;
                } else o.length && (K.set(this, i, {
                    value: A.event.trigger(A.extend(o[0], A.Event.prototype), o.slice(1), this)
                }), e.stopImmediatePropagation());
            }
        })) : void 0 === K.get(e, i) && A.event.add(e, i, ve);
    }
    A.event = {
        global: {},
        add: function(t, e, n, o, i) {
            var r;
var a;
var s;
var l;
var c;
var u;
var d;
var p;
var f;
var h = K.get(t);
            if (U(t)) for (n.handler && (n = (r = n).handler, i = r.selector), i && A.find.matchesSelector(oe, i), 
            n.guid || (n.guid = A.guid++), (s = h.events) || (s = h.events = Object.create(null)), 
            (a = h.handle) || (a = h.handle = function(e) {
                return void 0 !== A && A.event.triggered !== e.type ? A.event.dispatch.apply(t, arguments) : void 0;
            }), l = (e = (e || "").match(k) || [ "" ]).length; l--; ) d = f = (c = me.exec(e[l]) || [])[1], 
            p = (c[2] || "").split(".").sort(), d && (u = A.event.special[d] || {}, d = (i ? u.delegateType : u.bindType) || d, 
            u = A.event.special[d] || {}, c = A.extend({
                type: d,
                origType: f,
                data: o,
                handler: n,
                guid: n.guid,
                selector: i,
                needsContext: i && A.expr.match.needsContext.test(i),
                namespace: p.join(".")
            }, r), (f = s[d]) || ((f = s[d] = []).delegateCount = 0, u.setup && !1 !== u.setup.call(t, o, p, a) || t.addEventListener && t.addEventListener(d, a)), 
            u.add && (u.add.call(t, c), c.handler.guid || (c.handler.guid = n.guid)), i ? f.splice(f.delegateCount++, 0, c) : f.push(c), 
            A.event.global[d] = !0);
        },
        remove: function(e, t, n, o, i) {
            var r;
var a;
var s;
var l;
var c;
var u;
var d;
var p;
var f;
var h;
var g;
var b = K.hasData(e) && K.get(e);
            if (b && (l = b.events)) {
                for (c = (t = (t || "").match(k) || [ "" ]).length; c--; ) if (f = g = (s = me.exec(t[c]) || [])[1], 
                h = (s[2] || "").split(".").sort(), f) {
                    for (d = A.event.special[f] || {}, p = l[f = (o ? d.delegateType : d.bindType) || f] || [], 
                    s = s[2] && new RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)"), a = r = p.length; r--; ) u = p[r], 
                    !i && g !== u.origType || n && n.guid !== u.guid || s && !s.test(u.namespace) || o && o !== u.selector && ("**" !== o || !u.selector) || (p.splice(r, 1), 
                    u.selector && p.delegateCount--, d.remove && d.remove.call(e, u));
                    a && !p.length && (d.teardown && !1 !== d.teardown.call(e, h, b.handle) || A.removeEvent(e, f, b.handle), 
                    delete l[f]);
                } else for (f in l) A.event.remove(e, f + t[c], n, o, !0);
                A.isEmptyObject(l) && K.remove(e, "handle events");
            }
        },
        dispatch: function(e) {
            var t;
var n;
var o;
var i;
var r;
var a = new Array(arguments.length);
var s = A.event.fix(e);
var l = (K.get(this;
var "events") || Object.create(null))[s.type] || [];
var e = A.event.special[s.type] || {};
            for (a[0] = s, t = 1; t < arguments.length; t++) a[t] = arguments[t];
            if (s.delegateTarget = this, !e.preDispatch || !1 !== e.preDispatch.call(this, s)) {
                for (r = A.event.handlers.call(this, s, l), t = 0; (o = r[t++]) && !s.isPropagationStopped(); ) for (s.currentTarget = o.elem, 
                n = 0; (i = o.handlers[n++]) && !s.isImmediatePropagationStopped(); ) s.rnamespace && !1 !== i.namespace && !s.rnamespace.test(i.namespace) || (s.handleObj = i, 
                s.data = i.data, void 0 !== (i = ((A.event.special[i.origType] || {}).handle || i.handler).apply(o.elem, a)) && !1 === (s.result = i) && (s.preventDefault(), 
                s.stopPropagation()));
                return e.postDispatch && e.postDispatch.call(this, s), s.result;
            }
        },
        handlers: function(e, t) {
            var n;
var o;
var i;
var r;
var a;
var s = [];
var l = t.delegateCount;
var c = e.target;
            if (l && c.nodeType && !("click" === e.type && 1 <= e.button)) for (;c !== this; c = c.parentNode || this) if (1 === c.nodeType && ("click" !== e.type || !0 !== c.disabled)) {
                for (r = [], a = {}, n = 0; n < l; n++) void 0 === a[i = (o = t[n]).selector + " "] && (a[i] = o.needsContext ? -1 < A(i, this).index(c) : A.find(i, this, null, [ c ]).length), 
                a[i] && r.push(o);
                r.length && s.push({
                    elem: c,
                    handlers: r
                });
            }
            return c = this, l < t.length && s.push({
                elem: c,
                handlers: t.slice(l)
            }), s;
        },
        addProp: function(t, e) {
            Object.defineProperty(A.Event.prototype, t, {
                enumerable: !0,
                configurable: !0,
                get: v(e) ? function() {
                    if (this.originalEvent) return e(this.originalEvent);
                } : function() {
                    if (this.originalEvent) return this.originalEvent[t];
                },
                set: function(e) {
                    Object.defineProperty(this, t, {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: e
                    });
                }
            });
        },
        fix: function(e) {
            return e[A.expando] ? e : new A.Event(e);
        },
        special: {
            load: {
                noBubble: !0
            },
            click: {
                setup: function(e) {
                    e = this || e;
                    return ue.test(e.type) && e.click && C(e, "input") && Pe(e, "click", ve), !1;
                },
                trigger: function(e) {
                    e = this || e;
                    return ue.test(e.type) && e.click && C(e, "input") && Pe(e, "click"), !0;
                },
                _default: function(e) {
                    e = e.target;
                    return ue.test(e.type) && e.click && C(e, "input") && K.get(e, "click") || C(e, "a");
                }
            },
            beforeunload: {
                postDispatch: function(e) {
                    void 0 !== e.result && e.originalEvent && (e.originalEvent.returnValue = e.result);
                }
            }
        }
    }, A.removeEvent = function(e, t, n) {
        e.removeEventListener && e.removeEventListener(t, n);
    }, A.Event = function(e, t) {
        if (!(this instanceof A.Event)) return new A.Event(e, t);
        e && e.type ? (this.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented || void 0 === e.defaultPrevented && !1 === e.returnValue ? ve : Se, 
        this.target = e.target && 3 === e.target.nodeType ? e.target.parentNode : e.target, 
        this.currentTarget = e.currentTarget, this.relatedTarget = e.relatedTarget) : this.type = e, 
        t && A.extend(this, t), this.timeStamp = e && e.timeStamp || Date.now(), this[A.expando] = !0;
    }, A.Event.prototype = {
        constructor: A.Event,
        isDefaultPrevented: Se,
        isPropagationStopped: Se,
        isImmediatePropagationStopped: Se,
        isSimulated: !1,
        preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = ve, e && !this.isSimulated && e.preventDefault();
        },
        stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = ve, e && !this.isSimulated && e.stopPropagation();
        },
        stopImmediatePropagation: function() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = ve, e && !this.isSimulated && e.stopImmediatePropagation(), 
            this.stopPropagation();
        }
    }, A.each({
        altKey: !0,
        bubbles: !0,
        cancelable: !0,
        changedTouches: !0,
        ctrlKey: !0,
        detail: !0,
        eventPhase: !0,
        metaKey: !0,
        pageX: !0,
        pageY: !0,
        shiftKey: !0,
        view: !0,
        char: !0,
        code: !0,
        charCode: !0,
        key: !0,
        keyCode: !0,
        button: !0,
        buttons: !0,
        clientX: !0,
        clientY: !0,
        offsetX: !0,
        offsetY: !0,
        pointerId: !0,
        pointerType: !0,
        screenX: !0,
        screenY: !0,
        targetTouches: !0,
        toElement: !0,
        touches: !0,
        which: !0
    }, A.event.addProp), A.each({
        focus: "focusin",
        blur: "focusout"
    }, (function(e, t) {
        A.event.special[e] = {
            setup: function() {
                return Pe(this, e, ye), !1;
            },
            trigger: function() {
                return Pe(this, e), !0;
            },
            _default: function() {
                return !0;
            },
            delegateType: t
        };
    })), A.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, (function(e, i) {
        A.event.special[e] = {
            delegateType: i,
            bindType: i,
            handle: function(e) {
                var t;
var n = e.relatedTarget;
var o = e.handleObj;
                return n && (n === this || A.contains(this, n)) || (e.type = o.origType, t = o.handler.apply(this, arguments), 
                e.type = i), t;
            }
        };
    })), A.fn.extend({
        on: function(e, t, n, o) {
            return xe(this, e, t, n, o);
        },
        one: function(e, t, n, o) {
            return xe(this, e, t, n, o, 1);
        },
        off: function(e, t, n) {
            var o;
var i;
            if (e && e.preventDefault && e.handleObj) return o = e.handleObj, A(e.delegateTarget).off(o.namespace ? o.origType + "." + o.namespace : o.origType, o.selector, o.handler), 
            this;
            if ("object" != typeof e) return !1 !== t && "function" != typeof t || (n = t, t = void 0), 
            !1 === n && (n = Se), this.each((function() {
                A.event.remove(this, e, n, t);
            }));
            for (i in e) this.off(i, t, e[i]);
            return this;
        }
    });
    var Ae = /<script|<style|<link/i;
var Me = /checked\s*(?:[^=]|=\s*.checked.)/i;
var we = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
    function Ce(e, t) {
        return C(e, "table") && C(11 !== t.nodeType ? t : t.firstChild, "tr") && A(e).children("tbody")[0] || e;
    }
    function Ge(e) {
        return e.type = (null !== e.getAttribute("type")) + "/" + e.type, e;
    }
    function Ee(e) {
        return "true/" === (e.type || "").slice(0, 5) ? e.type = e.type.slice(5) : e.removeAttribute("type"), 
        e;
    }
    function He(e, t) {
        var n;
var o;
var i;
var r;
        if (1 === t.nodeType) {
            if (K.hasData(e) && (r = K.get(e).events)) for (i in K.remove(t, "handle events"), 
            r) for (n = 0, o = r[i].length; n < o; n++) A.event.add(t, i, r[i][n]);
            Y.hasData(e) && (e = Y.access(e), e = A.extend({}, e), Y.set(t, e));
        }
    }
    function Be(n, o, i, r) {
        o = b(o);
        var e;
var t;
var a;
var s;
var l;
var c;
var u = 0;
var d = n.length;
var p = d - 1;
var f = o[0];
var h = v(f);
        if (h || 1 < d && "string" == typeof f && !m.checkClone && Me.test(f)) return n.each((function(e) {
            var t = n.eq(e);
            h && (o[0] = f.call(this, e, t.html())), Be(t, o, i, r);
        }));
        if (d && (t = (e = Te(o, n[0].ownerDocument, !1, n, r)).firstChild, 1 === e.childNodes.length && (e = t), 
        t || r)) {
            for (s = (a = A.map(he(e, "script"), Ge)).length; u < d; u++) l = e, u !== p && (l = A.clone(l, !0, !0), 
            s && A.merge(a, he(l, "script"))), i.call(n[u], l, u);
            if (s) for (c = a[a.length - 1].ownerDocument, A.map(a, Ee), u = 0; u < s; u++) l = a[u], 
            pe.test(l.type || "") && !K.access(l, "globalEval") && A.contains(c, l) && (l.src && "module" !== (l.type || "").toLowerCase() ? A._evalUrl && !l.noModule && A._evalUrl(l.src, {
                nonce: l.nonce || l.getAttribute("nonce")
            }, c) : S(l.textContent.replace(we, ""), l, c));
        }
        return n;
    }
    function De(e, t, n) {
        for (var o;
var i = t ? A.filter(t;
var e) : e;
var r = 0; null != (o = i[r]); r++) n || 1 !== o.nodeType || A.cleanData(he(o)), 
        o.parentNode && (n && ie(o) && ge(he(o, "script")), o.parentNode.removeChild(o));
        return e;
    }
    A.extend({
        htmlPrefilter: function(e) {
            return e;
        },
        clone: function(e, t, n) {
            var o;
var i;
var r;
var a;
var s;
var l;
var c;
var u = e.cloneNode(!0);
var d = ie(e);
            if (!(m.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || A.isXMLDoc(e))) for (a = he(u), 
            o = 0, i = (r = he(e)).length; o < i; o++) s = r[o], "input" === (c = (l = a[o]).nodeName.toLowerCase()) && ue.test(s.type) ? l.checked = s.checked : "input" !== c && "textarea" !== c || (l.defaultValue = s.defaultValue);
            if (t) if (n) for (r = r || he(e), a = a || he(u), o = 0, i = r.length; o < i; o++) He(r[o], a[o]); else He(e, u);
            return 0 < (a = he(u, "script")).length && ge(a, !d && he(e, "script")), u;
        },
        cleanData: function(e) {
            for (var t;
var n;
var o;
var i = A.event.special;
var r = 0; void 0 !== (n = e[r]); r++) if (U(n)) {
                if (t = n[K.expando]) {
                    if (t.events) for (o in t.events) i[o] ? A.event.remove(n, o) : A.removeEvent(n, o, t.handle);
                    n[K.expando] = void 0;
                }
                n[Y.expando] && (n[Y.expando] = void 0);
            }
        }
    }), A.fn.extend({
        detach: function(e) {
            return De(this, e, !0);
        },
        remove: function(e) {
            return De(this, e);
        },
        text: function(e) {
            return X(this, (function(e) {
                return void 0 === e ? A.text(this) : this.empty().each((function() {
                    1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = e);
                }));
            }), null, e, arguments.length);
        },
        append: function() {
            return Be(this, arguments, (function(e) {
                1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || Ce(this, e).appendChild(e);
            }));
        },
        prepend: function() {
            return Be(this, arguments, (function(e) {
                var t;
                1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (t = Ce(this, e)).insertBefore(e, t.firstChild);
            }));
        },
        before: function() {
            return Be(this, arguments, (function(e) {
                this.parentNode && this.parentNode.insertBefore(e, this);
            }));
        },
        after: function() {
            return Be(this, arguments, (function(e) {
                this.parentNode && this.parentNode.insertBefore(e, this.nextSibling);
            }));
        },
        empty: function() {
            for (var e;
var t = 0; null != (e = this[t]); t++) 1 === e.nodeType && (A.cleanData(he(e, !1)), 
            e.textContent = "");
            return this;
        },
        clone: function(e, t) {
            return e = null != e && e, t = null == t ? e : t, this.map((function() {
                return A.clone(this, e, t);
            }));
        },
        html: function(e) {
            return X(this, (function(e) {
                var t = this[0] || {};
var n = 0;
var o = this.length;
                if (void 0 === e && 1 === t.nodeType) return t.innerHTML;
                if ("string" == typeof e && !Ae.test(e) && !fe[(de.exec(e) || [ "", "" ])[1].toLowerCase()]) {
                    e = A.htmlPrefilter(e);
                    try {
                        for (;n < o; n++) 1 === (t = this[n] || {}).nodeType && (A.cleanData(he(t, !1)), 
                        t.innerHTML = e);
                        t = 0;
                    } catch (e) {}
                }
                t && this.empty().append(e);
            }), null, e, arguments.length);
        },
        replaceWith: function() {
            var n = [];
            return Be(this, arguments, (function(e) {
                var t = this.parentNode;
                A.inArray(this, n) < 0 && (A.cleanData(he(this)), t && t.replaceChild(e, this));
            }), n);
        }
    }), A.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, (function(e, a) {
        A.fn[e] = function(e) {
            for (var t;
var n = [];
var o = A(e);
var i = o.length - 1;
var r = 0; r <= i; r++) t = r === i ? this : this.clone(!0), 
            A(o[r])[a](t), l.apply(n, t.get());
            return this.pushStack(n);
        };
    }));
    function Ie(e, t, n) {
        var o;
var i = {};
        for (o in t) i[o] = e.style[o], e.style[o] = t[o];
        for (o in n = n.call(e), t) e.style[o] = i[o];
        return n;
    }
    var Le;
var ke;
var Ne;
var Oe;
var Re;
var $e;
var Fe;
var Ve;
var Xe = new RegExp("^(" + ee + ")(?!px)[a-z%]+$";
var "i");
var We = function(e) {
        var t = e.ownerDocument.defaultView;
        return (t = !t || !t.opener ? x : t).getComputedStyle(e);
    }, je = new RegExp(ne.join("|"), "i");
    function _e(e, t, n) {
        var o;
var i;
var r = e.style;
        return (n = n || We(e)) && ("" !== (i = n.getPropertyValue(t) || n[t]) || ie(e) || (i = A.style(e, t)), 
        !m.pixelBoxStyles() && Xe.test(i) && je.test(t) && (o = r.width, e = r.minWidth, 
        t = r.maxWidth, r.minWidth = r.maxWidth = r.width = i, i = n.width, r.width = o, 
        r.minWidth = e, r.maxWidth = t)), void 0 !== i ? i + "" : i;
    }
    function qe(e, t) {
        return {
            get: function() {
                if (!e()) return (this.get = t).apply(this, arguments);
                delete this.get;
            }
        };
    }
    function Ue() {
        var e;
        Ve && (Fe.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0", 
        Ve.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%", 
        oe.appendChild(Fe).appendChild(Ve), e = x.getComputedStyle(Ve), Le = "1%" !== e.top, 
        $e = 12 === ze(e.marginLeft), Ve.style.right = "60%", Oe = 36 === ze(e.right), ke = 36 === ze(e.width), 
        Ve.style.position = "absolute", Ne = 12 === ze(Ve.offsetWidth / 3), oe.removeChild(Fe), 
        Ve = null);
    }
    function ze(e) {
        return Math.round(parseFloat(e));
    }
    Fe = P.createElement("div"), (Ve = P.createElement("div")).style && (Ve.style.backgroundClip = "content-box", 
    Ve.cloneNode(!0).style.backgroundClip = "", m.clearCloneStyle = "content-box" === Ve.style.backgroundClip, 
    A.extend(m, {
        boxSizingReliable: function() {
            return Ue(), ke;
        },
        pixelBoxStyles: function() {
            return Ue(), Oe;
        },
        pixelPosition: function() {
            return Ue(), Le;
        },
        reliableMarginLeft: function() {
            return Ue(), $e;
        },
        scrollboxSize: function() {
            return Ue(), Ne;
        },
        reliableTrDimensions: function() {
            var e;
var t;
var n;
            return null == Re && (e = P.createElement("table"), t = P.createElement("tr"), n = P.createElement("div"), 
            e.style.cssText = "position:absolute;left:-11111px;border-collapse:separate", t.style.cssText = "border:1px solid", 
            t.style.height = "1px", n.style.height = "9px", n.style.display = "block", oe.appendChild(e).appendChild(t).appendChild(n), 
            n = x.getComputedStyle(t), Re = parseInt(n.height, 10) + parseInt(n.borderTopWidth, 10) + parseInt(n.borderBottomWidth, 10) === t.offsetHeight, 
            oe.removeChild(e)), Re;
        }
    }));
    var Ke = [ "Webkit";
var "Moz";
var "ms" ];
var Ye = P.createElement("div").style;
var Qe = {};
    function Ze(e) {
        return A.cssProps[e] || Qe[e] || (e in Ye ? e : Qe[e] = function(e) {
            for (var t = e[0].toUpperCase() + e.slice(1);
var n = Ke.length; n--; ) if ((e = Ke[n] + t) in Ye) return e;
        }(e) || e);
    }
    var Je = /^(none|table(?!-c[ea]).+)/;
var et = /^--/;
var tt = {
        position: "absolute";
var visibility: "hidden";
var display: "block"
    };
var nt = {
        letterSpacing: "0";
var fontWeight: "400"
    };
    function ot(e, t, n) {
        var o = te.exec(t);
        return o ? Math.max(0, o[2] - (n || 0)) + (o[3] || "px") : t;
    }
    function it(e, t, n, o, i, r) {
        var a = "width" === t ? 1 : 0;
var s = 0;
var l = 0;
        if (n === (o ? "border" : "content")) return 0;
        for (;a < 4; a += 2) "margin" === n && (l += A.css(e, n + ne[a], !0, i)), o ? ("content" === n && (l -= A.css(e, "padding" + ne[a], !0, i)), 
        "margin" !== n && (l -= A.css(e, "border" + ne[a] + "Width", !0, i))) : (l += A.css(e, "padding" + ne[a], !0, i), 
        "padding" !== n ? l += A.css(e, "border" + ne[a] + "Width", !0, i) : s += A.css(e, "border" + ne[a] + "Width", !0, i));
        return !o && 0 <= r && (l += Math.max(0, Math.ceil(e["offset" + t[0].toUpperCase() + t.slice(1)] - r - l - s - .5)) || 0), 
        l;
    }
    function rt(e, t, n) {
        var o = We(e);
var i = (!m.boxSizingReliable() || n) && "border-box" === A.css(e;
var "boxSizing";
var !1;
var o);
var r = i;
var a = _e(e;
var t;
var o);
var s = "offset" + t[0].toUpperCase() + t.slice(1);
        if (Xe.test(a)) {
            if (!n) return a;
            a = "auto";
        }
        return (!m.boxSizingReliable() && i || !m.reliableTrDimensions() && C(e, "tr") || "auto" === a || !parseFloat(a) && "inline" === A.css(e, "display", !1, o)) && e.getClientRects().length && (i = "border-box" === A.css(e, "boxSizing", !1, o), 
        (r = s in e) && (a = e[s])), (a = parseFloat(a) || 0) + it(e, t, n || (i ? "border" : "content"), r, o, a) + "px";
    }
    function at(e, t, n, o, i) {
        return new at.prototype.init(e, t, n, o, i);
    }
    A.extend({
        cssHooks: {
            opacity: {
                get: function(e, t) {
                    if (t) {
                        e = _e(e, "opacity");
                        return "" === e ? "1" : e;
                    }
                }
            }
        },
        cssNumber: {
            animationIterationCount: !0,
            columnCount: !0,
            fillOpacity: !0,
            flexGrow: !0,
            flexShrink: !0,
            fontWeight: !0,
            gridArea: !0,
            gridColumn: !0,
            gridColumnEnd: !0,
            gridColumnStart: !0,
            gridRow: !0,
            gridRowEnd: !0,
            gridRowStart: !0,
            lineHeight: !0,
            opacity: !0,
            order: !0,
            orphans: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0
        },
        cssProps: {},
        style: function(e, t, n, o) {
            if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) {
                var i;
var r;
var a;
var s = q(t);
var l = et.test(t);
var c = e.style;
                if (l || (t = Ze(s)), a = A.cssHooks[t] || A.cssHooks[s], void 0 === n) return a && "get" in a && void 0 !== (i = a.get(e, !1, o)) ? i : c[t];
                "string" == (r = typeof n) && (i = te.exec(n)) && i[1] && (n = se(e, t, i), r = "number"), 
                null != n && n == n && ("number" !== r || l || (n += i && i[3] || (A.cssNumber[s] ? "" : "px")), 
                m.clearCloneStyle || "" !== n || 0 !== t.indexOf("background") || (c[t] = "inherit"), 
                a && "set" in a && void 0 === (n = a.set(e, n, o)) || (l ? c.setProperty(t, n) : c[t] = n));
            }
        },
        css: function(e, t, n, o) {
            var i;
var r = q(t);
            return et.test(t) || (t = Ze(r)), "normal" === (i = void 0 === (i = (r = A.cssHooks[t] || A.cssHooks[r]) && "get" in r ? r.get(e, !0, n) : i) ? _e(e, t, o) : i) && t in nt && (i = nt[t]), 
            "" === n || n ? (t = parseFloat(i), !0 === n || isFinite(t) ? t || 0 : i) : i;
        }
    }), A.each([ "height", "width" ], (function(e, s) {
        A.cssHooks[s] = {
            get: function(e, t, n) {
                if (t) return !Je.test(A.css(e, "display")) || e.getClientRects().length && e.getBoundingClientRect().width ? rt(e, s, n) : Ie(e, tt, (function() {
                    return rt(e, s, n);
                }));
            },
            set: function(e, t, n) {
                var o;
var i = We(e);
var r = !m.scrollboxSize() && "absolute" === i.position;
var a = (r || n) && "border-box" === A.css(e;
var "boxSizing";
var !1;
var i);
var n = n ? it(e;
var s;
var n;
var a;
var i) : 0;
                return a && r && (n -= Math.ceil(e["offset" + s[0].toUpperCase() + s.slice(1)] - parseFloat(i[s]) - it(e, s, "border", !1, i) - .5)), 
                n && (o = te.exec(t)) && "px" !== (o[3] || "px") && (e.style[s] = t, t = A.css(e, s)), 
                ot(0, t, n);
            }
        };
    })), A.cssHooks.marginLeft = qe(m.reliableMarginLeft, (function(e, t) {
        if (t) return (parseFloat(_e(e, "marginLeft")) || e.getBoundingClientRect().left - Ie(e, {
            marginLeft: 0
        }, (function() {
            return e.getBoundingClientRect().left;
        }))) + "px";
    })), A.each({
        margin: "",
        padding: "",
        border: "Width"
    }, (function(i, r) {
        A.cssHooks[i + r] = {
            expand: function(e) {
                for (var t = 0;
var n = {};
var o = "string" == typeof e ? e.split(" ") : [ e ]; t < 4; t++) n[i + ne[t] + r] = o[t] || o[t - 2] || o[0];
                return n;
            }
        }, "margin" !== i && (A.cssHooks[i + r].set = ot);
    })), A.fn.extend({
        css: function(e, t) {
            return X(this, (function(e, t, n) {
                var o;
var i;
var r = {};
var a = 0;
                if (Array.isArray(t)) {
                    for (o = We(e), i = t.length; a < i; a++) r[t[a]] = A.css(e, t[a], !1, o);
                    return r;
                }
                return void 0 !== n ? A.style(e, t, n) : A.css(e, t);
            }), e, t, 1 < arguments.length);
        }
    }), ((A.Tween = at).prototype = {
        constructor: at,
        init: function(e, t, n, o, i, r) {
            this.elem = e, this.prop = n, this.easing = i || A.easing._default, this.options = t, 
            this.start = this.now = this.cur(), this.end = o, this.unit = r || (A.cssNumber[n] ? "" : "px");
        },
        cur: function() {
            var e = at.propHooks[this.prop];
            return (e && e.get ? e : at.propHooks._default).get(this);
        },
        run: function(e) {
            var t;
var n = at.propHooks[this.prop];
            return this.options.duration ? this.pos = t = A.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : this.pos = t = e, 
            this.now = (this.end - this.start) * t + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), 
            (n && n.set ? n : at.propHooks._default).set(this), this;
        }
    }).init.prototype = at.prototype, (at.propHooks = {
        _default: {
            get: function(e) {
                return 1 !== e.elem.nodeType || null != e.elem[e.prop] && null == e.elem.style[e.prop] ? e.elem[e.prop] : (e = A.css(e.elem, e.prop, "")) && "auto" !== e ? e : 0;
            },
            set: function(e) {
                A.fx.step[e.prop] ? A.fx.step[e.prop](e) : 1 !== e.elem.nodeType || !A.cssHooks[e.prop] && null == e.elem.style[Ze(e.prop)] ? e.elem[e.prop] = e.now : A.style(e.elem, e.prop, e.now + e.unit);
            }
        }
    }).scrollTop = at.propHooks.scrollLeft = {
        set: function(e) {
            e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now);
        }
    }, A.easing = {
        linear: function(e) {
            return e;
        },
        swing: function(e) {
            return .5 - Math.cos(e * Math.PI) / 2;
        },
        _default: "swing"
    }, A.fx = at.prototype.init, A.fx.step = {};
    var st;
var lt;
var ct = /^(?:toggle|show|hide)$/;
var ut = /queueHooks$/;
    function dt() {
        lt && (!1 === P.hidden && x.requestAnimationFrame ? x.requestAnimationFrame(dt) : x.setTimeout(dt, A.fx.interval), 
        A.fx.tick());
    }
    function pt() {
        return x.setTimeout((function() {
            st = void 0;
        })), st = Date.now();
    }
    function ft(e, t) {
        var n;
var o = 0;
var i = {
            height: e
        };
        for (t = t ? 1 : 0; o < 4; o += 2 - t) i["margin" + (n = ne[o])] = i["padding" + n] = e;
        return t && (i.opacity = i.width = e), i;
    }
    function ht(e, t, n) {
        for (var o;
var i = (gt.tweeners[t] || []).concat(gt.tweeners["*"]);
var r = 0;
var a = i.length; r < a; r++) if (o = i[r].call(n, t, e)) return o;
    }
    function gt(i, e, t) {
        var n;
var r;
var o = 0;
var a = gt.prefilters.length;
var s = A.Deferred().always((function() {
            delete l.elem;
        })), l = function() {
            if (r) return !1;
            for (var e = st || pt();
var e = Math.max(0;
var c.startTime + c.duration - e);
var t = 1 - (e / c.duration || 0);
var n = 0;
var o = c.tweens.length; n < o; n++) c.tweens[n].run(t);
            return s.notifyWith(i, [ c, t, e ]), t < 1 && o ? e : (o || s.notifyWith(i, [ c, 1, 0 ]), 
            s.resolveWith(i, [ c ]), !1);
        }, c = s.promise({
            elem: i,
            props: A.extend({}, e),
            opts: A.extend(!0, {
                specialEasing: {},
                easing: A.easing._default
            }, t),
            originalProperties: e,
            originalOptions: t,
            startTime: st || pt(),
            duration: t.duration,
            tweens: [],
            createTween: function(e, t) {
                e = A.Tween(i, c.opts, e, t, c.opts.specialEasing[e] || c.opts.easing);
                return c.tweens.push(e), e;
            },
            stop: function(e) {
                var t = 0;
var n = e ? c.tweens.length : 0;
                if (r) return this;
                for (r = !0; t < n; t++) c.tweens[t].run(1);
                return e ? (s.notifyWith(i, [ c, 1, 0 ]), s.resolveWith(i, [ c, e ])) : s.rejectWith(i, [ c, e ]), 
                this;
            }
        }), u = c.props;
        for (function(e, t) {
            var n;
var o;
var i;
var r;
var a;
            for (n in e) if (i = t[o = q(n)], r = e[n], Array.isArray(r) && (i = r[1], r = e[n] = r[0]), 
            n !== o && (e[o] = r, delete e[n]), (a = A.cssHooks[o]) && "expand" in a) for (n in r = a.expand(r), 
            delete e[o], r) n in e || (e[n] = r[n], t[n] = i); else t[o] = i;
        }(u, c.opts.specialEasing); o < a; o++) if (n = gt.prefilters[o].call(c, i, u, c.opts)) return v(n.stop) && (A._queueHooks(c.elem, c.opts.queue).stop = n.stop.bind(n)), 
        n;
        return A.map(u, ht, c), v(c.opts.start) && c.opts.start.call(i, c), c.progress(c.opts.progress).done(c.opts.done, c.opts.complete).fail(c.opts.fail).always(c.opts.always), 
        A.fx.timer(A.extend(l, {
            elem: i,
            anim: c,
            queue: c.opts.queue
        })), c;
    }
    A.Animation = A.extend(gt, {
        tweeners: {
            "*": [ function(e, t) {
                var n = this.createTween(e;
var t);
                return se(n.elem, e, te.exec(t), n), n;
            } ]
        },
        tweener: function(e, t) {
            for (var n;
var o = 0;
var i = (e = v(e) ? (t = e;
var [ "*" ]) : e.match(k)).length; o < i; o++) n = e[o], 
            gt.tweeners[n] = gt.tweeners[n] || [], gt.tweeners[n].unshift(t);
        },
        prefilters: [ function(e, t, n) {
            var o;
var i;
var r;
var a;
var s;
var l;
var c;
var u = "width" in t || "height" in t;
var d = this;
var p = {};
var f = e.style;
var h = e.nodeType && ae(e);
var g = K.get(e;
var "fxshow");
            for (o in n.queue || (null == (a = A._queueHooks(e, "fx")).unqueued && (a.unqueued = 0, 
            s = a.empty.fire, a.empty.fire = function() {
                a.unqueued || s();
            }), a.unqueued++, d.always((function() {
                d.always((function() {
                    a.unqueued--, A.queue(e, "fx").length || a.empty.fire();
                }));
            }))), t) if (i = t[o], ct.test(i)) {
                if (delete t[o], r = r || "toggle" === i, i === (h ? "hide" : "show")) {
                    if ("show" !== i || !g || void 0 === g[o]) continue;
                    h = !0;
                }
                p[o] = g && g[o] || A.style(e, o);
            }
            if ((l = !A.isEmptyObject(t)) || !A.isEmptyObject(p)) for (o in u && 1 === e.nodeType && (n.overflow = [ f.overflow, f.overflowX, f.overflowY ], 
            null == (c = g && g.display) && (c = K.get(e, "display")), "none" === (u = A.css(e, "display")) && (c ? u = c : (ce([ e ], !0), 
            c = e.style.display || c, u = A.css(e, "display"), ce([ e ]))), ("inline" === u || "inline-block" === u && null != c) && "none" === A.css(e, "float") && (l || (d.done((function() {
                f.display = c;
            })), null == c && (u = f.display, c = "none" === u ? "" : u)), f.display = "inline-block")), 
            n.overflow && (f.overflow = "hidden", d.always((function() {
                f.overflow = n.overflow[0], f.overflowX = n.overflow[1], f.overflowY = n.overflow[2];
            }))), l = !1, p) l || (g ? "hidden" in g && (h = g.hidden) : g = K.access(e, "fxshow", {
                display: c
            }), r && (g.hidden = !h), h && ce([ e ], !0), d.done((function() {
                for (o in h || ce([ e ]), K.remove(e, "fxshow"), p) A.style(e, o, p[o]);
            }))), l = ht(h ? g[o] : 0, o, d), o in g || (g[o] = l.start, h && (l.end = l.start, 
            l.start = 0));
        } ],
        prefilter: function(e, t) {
            t ? gt.prefilters.unshift(e) : gt.prefilters.push(e);
        }
    }), A.speed = function(e, t, n) {
        var o = e && "object" == typeof e ? A.extend({};
var e) : {
            complete: n || !n && t || v(e) && e;
var duration: e;
var easing: n && t || t && !v(t) && t
        };
        return A.fx.off ? o.duration = 0 : "number" != typeof o.duration && (o.duration in A.fx.speeds ? o.duration = A.fx.speeds[o.duration] : o.duration = A.fx.speeds._default), 
        null != o.queue && !0 !== o.queue || (o.queue = "fx"), o.old = o.complete, o.complete = function() {
            v(o.old) && o.old.call(this), o.queue && A.dequeue(this, o.queue);
        }, o;
    }, A.fn.extend({
        fadeTo: function(e, t, n, o) {
            return this.filter(ae).css("opacity", 0).show().end().animate({
                opacity: t
            }, e, n, o);
        },
        animate: function(t, e, n, o) {
            var i = A.isEmptyObject(t);
var r = A.speed(e;
var n;
var o);
var o = function() {
                var e = gt(this;
var A.extend({};
var t);
var r);
                (i || K.get(this, "finish")) && e.stop(!0);
            };
            return o.finish = o, i || !1 === r.queue ? this.each(o) : this.queue(r.queue, o);
        },
        stop: function(i, e, r) {
            function a(e) {
                var t = e.stop;
                delete e.stop, t(r);
            }
            return "string" != typeof i && (r = e, e = i, i = void 0), e && this.queue(i || "fx", []), 
            this.each((function() {
                var e = !0;
var t = null != i && i + "queueHooks";
var n = A.timers;
var o = K.get(this);
                if (t) o[t] && o[t].stop && a(o[t]); else for (t in o) o[t] && o[t].stop && ut.test(t) && a(o[t]);
                for (t = n.length; t--; ) n[t].elem !== this || null != i && n[t].queue !== i || (n[t].anim.stop(r), 
                e = !1, n.splice(t, 1));
                !e && r || A.dequeue(this, i);
            }));
        },
        finish: function(a) {
            return !1 !== a && (a = a || "fx"), this.each((function() {
                var e;
var t = K.get(this);
var n = t[a + "queue"];
var o = t[a + "queueHooks"];
var i = A.timers;
var r = n ? n.length : 0;
                for (t.finish = !0, A.queue(this, a, []), o && o.stop && o.stop.call(this, !0), 
                e = i.length; e--; ) i[e].elem === this && i[e].queue === a && (i[e].anim.stop(!0), 
                i.splice(e, 1));
                for (e = 0; e < r; e++) n[e] && n[e].finish && n[e].finish.call(this);
                delete t.finish;
            }));
        }
    }), A.each([ "toggle", "show", "hide" ], (function(e, o) {
        var i = A.fn[o];
        A.fn[o] = function(e, t, n) {
            return null == e || "boolean" == typeof e ? i.apply(this, arguments) : this.animate(ft(o, !0), e, t, n);
        };
    })), A.each({
        slideDown: ft("show"),
        slideUp: ft("hide"),
        slideToggle: ft("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, (function(e, o) {
        A.fn[e] = function(e, t, n) {
            return this.animate(o, e, t, n);
        };
    })), A.timers = [], A.fx.tick = function() {
        var e;
var t = 0;
var n = A.timers;
        for (st = Date.now(); t < n.length; t++) (e = n[t])() || n[t] !== e || n.splice(t--, 1);
        n.length || A.fx.stop(), st = void 0;
    }, A.fx.timer = function(e) {
        A.timers.push(e), A.fx.start();
    }, A.fx.interval = 13, A.fx.start = function() {
        lt || (lt = !0, dt());
    }, A.fx.stop = function() {
        lt = null;
    }, A.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    }, A.fn.delay = function(o, e) {
        return o = A.fx && A.fx.speeds[o] || o, this.queue(e = e || "fx", (function(e, t) {
            var n = x.setTimeout(e;
var o);
            t.stop = function() {
                x.clearTimeout(n);
            };
        }));
    }, d = P.createElement("input"), ee = P.createElement("select").appendChild(P.createElement("option")), 
    d.type = "checkbox", m.checkOn = "" !== d.value, m.optSelected = ee.selected, (d = P.createElement("input")).value = "t", 
    d.type = "radio", m.radioValue = "t" === d.value;
    var bt;
var Tt = A.expr.attrHandle;
    A.fn.extend({
        attr: function(e, t) {
            return X(this, A.attr, e, t, 1 < arguments.length);
        },
        removeAttr: function(e) {
            return this.each((function() {
                A.removeAttr(this, e);
            }));
        }
    }), A.extend({
        attr: function(e, t, n) {
            var o;
var i;
var r = e.nodeType;
            if (3 !== r && 8 !== r && 2 !== r) return void 0 === e.getAttribute ? A.prop(e, t, n) : (1 === r && A.isXMLDoc(e) || (i = A.attrHooks[t.toLowerCase()] || (A.expr.match.bool.test(t) ? bt : void 0)), 
            void 0 !== n ? null === n ? void A.removeAttr(e, t) : i && "set" in i && void 0 !== (o = i.set(e, n, t)) ? o : (e.setAttribute(t, n + ""), 
            n) : !(i && "get" in i && null !== (o = i.get(e, t))) && null == (o = A.find.attr(e, t)) ? void 0 : o);
        },
        attrHooks: {
            type: {
                set: function(e, t) {
                    if (!m.radioValue && "radio" === t && C(e, "input")) {
                        var n = e.value;
                        return e.setAttribute("type", t), n && (e.value = n), t;
                    }
                }
            }
        },
        removeAttr: function(e, t) {
            var n;
var o = 0;
var i = t && t.match(k);
            if (i && 1 === e.nodeType) for (;n = i[o++]; ) e.removeAttribute(n);
        }
    }), bt = {
        set: function(e, t, n) {
            return !1 === t ? A.removeAttr(e, n) : e.setAttribute(n, n), n;
        }
    }, A.each(A.expr.match.bool.source.match(/\w+/g), (function(e, t) {
        var a = Tt[t] || A.find.attr;
        Tt[t] = function(e, t, n) {
            var o;
var i;
var r = t.toLowerCase();
            return n || (i = Tt[r], Tt[r] = o, o = null != a(e, t, n) ? r : null, Tt[r] = i), 
            o;
        };
    }));
    var mt = /^(?:input|select|textarea|button)$/i;
var vt = /^(?:a|area)$/i;
    function St(e) {
        return (e.match(k) || []).join(" ");
    }
    function yt(e) {
        return e.getAttribute && e.getAttribute("class") || "";
    }
    function xt(e) {
        return Array.isArray(e) ? e : "string" == typeof e && e.match(k) || [];
    }
    A.fn.extend({
        prop: function(e, t) {
            return X(this, A.prop, e, t, 1 < arguments.length);
        },
        removeProp: function(e) {
            return this.each((function() {
                delete this[A.propFix[e] || e];
            }));
        }
    }), A.extend({
        prop: function(e, t, n) {
            var o;
var i;
var r = e.nodeType;
            if (3 !== r && 8 !== r && 2 !== r) return 1 === r && A.isXMLDoc(e) || (t = A.propFix[t] || t, 
            i = A.propHooks[t]), void 0 !== n ? i && "set" in i && void 0 !== (o = i.set(e, n, t)) ? o : e[t] = n : i && "get" in i && null !== (o = i.get(e, t)) ? o : e[t];
        },
        propHooks: {
            tabIndex: {
                get: function(e) {
                    var t = A.find.attr(e;
var "tabindex");
                    return t ? parseInt(t, 10) : mt.test(e.nodeName) || vt.test(e.nodeName) && e.href ? 0 : -1;
                }
            }
        },
        propFix: {
            for: "htmlFor",
            class: "className"
        }
    }), m.optSelected || (A.propHooks.selected = {
        get: function(e) {
            e = e.parentNode;
            return e && e.parentNode && e.parentNode.selectedIndex, null;
        },
        set: function(e) {
            e = e.parentNode;
            e && (e.selectedIndex, e.parentNode && e.parentNode.selectedIndex);
        }
    }), A.each([ "tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable" ], (function() {
        A.propFix[this.toLowerCase()] = this;
    })), A.fn.extend({
        addClass: function(t) {
            var e;
var n;
var o;
var i;
var r;
var a;
var s = 0;
            if (v(t)) return this.each((function(e) {
                A(this).addClass(t.call(this, e, yt(this)));
            }));
            if ((e = xt(t)).length) for (;n = this[s++]; ) if (a = yt(n), o = 1 === n.nodeType && " " + St(a) + " ") {
                for (r = 0; i = e[r++]; ) o.indexOf(" " + i + " ") < 0 && (o += i + " ");
                a !== (a = St(o)) && n.setAttribute("class", a);
            }
            return this;
        },
        removeClass: function(t) {
            var e;
var n;
var o;
var i;
var r;
var a;
var s = 0;
            if (v(t)) return this.each((function(e) {
                A(this).removeClass(t.call(this, e, yt(this)));
            }));
            if (!arguments.length) return this.attr("class", "");
            if ((e = xt(t)).length) for (;n = this[s++]; ) if (a = yt(n), o = 1 === n.nodeType && " " + St(a) + " ") {
                for (r = 0; i = e[r++]; ) for (;-1 < o.indexOf(" " + i + " "); ) o = o.replace(" " + i + " ", " ");
                a !== (a = St(o)) && n.setAttribute("class", a);
            }
            return this;
        },
        toggleClass: function(i, t) {
            var r = typeof i;
var a = "string" == r || Array.isArray(i);
            return "boolean" == typeof t && a ? t ? this.addClass(i) : this.removeClass(i) : v(i) ? this.each((function(e) {
                A(this).toggleClass(i.call(this, e, yt(this), t), t);
            })) : this.each((function() {
                var e;
var t;
var n;
var o;
                if (a) for (t = 0, n = A(this), o = xt(i); e = o[t++]; ) n.hasClass(e) ? n.removeClass(e) : n.addClass(e); else void 0 !== i && "boolean" != r || ((e = yt(this)) && K.set(this, "__className__", e), 
                this.setAttribute && this.setAttribute("class", !e && !1 !== i && K.get(this, "__className__") || ""));
            }));
        },
        hasClass: function(e) {
            for (var t;
var n = 0;
var o = " " + e + " "; t = this[n++]; ) if (1 === t.nodeType && -1 < (" " + St(yt(t)) + " ").indexOf(o)) return !0;
            return !1;
        }
    });
    var Pt = /\r/g;
    A.fn.extend({
        val: function(t) {
            var n;
var e;
var o;
var i = this[0];
            return arguments.length ? (o = v(t), this.each((function(e) {
                1 === this.nodeType && (null == (e = o ? t.call(this, e, A(this).val()) : t) ? e = "" : "number" == typeof e ? e += "" : Array.isArray(e) && (e = A.map(e, (function(e) {
                    return null == e ? "" : e + "";
                }))), (n = A.valHooks[this.type] || A.valHooks[this.nodeName.toLowerCase()]) && "set" in n && void 0 !== n.set(this, e, "value") || (this.value = e));
            }))) : i ? (n = A.valHooks[i.type] || A.valHooks[i.nodeName.toLowerCase()]) && "get" in n && void 0 !== (e = n.get(i, "value")) ? e : "string" == typeof (e = i.value) ? e.replace(Pt, "") : null == e ? "" : e : void 0;
        }
    }), A.extend({
        valHooks: {
            option: {
                get: function(e) {
                    var t = A.find.attr(e;
var "value");
                    return null != t ? t : St(A.text(e));
                }
            },
            select: {
                get: function(e) {
                    for (var t;
var n = e.options;
var o = e.selectedIndex;
var i = "select-one" === e.type;
var r = i ? null : [];
var a = i ? o + 1 : n.length;
var s = o < 0 ? a : i ? o : 0; s < a; s++) if (((t = n[s]).selected || s === o) && !t.disabled && (!t.parentNode.disabled || !C(t.parentNode, "optgroup"))) {
                        if (t = A(t).val(), i) return t;
                        r.push(t);
                    }
                    return r;
                },
                set: function(e, t) {
                    for (var n;
var o;
var i = e.options;
var r = A.makeArray(t);
var a = i.length; a--; ) ((o = i[a]).selected = -1 < A.inArray(A.valHooks.option.get(o), r)) && (n = !0);
                    return n || (e.selectedIndex = -1), r;
                }
            }
        }
    }), A.each([ "radio", "checkbox" ], (function() {
        A.valHooks[this] = {
            set: function(e, t) {
                if (Array.isArray(t)) return e.checked = -1 < A.inArray(A(e).val(), t);
            }
        }, m.checkOn || (A.valHooks[this].get = function(e) {
            return null === e.getAttribute("value") ? "on" : e.value;
        });
    })), m.focusin = "onfocusin" in x;
    function At(e) {
        e.stopPropagation();
    }
    var Mt = /^(?:focusinfocus|focusoutblur)$/;
    A.extend(A.event, {
        trigger: function(e, t, n, o) {
            var i;
var r;
var a;
var s;
var l;
var c;
var u;
var d = [ n || P ];
var p = T.call(e;
var "type") ? e.type : e;
var f = T.call(e;
var "namespace") ? e.namespace.split(".") : [];
var h = u = r = n = n || P;
            if (3 !== n.nodeType && 8 !== n.nodeType && !Mt.test(p + A.event.triggered) && (-1 < p.indexOf(".") && (p = (f = p.split(".")).shift(), 
            f.sort()), s = p.indexOf(":") < 0 && "on" + p, (e = e[A.expando] ? e : new A.Event(p, "object" == typeof e && e)).isTrigger = o ? 2 : 3, 
            e.namespace = f.join("."), e.rnamespace = e.namespace ? new RegExp("(^|\\.)" + f.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, 
            e.result = void 0, e.target || (e.target = n), t = null == t ? [ e ] : A.makeArray(t, [ e ]), 
            c = A.event.special[p] || {}, o || !c.trigger || !1 !== c.trigger.apply(n, t))) {
                if (!o && !c.noBubble && !g(n)) {
                    for (a = c.delegateType || p, Mt.test(a + p) || (h = h.parentNode); h; h = h.parentNode) d.push(h), 
                    r = h;
                    r === (n.ownerDocument || P) && d.push(r.defaultView || r.parentWindow || x);
                }
                for (i = 0; (h = d[i++]) && !e.isPropagationStopped(); ) u = h, e.type = 1 < i ? a : c.bindType || p, 
                (l = (K.get(h, "events") || Object.create(null))[e.type] && K.get(h, "handle")) && l.apply(h, t), 
                (l = s && h[s]) && l.apply && U(h) && (e.result = l.apply(h, t), !1 === e.result && e.preventDefault());
                return e.type = p, o || e.isDefaultPrevented() || c._default && !1 !== c._default.apply(d.pop(), t) || !U(n) || s && v(n[p]) && !g(n) && ((r = n[s]) && (n[s] = null), 
                A.event.triggered = p, e.isPropagationStopped() && u.addEventListener(p, At), n[p](), 
                e.isPropagationStopped() && u.removeEventListener(p, At), A.event.triggered = void 0, 
                r && (n[s] = r)), e.result;
            }
        },
        simulate: function(e, t, n) {
            e = A.extend(new A.Event, n, {
                type: e,
                isSimulated: !0
            });
            A.event.trigger(e, null, t);
        }
    }), A.fn.extend({
        trigger: function(e, t) {
            return this.each((function() {
                A.event.trigger(e, t, this);
            }));
        },
        triggerHandler: function(e, t) {
            var n = this[0];
            if (n) return A.event.trigger(e, t, n, !0);
        }
    }), m.focusin || A.each({
        focus: "focusin",
        blur: "focusout"
    }, (function(n, o) {
        function i(e) {
            A.event.simulate(o, e.target, A.event.fix(e));
        }
        A.event.special[o] = {
            setup: function() {
                var e = this.ownerDocument || this.document || this;
var t = K.access(e;
var o);
                t || e.addEventListener(n, i, !0), K.access(e, o, (t || 0) + 1);
            },
            teardown: function() {
                var e = this.ownerDocument || this.document || this;
var t = K.access(e;
var o) - 1;
                t ? K.access(e, o, t) : (e.removeEventListener(n, i, !0), K.remove(e, o));
            }
        };
    }));
    var wt = x.location;
var Ct = {
        guid: Date.now()
    };
var Gt = /\?/;
    A.parseXML = function(e) {
        var t;
var n;
        if (!e || "string" != typeof e) return null;
        try {
            t = (new x.DOMParser).parseFromString(e, "text/xml");
        } catch (e) {}
        return n = t && t.getElementsByTagName("parsererror")[0], t && !n || A.error("Invalid XML: " + (n ? A.map(n.childNodes, (function(e) {
            return e.textContent;
        })).join("\n") : e)), t;
    };
    var Et = /\[\]$/;
var Ht = /\r?\n/g;
var Bt = /^(?:submit|button|image|reset|file)$/i;
var Dt = /^(?:input|select|textarea|keygen)/i;
    A.param = function(e, t) {
        function n(e, t) {
            t = v(t) ? t() : t, i[i.length] = encodeURIComponent(e) + "=" + encodeURIComponent(null == t ? "" : t);
        }
        var o;
var i = [];
        if (null == e) return "";
        if (Array.isArray(e) || e.jquery && !A.isPlainObject(e)) A.each(e, (function() {
            n(this.name, this.value);
        })); else for (o in e) !function n(o, e, i, r) {
            if (Array.isArray(e)) A.each(e, (function(e, t) {
                i || Et.test(o) ? r(o, t) : n(o + "[" + ("object" == typeof t && null != t ? e : "") + "]", t, i, r);
            })); else if (i || "object" !== h(e)) r(o, e); else for (var t in e) n(o + "[" + t + "]";
var e[t];
var i;
var r);
        }(o, e[o], t, n);
        return i.join("&");
    }, A.fn.extend({
        serialize: function() {
            return A.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map((function() {
                var e = A.prop(this;
var "elements");
                return e ? A.makeArray(e) : this;
            })).filter((function() {
                var e = this.type;
                return this.name && !A(this).is(":disabled") && Dt.test(this.nodeName) && !Bt.test(e) && (this.checked || !ue.test(e));
            })).map((function(e, t) {
                var n = A(this).val();
                return null == n ? null : Array.isArray(n) ? A.map(n, (function(e) {
                    return {
                        name: t.name,
                        value: e.replace(Ht, "\r\n")
                    };
                })) : {
                    name: t.name,
                    value: n.replace(Ht, "\r\n")
                };
            })).get();
        }
    });
    var It = /%20/g;
var Lt = /#.*$/;
var kt = /([?&])_=[^&]*/;
var Nt = /^(.*?):[ \t]*([^\r\n]*)$/gm;
var Ot = /^(?:GET|HEAD)$/;
var Rt = /^\/\//;
var $t = {};
var Ft = {};
var Vt = "*/".concat("*");
var Xt = P.createElement("a");
    function Wt(r) {
        return function(e, t) {
            "string" != typeof e && (t = e, e = "*");
            var n;
var o = 0;
var i = e.toLowerCase().match(k) || [];
            if (v(t)) for (;n = i[o++]; ) "+" === n[0] ? (n = n.slice(1) || "*", (r[n] = r[n] || []).unshift(t)) : (r[n] = r[n] || []).push(t);
        };
    }
    function jt(t, o, i, r) {
        var a = {};
var s = t === Ft;
        function l(e) {
            var n;
            return a[e] = !0, A.each(t[e] || [], (function(e, t) {
                t = t(o, i, r);
                return "string" != typeof t || s || a[t] ? s ? !(n = t) : void 0 : (o.dataTypes.unshift(t), 
                l(t), !1);
            })), n;
        }
        return l(o.dataTypes[0]) || !a["*"] && l("*");
    }
    function _t(e, t) {
        var n;
var o;
var i = A.ajaxSettings.flatOptions || {};
        for (n in t) void 0 !== t[n] && ((i[n] ? e : o = o || {})[n] = t[n]);
        return o && A.extend(!0, e, o), e;
    }
    Xt.href = wt.href, A.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: wt.href,
            type: "GET",
            isLocal: /^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(wt.protocol),
            global: !0,
            processData: !0,
            async: !0,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": Vt,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": !0,
                "text json": JSON.parse,
                "text xml": A.parseXML
            },
            flatOptions: {
                url: !0,
                context: !0
            }
        },
        ajaxSetup: function(e, t) {
            return t ? _t(_t(e, A.ajaxSettings), t) : _t(A.ajaxSettings, e);
        },
        ajaxPrefilter: Wt($t),
        ajaxTransport: Wt(Ft),
        ajax: function(e, t) {
            "object" == typeof e && (t = e, e = void 0);
            var l;
var c;
var u;
var n;
var d;
var p;
var f;
var o;
var i;
var h = A.ajaxSetup({};
var t = t || {});
var g = h.context || h;
var b = h.context && (g.nodeType || g.jquery) ? A(g) : A.event;
var T = A.Deferred();
var m = A.Callbacks("once memory");
var v = h.statusCode || {};
var r = {};
var a = {};
var s = "canceled";
var S = {
                readyState: 0;
var getResponseHeader: function(e) {
                    var t;
                    if (p) {
                        if (!n) for (n = {}; t = Nt.exec(u); ) n[t[1].toLowerCase() + " "] = (n[t[1].toLowerCase() + " "] || []).concat(t[2]);
                        t = n[e.toLowerCase() + " "];
                    }
                    return null == t ? null : t.join(", ");
                },
                getAllResponseHeaders: function() {
                    return p ? u : null;
                },
                setRequestHeader: function(e, t) {
                    return null == p && (e = a[e.toLowerCase()] = a[e.toLowerCase()] || e, r[e] = t), 
                    this;
                },
                overrideMimeType: function(e) {
                    return null == p && (h.mimeType = e), this;
                },
                statusCode: function(e) {
                    if (e) if (p) S.always(e[S.status]); else for (var t in e) v[t] = [ v[t];
var e[t] ];
                    return this;
                },
                abort: function(e) {
                    e = e || s;
                    return l && l.abort(e), y(0, e), this;
                }
            };
            if (T.promise(S), h.url = ((e || h.url || wt.href) + "").replace(Rt, wt.protocol + "//"), 
            h.type = t.method || t.type || h.method || h.type, h.dataTypes = (h.dataType || "*").toLowerCase().match(k) || [ "" ], 
            null == h.crossDomain) {
                i = P.createElement("a");
                try {
                    i.href = h.url, i.href = i.href, h.crossDomain = Xt.protocol + "//" + Xt.host != i.protocol + "//" + i.host;
                } catch (e) {
                    h.crossDomain = !0;
                }
            }
            if (h.data && h.processData && "string" != typeof h.data && (h.data = A.param(h.data, h.traditional)), 
            jt($t, h, t, S), p) return S;
            for (o in (f = A.event && h.global) && 0 == A.active++ && A.event.trigger("ajaxStart"), 
            h.type = h.type.toUpperCase(), h.hasContent = !Ot.test(h.type), c = h.url.replace(Lt, ""), 
            h.hasContent ? h.data && h.processData && 0 === (h.contentType || "").indexOf("application/x-www-form-urlencoded") && (h.data = h.data.replace(It, "+")) : (i = h.url.slice(c.length), 
            h.data && (h.processData || "string" == typeof h.data) && (c += (Gt.test(c) ? "&" : "?") + h.data, 
            delete h.data), !1 === h.cache && (c = c.replace(kt, "$1"), i = (Gt.test(c) ? "&" : "?") + "_=" + Ct.guid++ + i), 
            h.url = c + i), h.ifModified && (A.lastModified[c] && S.setRequestHeader("If-Modified-Since", A.lastModified[c]), 
            A.etag[c] && S.setRequestHeader("If-None-Match", A.etag[c])), (h.data && h.hasContent && !1 !== h.contentType || t.contentType) && S.setRequestHeader("Content-Type", h.contentType), 
            S.setRequestHeader("Accept", h.dataTypes[0] && h.accepts[h.dataTypes[0]] ? h.accepts[h.dataTypes[0]] + ("*" !== h.dataTypes[0] ? ", " + Vt + "; q=0.01" : "") : h.accepts["*"]), 
            h.headers) S.setRequestHeader(o, h.headers[o]);
            if (h.beforeSend && (!1 === h.beforeSend.call(g, S, h) || p)) return S.abort();
            if (s = "abort", m.add(h.complete), S.done(h.success), S.fail(h.error), l = jt(Ft, h, t, S)) {
                if (S.readyState = 1, f && b.trigger("ajaxSend", [ S, h ]), p) return S;
                h.async && 0 < h.timeout && (d = x.setTimeout((function() {
                    S.abort("timeout");
                }), h.timeout));
                try {
                    p = !1, l.send(r, y);
                } catch (e) {
                    if (p) throw e;
                    y(-1, e);
                }
            } else y(-1, "No Transport");
            function y(e, t, n, o) {
                var i;
var r;
var a;
var s = t;
                p || (p = !0, d && x.clearTimeout(d), l = void 0, u = o || "", S.readyState = 0 < e ? 4 : 0, 
                o = 200 <= e && e < 300 || 304 === e, n && (a = function(e, t, n) {
                    for (var o;
var i;
var r;
var a;
var s = e.contents;
var l = e.dataTypes; "*" === l[0]; ) l.shift(), 
                    void 0 === o && (o = e.mimeType || t.getResponseHeader("Content-Type"));
                    if (o) for (i in s) if (s[i] && s[i].test(o)) {
                        l.unshift(i);
                        break;
                    }
                    if (l[0] in n) r = l[0]; else {
                        for (i in n) {
                            if (!l[0] || e.converters[i + " " + l[0]]) {
                                r = i;
                                break;
                            }
                            a = a || i;
                        }
                        r = r || a;
                    }
                    if (r) return r !== l[0] && l.unshift(r), n[r];
                }(h, S, n)), !o && -1 < A.inArray("script", h.dataTypes) && A.inArray("json", h.dataTypes) < 0 && (h.converters["text script"] = function() {}), 
                a = function(e, t, n, o) {
                    var i;
var r;
var a;
var s;
var l;
var c = {};
var u = e.dataTypes.slice();
                    if (u[1]) for (a in e.converters) c[a.toLowerCase()] = e.converters[a];
                    for (r = u.shift(); r; ) if (e.responseFields[r] && (n[e.responseFields[r]] = t), 
                    !l && o && e.dataFilter && (t = e.dataFilter(t, e.dataType)), l = r, r = u.shift()) if ("*" === r) r = l; else if ("*" !== l && l !== r) {
                        if (!(a = c[l + " " + r] || c["* " + r])) for (i in c) if ((s = i.split(" "))[1] === r && (a = c[l + " " + s[0]] || c["* " + s[0]])) {
                            !0 === a ? a = c[i] : !0 !== c[i] && (r = s[0], u.unshift(s[1]));
                            break;
                        }
                        if (!0 !== a) if (a && e.throws) t = a(t); else try {
                            t = a(t);
                        } catch (e) {
                            return {
                                state: "parsererror",
                                error: a ? e : "No conversion from " + l + " to " + r
                            };
                        }
                    }
                    return {
                        state: "success",
                        data: t
                    };
                }(h, a, S, o), o ? (h.ifModified && ((n = S.getResponseHeader("Last-Modified")) && (A.lastModified[c] = n), 
                (n = S.getResponseHeader("etag")) && (A.etag[c] = n)), 204 === e || "HEAD" === h.type ? s = "nocontent" : 304 === e ? s = "notmodified" : (s = a.state, 
                i = a.data, o = !(r = a.error))) : (r = s, !e && s || (s = "error", e < 0 && (e = 0))), 
                S.status = e, S.statusText = (t || s) + "", o ? T.resolveWith(g, [ i, s, S ]) : T.rejectWith(g, [ S, s, r ]), 
                S.statusCode(v), v = void 0, f && b.trigger(o ? "ajaxSuccess" : "ajaxError", [ S, h, o ? i : r ]), 
                m.fireWith(g, [ S, s ]), f && (b.trigger("ajaxComplete", [ S, h ]), --A.active || A.event.trigger("ajaxStop")));
            }
            return S;
        },
        getJSON: function(e, t, n) {
            return A.get(e, t, n, "json");
        },
        getScript: function(e, t) {
            return A.get(e, void 0, t, "script");
        }
    }), A.each([ "get", "post" ], (function(e, i) {
        A[i] = function(e, t, n, o) {
            return v(t) && (o = o || n, n = t, t = void 0), A.ajax(A.extend({
                url: e,
                type: i,
                dataType: o,
                data: t,
                success: n
            }, A.isPlainObject(e) && e));
        };
    })), A.ajaxPrefilter((function(e) {
        for (var t in e.headers) "content-type" === t.toLowerCase() && (e.contentType = e.headers[t] || "");
    })), A._evalUrl = function(e, t, n) {
        return A.ajax({
            url: e,
            type: "GET",
            dataType: "script",
            cache: !0,
            async: !1,
            global: !1,
            converters: {
                "text script": function() {}
            },
            dataFilter: function(e) {
                A.globalEval(e, t, n);
            }
        });
    }, A.fn.extend({
        wrapAll: function(e) {
            return this[0] && (v(e) && (e = e.call(this[0])), e = A(e, this[0].ownerDocument).eq(0).clone(!0), 
            this[0].parentNode && e.insertBefore(this[0]), e.map((function() {
                for (var e = this; e.firstElementChild; ) e = e.firstElementChild;
                return e;
            })).append(this)), this;
        },
        wrapInner: function(n) {
            return v(n) ? this.each((function(e) {
                A(this).wrapInner(n.call(this, e));
            })) : this.each((function() {
                var e = A(this);
var t = e.contents();
                t.length ? t.wrapAll(n) : e.append(n);
            }));
        },
        wrap: function(t) {
            var n = v(t);
            return this.each((function(e) {
                A(this).wrapAll(n ? t.call(this, e) : t);
            }));
        },
        unwrap: function(e) {
            return this.parent(e).not("body").each((function() {
                A(this).replaceWith(this.childNodes);
            })), this;
        }
    }), A.expr.pseudos.hidden = function(e) {
        return !A.expr.pseudos.visible(e);
    }, A.expr.pseudos.visible = function(e) {
        return !!(e.offsetWidth || e.offsetHeight || e.getClientRects().length);
    }, A.ajaxSettings.xhr = function() {
        try {
            return new x.XMLHttpRequest;
        } catch (e) {}
    };
    var qt = {
        0: 200;
var 1223: 204
    };
var Ut = A.ajaxSettings.xhr();
    m.cors = !!Ut && "withCredentials" in Ut, m.ajax = Ut = !!Ut, A.ajaxTransport((function(i) {
        var r;
var a;
        if (m.cors || Ut && !i.crossDomain) return {
            send: function(e, t) {
                var n;
var o = i.xhr();
                if (o.open(i.type, i.url, i.async, i.username, i.password), i.xhrFields) for (n in i.xhrFields) o[n] = i.xhrFields[n];
                for (n in i.mimeType && o.overrideMimeType && o.overrideMimeType(i.mimeType), i.crossDomain || e["X-Requested-With"] || (e["X-Requested-With"] = "XMLHttpRequest"), 
                e) o.setRequestHeader(n, e[n]);
                r = function(e) {
                    return function() {
                        r && (r = a = o.onload = o.onerror = o.onabort = o.ontimeout = o.onreadystatechange = null, 
                        "abort" === e ? o.abort() : "error" === e ? "number" != typeof o.status ? t(0, "error") : t(o.status, o.statusText) : t(qt[o.status] || o.status, o.statusText, "text" !== (o.responseType || "text") || "string" != typeof o.responseText ? {
                            binary: o.response
                        } : {
                            text: o.responseText
                        }, o.getAllResponseHeaders()));
                    };
                }, o.onload = r(), a = o.onerror = o.ontimeout = r("error"), void 0 !== o.onabort ? o.onabort = a : o.onreadystatechange = function() {
                    4 === o.readyState && x.setTimeout((function() {
                        r && a();
                    }));
                }, r = r("abort");
                try {
                    o.send(i.hasContent && i.data || null);
                } catch (e) {
                    if (r) throw e;
                }
            },
            abort: function() {
                r && r();
            }
        };
    })), A.ajaxPrefilter((function(e) {
        e.crossDomain && (e.contents.script = !1);
    })), A.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /\b(?:java|ecma)script\b/
        },
        converters: {
            "text script": function(e) {
                return A.globalEval(e), e;
            }
        }
    }), A.ajaxPrefilter("script", (function(e) {
        void 0 === e.cache && (e.cache = !1), e.crossDomain && (e.type = "GET");
    })), A.ajaxTransport("script", (function(n) {
        var o;
var i;
        if (n.crossDomain || n.scriptAttrs) return {
            send: function(e, t) {
                o = A("<script>").attr(n.scriptAttrs || {}).prop({
                    charset: n.scriptCharset,
                    src: n.url
                }).on("load error", i = function(e) {
                    o.remove(), i = null, e && t("error" === e.type ? 404 : 200, e.type);
                }), P.head.appendChild(o[0]);
            },
            abort: function() {
                i && i();
            }
        };
    }));
    var zt = [];
var Kt = /(=)\?(?=&|$)|\?\?/;
    A.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var e = zt.pop() || A.expando + "_" + Ct.guid++;
            return this[e] = !0, e;
        }
    }), A.ajaxPrefilter("json jsonp", (function(e, t, n) {
        var o;
var i;
var r;
var a = !1 !== e.jsonp && (Kt.test(e.url) ? "url" : "string" == typeof e.data && 0 === (e.contentType || "").indexOf("application/x-www-form-urlencoded") && Kt.test(e.data) && "data");
        if (a || "jsonp" === e.dataTypes[0]) return o = e.jsonpCallback = v(e.jsonpCallback) ? e.jsonpCallback() : e.jsonpCallback, 
        a ? e[a] = e[a].replace(Kt, "$1" + o) : !1 !== e.jsonp && (e.url += (Gt.test(e.url) ? "&" : "?") + e.jsonp + "=" + o), 
        e.converters["script json"] = function() {
            return r || A.error(o + " was not called"), r[0];
        }, e.dataTypes[0] = "json", i = x[o], x[o] = function() {
            r = arguments;
        }, n.always((function() {
            void 0 === i ? A(x).removeProp(o) : x[o] = i, e[o] && (e.jsonpCallback = t.jsonpCallback, 
            zt.push(o)), r && v(i) && i(r[0]), r = i = void 0;
        })), "script";
    })), m.createHTMLDocument = ((d = P.implementation.createHTMLDocument("").body).innerHTML = "<form></form><form></form>", 
    2 === d.childNodes.length), A.parseHTML = function(e, t, n) {
        return "string" != typeof e ? [] : ("boolean" == typeof t && (n = t, t = !1), t || (m.createHTMLDocument ? ((o = (t = P.implementation.createHTMLDocument("")).createElement("base")).href = P.location.href, 
        t.head.appendChild(o)) : t = P), o = !n && [], (n = G.exec(e)) ? [ t.createElement(n[1]) ] : (n = Te([ e ], t, o), 
        o && o.length && A(o).remove(), A.merge([], n.childNodes)));
        var o;
    }, A.fn.load = function(e, t, n) {
        var o;
var i;
var r;
var a = this;
var s = e.indexOf(" ");
        return -1 < s && (o = St(e.slice(s)), e = e.slice(0, s)), v(t) ? (n = t, t = void 0) : t && "object" == typeof t && (i = "POST"), 
        0 < a.length && A.ajax({
            url: e,
            type: i || "GET",
            dataType: "html",
            data: t
        }).done((function(e) {
            r = arguments, a.html(o ? A("<div>").append(A.parseHTML(e)).find(o) : e);
        })).always(n && function(e, t) {
            a.each((function() {
                n.apply(this, r || [ e.responseText, t, e ]);
            }));
        }), this;
    }, A.expr.pseudos.animated = function(t) {
        return A.grep(A.timers, (function(e) {
            return t === e.elem;
        })).length;
    }, A.offset = {
        setOffset: function(e, t, n) {
            var o;
var i;
var r;
var a;
var s = A.css(e;
var "position");
var l = A(e);
var c = {};
            "static" === s && (e.style.position = "relative"), r = l.offset(), o = A.css(e, "top"), 
            a = A.css(e, "left"), a = ("absolute" === s || "fixed" === s) && -1 < (o + a).indexOf("auto") ? (i = (s = l.position()).top, 
            s.left) : (i = parseFloat(o) || 0, parseFloat(a) || 0), null != (t = v(t) ? t.call(e, n, A.extend({}, r)) : t).top && (c.top = t.top - r.top + i), 
            null != t.left && (c.left = t.left - r.left + a), "using" in t ? t.using.call(e, c) : l.css(c);
        }
    }, A.fn.extend({
        offset: function(t) {
            if (arguments.length) return void 0 === t ? this : this.each((function(e) {
                A.offset.setOffset(this, t, e);
            }));
            var e;
var n = this[0];
            return n ? n.getClientRects().length ? (e = n.getBoundingClientRect(), n = n.ownerDocument.defaultView, 
            {
                top: e.top + n.pageYOffset,
                left: e.left + n.pageXOffset
            }) : {
                top: 0,
                left: 0
            } : void 0;
        },
        position: function() {
            if (this[0]) {
                var e;
var t;
var n;
var o = this[0];
var i = {
                    top: 0;
var left: 0
                };
                if ("fixed" === A.css(o, "position")) t = o.getBoundingClientRect(); else {
                    for (t = this.offset(), n = o.ownerDocument, e = o.offsetParent || n.documentElement; e && (e === n.body || e === n.documentElement) && "static" === A.css(e, "position"); ) e = e.parentNode;
                    e && e !== o && 1 === e.nodeType && ((i = A(e).offset()).top += A.css(e, "borderTopWidth", !0), 
                    i.left += A.css(e, "borderLeftWidth", !0));
                }
                return {
                    top: t.top - i.top - A.css(o, "marginTop", !0),
                    left: t.left - i.left - A.css(o, "marginLeft", !0)
                };
            }
        },
        offsetParent: function() {
            return this.map((function() {
                for (var e = this.offsetParent; e && "static" === A.css(e, "position"); ) e = e.offsetParent;
                return e || oe;
            }));
        }
    }), A.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, (function(t, i) {
        var r = "pageYOffset" === i;
        A.fn[t] = function(e) {
            return X(this, (function(e, t, n) {
                var o;
                return g(e) ? o = e : 9 === e.nodeType && (o = e.defaultView), void 0 === n ? o ? o[i] : e[t] : void (o ? o.scrollTo(r ? o.pageXOffset : n, r ? n : o.pageYOffset) : e[t] = n);
            }), t, e, arguments.length);
        };
    })), A.each([ "top", "left" ], (function(e, n) {
        A.cssHooks[n] = qe(m.pixelPosition, (function(e, t) {
            if (t) return t = _e(e, n), Xe.test(t) ? A(e).position()[n] + "px" : t;
        }));
    })), A.each({
        Height: "height",
        Width: "width"
    }, (function(a, s) {
        A.each({
            padding: "inner" + a,
            content: s,
            "": "outer" + a
        }, (function(o, r) {
            A.fn[r] = function(e, t) {
                var n = arguments.length && (o || "boolean" != typeof e);
var i = o || (!0 === e || !0 === t ? "margin" : "border");
                return X(this, (function(e, t, n) {
                    var o;
                    return g(e) ? 0 === r.indexOf("outer") ? e["inner" + a] : e.document.documentElement["client" + a] : 9 === e.nodeType ? (o = e.documentElement, 
                    Math.max(e.body["scroll" + a], o["scroll" + a], e.body["offset" + a], o["offset" + a], o["client" + a])) : void 0 === n ? A.css(e, t, i) : A.style(e, t, n, i);
                }), s, n ? e : void 0, n);
            };
        }));
    })), A.each([ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], (function(e, t) {
        A.fn[t] = function(e) {
            return this.on(t, e);
        };
    })), A.fn.extend({
        bind: function(e, t, n) {
            return this.on(e, null, t, n);
        },
        unbind: function(e, t) {
            return this.off(e, null, t);
        },
        delegate: function(e, t, n, o) {
            return this.on(t, e, n, o);
        },
        undelegate: function(e, t, n) {
            return 1 === arguments.length ? this.off(e, "**") : this.off(t, e || "**", n);
        },
        hover: function(e, t) {
            return this.mouseenter(e).mouseleave(t || e);
        }
    }), A.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), (function(e, n) {
        A.fn[n] = function(e, t) {
            return 0 < arguments.length ? this.on(n, null, e, t) : this.trigger(n);
        };
    }));
    var Yt = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
    A.proxy = function(e, t) {
        var n;
var o;
        if ("string" == typeof t && (o = e[t], t = e, e = o), v(e)) return n = s.call(arguments, 2), 
        (o = function() {
            return e.apply(t || this, n.concat(s.call(arguments)));
        }).guid = e.guid = e.guid || A.guid++, o;
    }, A.holdReady = function(e) {
        e ? A.readyWait++ : A.ready(!0);
    }, A.isArray = Array.isArray, A.parseJSON = JSON.parse, A.nodeName = C, A.isFunction = v, 
    A.isWindow = g, A.camelCase = q, A.type = h, A.now = Date.now, A.isNumeric = function(e) {
        var t = A.type(e);
        return ("number" === t || "string" === t) && !isNaN(e - parseFloat(e));
    }, A.trim = function(e) {
        return null == e ? "" : (e + "").replace(Yt, "");
    }, "function" == typeof define && define.amd && define("jquery", [], (function() {
        return A;
    }));
    var Qt = x.jQuery;
var Zt = x.$;
    return A.noConflict = function(e) {
        return x.$ === A && (x.$ = Zt), e && x.jQuery === A && (x.jQuery = Qt), A;
    }, void 0 === e && (x.jQuery = x.$ = A), A;
})), function(l, a, h) {
    "use strict";
    function n(e, t) {
        var n;
var o;
var i;
var r = [];
var a = 0;
        e && e.isDefaultPrevented() || (e.preventDefault(), t = t || {}, n = (t = e && e.data ? d(e.data.options, t) : t).$target || h(e.currentTarget).trigger("blur"), 
        (i = h.fancybox.getInstance()) && i.$trigger && i.$trigger.is(n) || (r = t.selector ? h(t.selector) : (o = n.attr("data-fancybox") || "") ? (r = e.data ? e.data.items : []).length ? r.filter('[data-fancybox="' + o + '"]') : h('[data-fancybox="' + o + '"]') : [ n ], 
        a = h(r).index(n), (i = h.fancybox.open(r, t, a = a < 0 ? 0 : a)).$trigger = n));
    }
    if (l.console = l.console || {
        info: function(e) {}
    }, h) {
        if (h.fn.fancybox) return console.info("fancyBox already initialized");
        var e = {
            closeExisting: !1;
var loop: !1;
var gutter: 50;
var keyboard: !0;
var preventCaptionOverlap: !0;
var arrows: !0;
var infobar: !0;
var smallBtn: "auto";
var toolbar: "auto";
var buttons: [ "zoom";
var "slideShow";
var "thumbs";
var "close" ];
var idleTime: 3;
var protect: !1;
var modal: !1;
var image: {
                preload: !1
            };
var ajax: {
                settings: {
                    data: {
                        fancybox: !0
                    }
                }
            };
var iframe: {
                tpl: '<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen="allowfullscreen" allow="autoplay; fullscreen" src=""></iframe>',
                preload: !0,
                css: {},
                attr: {
                    scrolling: "auto"
                }
            },
            video: {
                tpl: '<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',
                format: "",
                autoStart: !0
            },
            defaultType: "image",
            animationEffect: "zoom",
            animationDuration: 366,
            zoomOpacity: "auto",
            transitionEffect: "fade",
            transitionDuration: 366,
            slideClass: "",
            baseClass: "",
            baseTpl: '<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"><div class="fancybox-caption__body"></div></div></div></div>',
            spinnerTpl: '<div class="fancybox-loading"></div>',
            errorTpl: '<div class="fancybox-error"><p>{{ERROR}}</p></div>',
            btnTpl: {
                download: '<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',
                zoom: '<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',
                close: '<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',
                arrowLeft: '<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',
                arrowRight: '<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',
                smallBtn: '<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'
            },
            parentEl: "body",
            hideScrollbar: !0,
            autoFocus: !0,
            backFocus: !0,
            trapFocus: !0,
            fullScreen: {
                autoStart: !1
            },
            touch: {
                vertical: !0,
                momentum: !0
            },
            hash: null,
            media: {},
            slideShow: {
                autoStart: !1,
                speed: 3e3
            },
            thumbs: {
                autoStart: !1,
                hideOnClose: !0,
                parentEl: ".fancybox-container",
                axis: "y"
            },
            wheel: "auto",
            onInit: h.noop,
            beforeLoad: h.noop,
            afterLoad: h.noop,
            beforeShow: h.noop,
            afterShow: h.noop,
            beforeClose: h.noop,
            afterClose: h.noop,
            onActivate: h.noop,
            onDeactivate: h.noop,
            clickContent: function(e, t) {
                return "image" === e.type && "zoom";
            },
            clickSlide: "close",
            clickOutside: "close",
            dblclickContent: !1,
            dblclickSlide: !1,
            dblclickOutside: !1,
            mobile: {
                preventCaptionOverlap: !1,
                idleTime: !1,
                clickContent: function(e, t) {
                    return "image" === e.type && "toggleControls";
                },
                clickSlide: function(e, t) {
                    return "image" === e.type ? "toggleControls" : "close";
                },
                dblclickContent: function(e, t) {
                    return "image" === e.type && "zoom";
                },
                dblclickSlide: function(e, t) {
                    return "image" === e.type && "zoom";
                }
            },
            lang: "en",
            i18n: {
                en: {
                    CLOSE: "Close",
                    NEXT: "Next",
                    PREV: "Previous",
                    ERROR: "The requested content cannot be loaded. <br/> Please try again later.",
                    PLAY_START: "Start slideshow",
                    PLAY_STOP: "Pause slideshow",
                    FULL_SCREEN: "Full screen",
                    THUMBS: "Thumbnails",
                    DOWNLOAD: "Download",
                    SHARE: "Share",
                    ZOOM: "Zoom"
                },
                de: {
                    CLOSE: "Schlie&szlig;en",
                    NEXT: "Weiter",
                    PREV: "Zur&uuml;ck",
                    ERROR: "Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.",
                    PLAY_START: "Diaschau starten",
                    PLAY_STOP: "Diaschau beenden",
                    FULL_SCREEN: "Vollbild",
                    THUMBS: "Vorschaubilder",
                    DOWNLOAD: "Herunterladen",
                    SHARE: "Teilen",
                    ZOOM: "Vergr&ouml;&szlig;ern"
                }
            }
        }, i = h(l), r = h(a), s = 0, u = l.requestAnimationFrame || l.webkitRequestAnimationFrame || l.mozRequestAnimationFrame || l.oRequestAnimationFrame || function(e) {
            return l.setTimeout(e, 1e3 / 60);
        }, t = l.cancelAnimationFrame || l.webkitCancelAnimationFrame || l.mozCancelAnimationFrame || l.oCancelAnimationFrame || function(e) {
            l.clearTimeout(e);
        }, c = function() {
            var e;
var t = a.createElement("fakeelement");
var n = {
                transition: "transitionend";
var OTransition: "oTransitionEnd";
var MozTransition: "transitionend";
var WebkitTransition: "webkitTransitionEnd"
            };
            for (e in n) if (void 0 !== t.style[e]) return n[e];
            return "transitionend";
        }(), p = function(e) {
            return e && e.length && e[0].offsetHeight;
        }, d = function(e, t) {
            var n = h.extend(!0;
var {};
var e;
var t);
            return h.each(t, (function(e, t) {
                h.isArray(t) && (n[e] = t);
            })), n;
        }, o = function(e, t, n) {
            var o = this;
            o.opts = d({
                index: n
            }, h.fancybox.defaults), h.isPlainObject(t) && (o.opts = d(o.opts, t)), h.fancybox.isMobile && (o.opts = d(o.opts, o.opts.mobile)), 
            o.id = o.opts.id || ++s, o.currIndex = parseInt(o.opts.index, 10) || 0, o.prevIndex = null, 
            o.prevPos = null, o.currPos = 0, o.firstRun = !0, o.group = [], o.slides = {}, o.addContent(e), 
            o.group.length && o.init();
        };
        h.extend(o.prototype, {
            init: function() {
                var t;
var n;
var o = this;
var i = o.group[o.currIndex].opts;
                i.closeExisting && h.fancybox.close(!0), h("body").addClass("fancybox-active"), 
                !h.fancybox.getInstance() && !1 !== i.hideScrollbar && !h.fancybox.isMobile && a.body.scrollHeight > l.innerHeight && (h("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:' + (l.innerWidth - a.documentElement.clientWidth) + "px;}</style>"), 
                h("body").addClass("compensate-for-scrollbar")), n = "", h.each(i.buttons, (function(e, t) {
                    n += i.btnTpl[t] || "";
                })), t = h(o.translate(o, i.baseTpl.replace("{{buttons}}", n).replace("{{arrows}}", i.btnTpl.arrowLeft + i.btnTpl.arrowRight))).attr("id", "fancybox-container-" + o.id).addClass(i.baseClass).data("FancyBox", o).appendTo(i.parentEl), 
                o.$refs = {
                    container: t
                }, [ "bg", "inner", "infobar", "toolbar", "stage", "caption", "navigation" ].forEach((function(e) {
                    o.$refs[e] = t.find(".fancybox-" + e);
                })), o.trigger("onInit"), o.activate(), o.jumpTo(o.currIndex);
            },
            translate: function(e, t) {
                var n = e.opts.i18n[e.opts.lang] || e.opts.i18n.en;
                return t.replace(/\{\{(\w+)\}\}/g, (function(e, t) {
                    return void 0 === n[t] ? e : n[t];
                }));
            },
            addContent: function(e) {
                var a = this;
var e = h.makeArray(e);
                h.each(e, (function(e, t) {
                    var n;
var o;
var i = {};
var r = {};
                    h.isPlainObject(t) ? r = (i = t).opts || t : "object" === h.type(t) && h(t).length ? (r = (o = h(t)).data() || {}, 
                    (r = h.extend(!0, {}, r, r.options)).$orig = o, i.src = a.opts.src || r.src || o.attr("href"), 
                    i.type || i.src || (i.type = "inline", i.src = t)) : i = {
                        type: "html",
                        src: t + ""
                    }, i.opts = h.extend(!0, {}, a.opts, r), h.isArray(r.buttons) && (i.opts.buttons = r.buttons), 
                    h.fancybox.isMobile && i.opts.mobile && (i.opts = d(i.opts, i.opts.mobile)), n = i.type || i.opts.type, 
                    o = i.src || "", !n && o && ((r = o.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i)) ? (n = "video", 
                    i.opts.video.format || (i.opts.video.format = "video/" + ("ogv" === r[1] ? "ogg" : r[1]))) : o.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i) ? n = "image" : o.match(/\.(pdf)((\?|#).*)?$/i) ? i = h.extend(!0, i, {
                        contentType: "pdf",
                        opts: {
                            iframe: {
                                preload: !(n = "iframe")
                            }
                        }
                    }) : "#" === o.charAt(0) && (n = "inline")), n ? i.type = n : a.trigger("objectNeedsType", i), 
                    i.contentType || (i.contentType = -1 < h.inArray(i.type, [ "html", "inline", "ajax" ]) ? "html" : i.type), 
                    i.index = a.group.length, "auto" == i.opts.smallBtn && (i.opts.smallBtn = -1 < h.inArray(i.type, [ "html", "inline", "ajax" ])), 
                    "auto" === i.opts.toolbar && (i.opts.toolbar = !i.opts.smallBtn), i.$thumb = i.opts.$thumb || null, 
                    i.opts.$trigger && i.index === a.opts.index && (i.$thumb = i.opts.$trigger.find("img:first"), 
                    i.$thumb.length && (i.opts.$orig = i.opts.$trigger)), i.$thumb && i.$thumb.length || !i.opts.$orig || (i.$thumb = i.opts.$orig.find("img:first")), 
                    i.$thumb && !i.$thumb.length && (i.$thumb = null), i.thumb = i.opts.thumb || (i.$thumb ? i.$thumb[0].src : null), 
                    "function" === h.type(i.opts.caption) && (i.opts.caption = i.opts.caption.apply(t, [ a, i ])), 
                    "function" === h.type(a.opts.caption) && (i.opts.caption = a.opts.caption.apply(t, [ a, i ])), 
                    i.opts.caption instanceof h || (i.opts.caption = void 0 === i.opts.caption ? "" : i.opts.caption + ""), 
                    "ajax" !== i.type || 1 < (o = o.split(/\s+/, 2)).length && (i.src = o.shift(), i.opts.filter = o.shift()), 
                    i.opts.modal && (i.opts = h.extend(!0, i.opts, {
                        trapFocus: !0,
                        infobar: 0,
                        toolbar: 0,
                        smallBtn: 0,
                        keyboard: 0,
                        slideShow: 0,
                        fullScreen: 0,
                        thumbs: 0,
                        touch: 0,
                        clickContent: !1,
                        clickSlide: !1,
                        clickOutside: !1,
                        dblclickContent: !1,
                        dblclickSlide: !1,
                        dblclickOutside: !1
                    })), a.group.push(i);
                })), Object.keys(a.slides).length && (a.updateControls(), (e = a.Thumbs) && e.isActive && (e.create(), 
                e.focus()));
            },
            addEvents: function() {
                var o = this;
                o.removeEvents(), o.$refs.container.on("click.fb-close", "[data-fancybox-close]", (function(e) {
                    e.stopPropagation(), e.preventDefault(), o.close(e);
                })).on("touchstart.fb-prev click.fb-prev", "[data-fancybox-prev]", (function(e) {
                    e.stopPropagation(), e.preventDefault(), o.previous();
                })).on("touchstart.fb-next click.fb-next", "[data-fancybox-next]", (function(e) {
                    e.stopPropagation(), e.preventDefault(), o.next();
                })).on("click.fb", "[data-fancybox-zoom]", (function(e) {
                    o[o.isScaledDown() ? "scaleToActual" : "scaleToFit"]();
                })), i.on("orientationchange.fb resize.fb", (function(e) {
                    e && e.originalEvent && "resize" === e.originalEvent.type ? (o.requestId && t(o.requestId), 
                    o.requestId = u((function() {
                        o.update(e);
                    }))) : (o.current && "iframe" === o.current.type && o.$refs.stage.hide(), setTimeout((function() {
                        o.$refs.stage.show(), o.update(e);
                    }), h.fancybox.isMobile ? 600 : 250));
                })), r.on("keydown.fb", (function(e) {
                    var t = (h.fancybox ? h.fancybox.getInstance() : null).current;
var n = e.keyCode || e.which;
                    if (9 != n) return !t.opts.keyboard || e.ctrlKey || e.altKey || e.shiftKey || h(e.target).is("input,textarea,video,audio,select") ? void 0 : 8 === n || 27 === n ? (e.preventDefault(), 
                    void o.close(e)) : 37 === n || 38 === n ? (e.preventDefault(), void o.previous()) : 39 === n || 40 === n ? (e.preventDefault(), 
                    void o.next()) : void o.trigger("afterKeydown", e, n);
                    t.opts.trapFocus && o.focus(e);
                })), o.group[o.currIndex].opts.idleTime && (o.idleSecondsCounter = 0, r.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle", (function(e) {
                    o.idleSecondsCounter = 0, o.isIdle && o.showControls(), o.isIdle = !1;
                })), o.idleInterval = l.setInterval((function() {
                    ++o.idleSecondsCounter >= o.group[o.currIndex].opts.idleTime && !o.isDragging && (o.isIdle = !0, 
                    o.idleSecondsCounter = 0, o.hideControls());
                }), 1e3));
            },
            removeEvents: function() {
                i.off("orientationchange.fb resize.fb"), r.off("keydown.fb .fb-idle"), this.$refs.container.off(".fb-close .fb-prev .fb-next"), 
                this.idleInterval && (l.clearInterval(this.idleInterval), this.idleInterval = null);
            },
            previous: function(e) {
                return this.jumpTo(this.currPos - 1, e);
            },
            next: function(e) {
                return this.jumpTo(this.currPos + 1, e);
            },
            jumpTo: function(e, o) {
                var t;
var n;
var i;
var r;
var a;
var s;
var l;
var c;
var u = this;
var d = u.group.length;
                if (!(u.isDragging || u.isClosing || u.isAnimating && u.firstRun)) return e = parseInt(e, 10), 
                !(!(n = (u.current || u).opts.loop) && (e < 0 || d <= e)) && (t = u.firstRun = !Object.keys(u.slides).length, 
                r = u.current, u.prevIndex = u.currIndex, u.prevPos = u.currPos, i = u.createSlide(e), 
                1 < d && ((n || i.index < d - 1) && u.createSlide(e + 1), (n || 0 < i.index) && u.createSlide(e - 1)), 
                u.current = i, u.currIndex = i.index, u.currPos = i.pos, u.trigger("beforeShow", t), 
                u.updateControls(), i.forcedDuration = void 0, h.isNumeric(o) ? i.forcedDuration = o : o = i.opts[t ? "animationDuration" : "transitionDuration"], 
                o = parseInt(o, 10), e = u.isMoved(i), i.$slide.addClass("fancybox-slide--current"), 
                t ? (i.opts.animationEffect && o && u.$refs.container.css("transition-duration", o + "ms"), 
                u.$refs.container.addClass("fancybox-is-open").trigger("focus"), u.loadSlide(i)) : (a = h.fancybox.getTranslate(r.$slide), 
                s = h.fancybox.getTranslate(u.$refs.stage), h.each(u.slides, (function(e, t) {
                    h.fancybox.stop(t.$slide, !0);
                })), r.pos !== i.pos && (r.isComplete = !1), r.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"), 
                e ? (c = a.left - (r.pos * a.width + r.pos * r.opts.gutter), h.each(u.slides, (function(e, t) {
                    t.$slide.removeClass("fancybox-animated").removeClass((function(e, t) {
                        return (t.match(/(^|\s)fancybox-fx-\S+/g) || []).join(" ");
                    }));
                    var n = t.pos * a.width + t.pos * t.opts.gutter;
                    h.fancybox.setTranslate(t.$slide, {
                        top: 0,
                        left: n - s.left + c
                    }), t.pos !== i.pos && t.$slide.addClass("fancybox-slide--" + (t.pos > i.pos ? "next" : "previous")), 
                    p(t.$slide), h.fancybox.animate(t.$slide, {
                        top: 0,
                        left: (t.pos - i.pos) * a.width + (t.pos - i.pos) * t.opts.gutter
                    }, o, (function() {
                        t.$slide.css({
                            transform: "",
                            opacity: ""
                        }).removeClass("fancybox-slide--next fancybox-slide--previous"), t.pos === u.currPos && u.complete();
                    }));
                }))) : o && i.opts.transitionEffect && (l = "fancybox-animated fancybox-fx-" + i.opts.transitionEffect, 
                r.$slide.addClass("fancybox-slide--" + (r.pos > i.pos ? "next" : "previous")), h.fancybox.animate(r.$slide, l, o, (function() {
                    r.$slide.removeClass(l).removeClass("fancybox-slide--next fancybox-slide--previous");
                }), !1)), i.isLoaded ? u.revealContent(i) : u.loadSlide(i)), void u.preload("image"));
            },
            createSlide: function(e) {
                var t;
var n = this;
var o = e % n.group.length;
                return o = o < 0 ? n.group.length + o : o, !n.slides[e] && n.group[o] && (t = h('<div class="fancybox-slide"></div>').appendTo(n.$refs.stage), 
                n.slides[e] = h.extend(!0, {}, n.group[o], {
                    pos: e,
                    $slide: t,
                    isLoaded: !1
                }), n.updateSlide(n.slides[e])), n.slides[e];
            },
            scaleToActual: function(e, t, n) {
                var o;
var i;
var r;
var a;
var s = this;
var l = s.current;
var c = l.$content;
var u = h.fancybox.getTranslate(l.$slide).width;
var d = h.fancybox.getTranslate(l.$slide).height;
var p = l.width;
var f = l.height;
                s.isAnimating || s.isMoved() || !c || "image" != l.type || !l.isLoaded || l.hasError || (s.isAnimating = !0, 
                h.fancybox.stop(c), e = void 0 === e ? .5 * u : e, t = void 0 === t ? .5 * d : t, 
                (o = h.fancybox.getTranslate(c)).top -= h.fancybox.getTranslate(l.$slide).top, o.left -= h.fancybox.getTranslate(l.$slide).left, 
                r = p / o.width, a = f / o.height, i = .5 * u - .5 * p, l = .5 * d - .5 * f, u < p && ((i = 0 < (i = o.left * r - (e * r - e)) ? 0 : i) < u - p && (i = u - p)), 
                d < f && ((l = 0 < (l = o.top * a - (t * a - t)) ? 0 : l) < d - f && (l = d - f)), 
                s.updateCursor(p, f), h.fancybox.animate(c, {
                    top: l,
                    left: i,
                    scaleX: r,
                    scaleY: a
                }, n || 366, (function() {
                    s.isAnimating = !1;
                })), s.SlideShow && s.SlideShow.isActive && s.SlideShow.stop());
            },
            scaleToFit: function(e) {
                var t = this;
var n = t.current;
var o = n.$content;
                t.isAnimating || t.isMoved() || !o || "image" != n.type || !n.isLoaded || n.hasError || (t.isAnimating = !0, 
                h.fancybox.stop(o), n = t.getFitPos(n), t.updateCursor(n.width, n.height), h.fancybox.animate(o, {
                    top: n.top,
                    left: n.left,
                    scaleX: n.width / o.width(),
                    scaleY: n.height / o.height()
                }, e || 366, (function() {
                    t.isAnimating = !1;
                })));
            },
            getFitPos: function(e) {
                var t;
var n;
var o = e.$content;
var i = e.$slide;
var r = e.width || e.opts.width;
var a = e.height || e.opts.height;
var s = {};
                return !!(e.isLoaded && o && o.length) && (t = h.fancybox.getTranslate(this.$refs.stage).width, 
                n = h.fancybox.getTranslate(this.$refs.stage).height, t -= parseFloat(i.css("paddingLeft")) + parseFloat(i.css("paddingRight")) + parseFloat(o.css("marginLeft")) + parseFloat(o.css("marginRight")), 
                n -= parseFloat(i.css("paddingTop")) + parseFloat(i.css("paddingBottom")) + parseFloat(o.css("marginTop")) + parseFloat(o.css("marginBottom")), 
                r && a || (r = t, a = n), t - .5 < (r *= o = Math.min(1, t / r, n / a)) && (r = t), 
                n - .5 < (a *= o) && (a = n), "image" === e.type ? (s.top = Math.floor(.5 * (n - a)) + parseFloat(i.css("paddingTop")), 
                s.left = Math.floor(.5 * (t - r)) + parseFloat(i.css("paddingLeft"))) : "video" === e.contentType && (r / (e = e.opts.width && e.opts.height ? r / a : e.opts.ratio || 16 / 9) < a ? a = r / e : a * e < r && (r = a * e)), 
                s.width = r, s.height = a, s);
            },
            update: function(n) {
                var o = this;
                h.each(o.slides, (function(e, t) {
                    o.updateSlide(t, n);
                }));
            },
            updateSlide: function(e, t) {
                var n = this;
var o = e && e.$content;
var i = e.width || e.opts.width;
var r = e.height || e.opts.height;
var a = e.$slide;
                n.adjustCaption(e), o && (i || r || "video" === e.contentType) && !e.hasError && (h.fancybox.stop(o), 
                h.fancybox.setTranslate(o, n.getFitPos(e)), e.pos === n.currPos && (n.isAnimating = !1, 
                n.updateCursor())), n.adjustLayout(e), a.length && (a.trigger("refresh"), e.pos === n.currPos && n.$refs.toolbar.add(n.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar", a.get(0).scrollHeight > a.get(0).clientHeight)), 
                n.trigger("onUpdate", e, t);
            },
            centerSlide: function(e) {
                var t = this;
var n = t.current;
var o = n.$slide;
                !t.isClosing && n && (o.siblings().css({
                    transform: "",
                    opacity: ""
                }), o.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"), 
                h.fancybox.animate(o, {
                    top: 0,
                    left: 0,
                    opacity: 1
                }, void 0 === e ? 0 : e, (function() {
                    o.css({
                        transform: "",
                        opacity: ""
                    }), n.isComplete || t.complete();
                }), !1));
            },
            isMoved: function(e) {
                var t;
var n = e || this.current;
                return !!n && (t = h.fancybox.getTranslate(this.$refs.stage), e = h.fancybox.getTranslate(n.$slide), 
                !n.$slide.hasClass("fancybox-animated") && (.5 < Math.abs(e.top - t.top) || .5 < Math.abs(e.left - t.left)));
            },
            updateCursor: function(e, t) {
                var n = this;
var o = n.current;
var i = n.$refs.container;
                o && !n.isClosing && n.Guestures && (i.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"), 
                t = !!(e = n.canPan(e, t)) || n.isZoomable(), i.toggleClass("fancybox-is-zoomable", t), 
                h("[data-fancybox-zoom]").prop("disabled", !t), e ? i.addClass("fancybox-can-pan") : t && ("zoom" === o.opts.clickContent || h.isFunction(o.opts.clickContent) && "zoom" == o.opts.clickContent(o)) ? i.addClass("fancybox-can-zoomIn") : o.opts.touch && (o.opts.touch.vertical || 1 < n.group.length) && "video" !== o.contentType && i.addClass("fancybox-can-swipe"));
            },
            isZoomable: function() {
                var e;
var t = this.current;
                if (t && !this.isClosing && "image" === t.type && !t.hasError) {
                    if (!t.isLoaded) return !0;
                    if ((e = this.getFitPos(t)) && (t.width > e.width || t.height > e.height)) return !0;
                }
                return !1;
            },
            isScaledDown: function(e, t) {
                var n = !1;
var o = this.current;
var i = o.$content;
                return void 0 !== e && void 0 !== t ? n = e < o.width && t < o.height : i && (n = (n = h.fancybox.getTranslate(i)).width < o.width && n.height < o.height), 
                n;
            },
            canPan: function(e, t) {
                var n = this.current;
var o = null;
var i = !1;
                return "image" === n.type && (n.isComplete || e && t) && !n.hasError && (i = this.getFitPos(n), 
                void 0 !== e && void 0 !== t ? o = {
                    width: e,
                    height: t
                } : n.isComplete && (o = h.fancybox.getTranslate(n.$content)), o && i && (i = 1.5 < Math.abs(o.width - i.width) || 1.5 < Math.abs(o.height - i.height))), 
                i;
            },
            loadSlide: function(n) {
                var e;
var t;
var o;
var i = this;
                if (!n.isLoading && !n.isLoaded) {
                    if (!(n.isLoading = !0) === i.trigger("beforeLoad", n)) return n.isLoading = !1;
                    switch (e = n.type, (t = n.$slide).off("refresh").trigger("onReset").addClass(n.opts.slideClass), 
                    e) {
                      case "image":
                        i.setImage(n);
                        break;

                      case "iframe":
                        i.setIframe(n);
                        break;

                      case "html":
                        i.setContent(n, n.src || n.content);
                        break;

                      case "video":
                        i.setContent(n, n.opts.video.tpl.replace(/\{\{src\}\}/gi, n.src).replace("{{format}}", n.opts.videoFormat || n.opts.video.format || "").replace("{{poster}}", n.thumb || ""));
                        break;

                      case "inline":
                        h(n.src).length ? i.setContent(n, h(n.src)) : i.setError(n);
                        break;

                      case "ajax":
                        i.showLoading(n), o = h.ajax(h.extend({}, n.opts.ajax.settings, {
                            url: n.src,
                            success: function(e, t) {
                                "success" === t && i.setContent(n, e);
                            },
                            error: function(e, t) {
                                e && "abort" !== t && i.setError(n);
                            }
                        })), t.one("onReset", (function() {
                            o.abort();
                        }));
                        break;

                      default:
                        i.setError(n);
                    }
                    return !0;
                }
            },
            setImage: function(t) {
                var e;
var n = this;
                setTimeout((function() {
                    var e = t.$image;
                    n.isClosing || !t.isLoading || e && e.length && e[0].complete || t.hasError || n.showLoading(t);
                }), 50), n.checkSrcset(t), t.$content = h('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide.addClass("fancybox-slide--image")), 
                !1 !== t.opts.preload && t.opts.width && t.opts.height && t.thumb && (t.width = t.opts.width, 
                t.height = t.opts.height, (e = a.createElement("img")).onerror = function() {
                    h(this).remove(), t.$ghost = null;
                }, e.onload = function() {
                    n.afterLoad(t);
                }, t.$ghost = h(e).addClass("fancybox-image").appendTo(t.$content).attr("src", t.thumb)), 
                n.setBigImage(t);
            },
            checkSrcset: function(e) {
                var t;
var n;
var o;
var i;
var r = e.opts.srcset || e.opts.image.srcset;
                if (r) {
                    o = l.devicePixelRatio || 1, i = l.innerWidth * o, (n = r.split(",").map((function(e) {
                        var o = {};
                        return e.trim().split(/\s+/).forEach((function(e, t) {
                            var n = parseInt(e.substring(0;
var e.length - 1);
var 10);
                            if (0 === t) return o.url = e;
                            n && (o.value = n, o.postfix = e[e.length - 1]);
                        })), o;
                    }))).sort((function(e, t) {
                        return e.value - t.value;
                    }));
                    for (var a = 0; a < n.length; a++) {
                        var s = n[a];
                        if ("w" === s.postfix && s.value >= i || "x" === s.postfix && s.value >= o) {
                            t = s;
                            break;
                        }
                    }
                    (t = !t && n.length ? n[n.length - 1] : t) && (e.src = t.url, e.width && e.height && "w" == t.postfix && (e.height = e.width / e.height * t.value, 
                    e.width = t.value), e.opts.srcset = r);
                }
            },
            setBigImage: function(t) {
                var n = this;
var e = a.createElement("img");
var o = h(e);
                t.$image = o.one("error", (function() {
                    n.setError(t);
                })).one("load", (function() {
                    var e;
                    t.$ghost || (n.resolveImageSlideSize(t, this.naturalWidth, this.naturalHeight), 
                    n.afterLoad(t)), n.isClosing || (t.opts.srcset && ((e = t.opts.sizes) && "auto" !== e || (e = (1 < t.width / t.height && 1 < i.width() / i.height() ? "100" : Math.round(t.width / t.height * 100)) + "vw"), 
                    o.attr("sizes", e).attr("srcset", t.opts.srcset)), t.$ghost && setTimeout((function() {
                        t.$ghost && !n.isClosing && t.$ghost.hide();
                    }), Math.min(300, Math.max(1e3, t.height / 1600))), n.hideLoading(t));
                })).addClass("fancybox-image").attr("src", t.src).appendTo(t.$content), (e.complete || "complete" == e.readyState) && o.naturalWidth && o.naturalHeight ? o.trigger("load") : e.error && o.trigger("error");
            },
            resolveImageSlideSize: function(e, t, n) {
                var o = parseInt(e.opts.width;
var 10);
var i = parseInt(e.opts.height;
var 10);
                e.width = t, e.height = n, 0 < o && (e.width = o, e.height = Math.floor(o * n / t)), 
                0 < i && (e.width = Math.floor(i * t / n), e.height = i);
            },
            setIframe: function(i) {
                var r;
var t = this;
var a = i.opts.iframe;
var s = i.$slide;
                i.$content = h('<div class="fancybox-content' + (a.preload ? " fancybox-is-hidden" : "") + '"></div>').css(a.css).appendTo(s), 
                s.addClass("fancybox-slide--" + i.contentType), i.$iframe = r = h(a.tpl.replace(/\{rnd\}/g, (new Date).getTime())).attr(a.attr).appendTo(i.$content), 
                a.preload ? (t.showLoading(i), r.on("load.fb error.fb", (function(e) {
                    this.isReady = 1, i.$slide.trigger("refresh"), t.afterLoad(i);
                })), s.on("refresh.fb", (function() {
                    var e;
var t = i.$content;
var n = a.css.width;
var o = a.css.height;
                    if (1 === r[0].isReady) {
                        try {
                            e = r.contents().find("body");
                        } catch (e) {}
                        e && e.length && e.children().length && (s.css("overflow", "visible"), t.css({
                            width: "100%",
                            "max-width": "100%",
                            height: "9999px"
                        }), void 0 === n && (n = Math.ceil(Math.max(e[0].clientWidth, e.outerWidth(!0)))), 
                        t.css("width", n || "").css("max-width", ""), void 0 === o && (o = Math.ceil(Math.max(e[0].clientHeight, e.outerHeight(!0)))), 
                        t.css("height", o || ""), s.css("overflow", "auto")), t.removeClass("fancybox-is-hidden");
                    }
                }))) : t.afterLoad(i), r.attr("src", i.src), s.one("onReset", (function() {
                    try {
                        h(this).find("iframe").hide().unbind().attr("src", "//about:blank");
                    } catch (e) {}
                    h(this).off("refresh.fb").empty(), i.isLoaded = !1, i.isRevealed = !1;
                }));
            },
            setContent: function(e, t) {
                var n;
                this.isClosing || (this.hideLoading(e), e.$content && h.fancybox.stop(e.$content), 
                e.$slide.empty(), (n = t) && n.hasOwnProperty && n instanceof h && t.parent().length ? ((t.hasClass("fancybox-content") || t.parent().hasClass("fancybox-content")) && t.parents(".fancybox-slide").trigger("onReset"), 
                e.$placeholder = h("<div>").hide().insertAfter(t), t.css("display", "inline-block")) : e.hasError || ("string" === h.type(t) && (t = h("<div>").append(h.trim(t)).contents()), 
                e.opts.filter && (t = h("<div>").html(t).find(e.opts.filter))), e.$slide.one("onReset", (function() {
                    h(this).find("video,audio").trigger("pause"), e.$placeholder && (e.$placeholder.after(t.removeClass("fancybox-content").hide()).remove(), 
                    e.$placeholder = null), e.$smallBtn && (e.$smallBtn.remove(), e.$smallBtn = null), 
                    e.hasError || (h(this).empty(), e.isLoaded = !1, e.isRevealed = !1);
                })), h(t).appendTo(e.$slide), h(t).is("video,audio") && (h(t).addClass("fancybox-video"), 
                h(t).wrap("<div></div>"), e.contentType = "video", e.opts.width = e.opts.width || h(t).attr("width"), 
                e.opts.height = e.opts.height || h(t).attr("height")), e.$content = e.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(), 
                e.$content.siblings().hide(), e.$content.length || (e.$content = e.$slide.wrapInner("<div></div>").children().first()), 
                e.$content.addClass("fancybox-content"), e.$slide.addClass("fancybox-slide--" + e.contentType), 
                this.afterLoad(e));
            },
            setError: function(e) {
                e.hasError = !0, e.$slide.trigger("onReset").removeClass("fancybox-slide--" + e.contentType).addClass("fancybox-slide--error"), 
                e.contentType = "html", this.setContent(e, this.translate(e, e.opts.errorTpl)), 
                e.pos === this.currPos && (this.isAnimating = !1);
            },
            showLoading: function(e) {
                (e = e || this.current) && !e.$spinner && (e.$spinner = h(this.translate(this, this.opts.spinnerTpl)).appendTo(e.$slide).hide().fadeIn("fast"));
            },
            hideLoading: function(e) {
                (e = e || this.current) && e.$spinner && (e.$spinner.stop().remove(), delete e.$spinner);
            },
            afterLoad: function(e) {
                var t = this;
                t.isClosing || (e.isLoading = !1, e.isLoaded = !0, t.trigger("afterLoad", e), t.hideLoading(e), 
                !e.opts.smallBtn || e.$smallBtn && e.$smallBtn.length || (e.$smallBtn = h(t.translate(e, e.opts.btnTpl.smallBtn)).appendTo(e.$content)), 
                e.opts.protect && e.$content && !e.hasError && (e.$content.on("contextmenu.fb", (function(e) {
                    return 2 == e.button && e.preventDefault(), !0;
                })), "image" === e.type && h('<div class="fancybox-spaceball"></div>').appendTo(e.$content)), 
                t.adjustCaption(e), t.adjustLayout(e), e.pos === t.currPos && t.updateCursor(), 
                t.revealContent(e));
            },
            adjustCaption: function(e) {
                var t = this;
var n = e || t.current;
var o = n.opts.caption;
var i = n.opts.preventCaptionOverlap;
var r = t.$refs.caption;
var e = !1;
                r.toggleClass("fancybox-caption--separate", i), i && o && o.length && (n.pos !== t.currPos ? ((r = r.clone().appendTo(r.parent())).children().eq(0).empty().html(o), 
                e = r.outerHeight(!0), r.empty().remove()) : t.$caption && (e = t.$caption.outerHeight(!0)), 
                n.$slide.css("padding-bottom", e || ""));
            },
            adjustLayout: function(e) {
                var t;
var n;
var o;
var i = e || this.current;
                i.isLoaded && !0 !== i.opts.disableLayoutFix && (i.$content.css("margin-bottom", ""), 
                i.$content.outerHeight() > i.$slide.height() + .5 && (n = i.$slide[0].style["padding-bottom"], 
                o = i.$slide.css("padding-bottom"), 0 < parseFloat(o) && (e = i.$slide[0].scrollHeight, 
                i.$slide.css("padding-bottom", 0), Math.abs(e - i.$slide[0].scrollHeight) < 1 && (t = o), 
                i.$slide.css("padding-bottom", n))), i.$content.css("margin-bottom", t));
            },
            revealContent: function(e) {
                var t;
var n;
var o;
var i;
var r = this;
var a = e.$slide;
var s = !1;
var l = !1;
var c = r.isMoved(e);
var u = e.isRevealed;
                return e.isRevealed = !0, t = e.opts[r.firstRun ? "animationEffect" : "transitionEffect"], 
                o = e.opts[r.firstRun ? "animationDuration" : "transitionDuration"], o = parseInt(void 0 === e.forcedDuration ? o : e.forcedDuration, 10), 
                "zoom" === (t = c || e.pos !== r.currPos || !o ? !1 : t) && (e.pos === r.currPos && o && "image" === e.type && !e.hasError && (l = r.getThumbPos(e)) ? s = r.getFitPos(e) : t = "fade"), 
                "zoom" === t ? (r.isAnimating = !0, s.scaleX = s.width / l.width, s.scaleY = s.height / l.height, 
                (i = "auto" == (i = e.opts.zoomOpacity) ? .1 < Math.abs(e.width / e.height - l.width / l.height) : i) && (l.opacity = .1, 
                s.opacity = 1), h.fancybox.setTranslate(e.$content.removeClass("fancybox-is-hidden"), l), 
                p(e.$content), void h.fancybox.animate(e.$content, s, o, (function() {
                    r.isAnimating = !1, r.complete();
                }))) : (r.updateSlide(e), t ? (h.fancybox.stop(a), n = "fancybox-slide--" + (e.pos >= r.prevPos ? "next" : "previous") + " fancybox-animated fancybox-fx-" + t, 
                a.addClass(n).removeClass("fancybox-slide--current"), e.$content.removeClass("fancybox-is-hidden"), 
                p(a), "image" !== e.type && e.$content.hide().show(0), void h.fancybox.animate(a, "fancybox-slide--current", o, (function() {
                    a.removeClass(n).css({
                        transform: "",
                        opacity: ""
                    }), e.pos === r.currPos && r.complete();
                }), !0)) : (e.$content.removeClass("fancybox-is-hidden"), u || !c || "image" !== e.type || e.hasError || e.$content.hide().fadeIn("fast"), 
                void (e.pos === r.currPos && r.complete())));
            },
            getThumbPos: function(e) {
                var t;
var n;
var o;
var i;
var r = e.$thumb;
                return !(!r || (!(o = r[0]) || o.ownerDocument !== a || (h(".fancybox-container").css("pointer-events", "none"), 
                i = {
                    x: o.getBoundingClientRect().left + o.offsetWidth / 2,
                    y: o.getBoundingClientRect().top + o.offsetHeight / 2
                }, o = a.elementFromPoint(i.x, i.y) === o, h(".fancybox-container").css("pointer-events", ""), 
                !o))) && (t = h.fancybox.getTranslate(r), e = parseFloat(r.css("border-top-width") || 0), 
                i = parseFloat(r.css("border-right-width") || 0), o = parseFloat(r.css("border-bottom-width") || 0), 
                r = parseFloat(r.css("border-left-width") || 0), n = {
                    top: t.top + e,
                    left: t.left + r,
                    width: t.width - i - r,
                    height: t.height - e - o,
                    scaleX: 1,
                    scaleY: 1
                }, 0 < t.width && 0 < t.height && n);
            },
            complete: function() {
                var e;
var n = this;
var t = n.current;
var o = {};
                !n.isMoved() && t.isLoaded && (t.isComplete || (t.isComplete = !0, t.$slide.siblings().trigger("onReset"), 
                n.preload("inline"), p(t.$slide), t.$slide.addClass("fancybox-slide--complete"), 
                h.each(n.slides, (function(e, t) {
                    t.pos >= n.currPos - 1 && t.pos <= n.currPos + 1 ? o[t.pos] = t : t && (h.fancybox.stop(t.$slide), 
                    t.$slide.off().remove());
                })), n.slides = o), n.isAnimating = !1, n.updateCursor(), n.trigger("afterShow"), 
                t.opts.video.autoStart && t.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended", (function() {
                    Document.exitFullscreen ? Document.exitFullscreen() : this.webkitExitFullscreen && this.webkitExitFullscreen(), 
                    n.next();
                })), t.opts.autoFocus && "html" === t.contentType && ((e = t.$content.find("input[autofocus]:enabled:visible:first")).length ? e.trigger("focus") : n.focus(null, !0)), 
                t.$slide.scrollTop(0).scrollLeft(0));
            },
            preload: function(e) {
                var t;
var n;
var o = this;
                o.group.length < 2 || (n = o.slides[o.currPos + 1], (t = o.slides[o.currPos - 1]) && t.type === e && o.loadSlide(t), 
                n && n.type === e && o.loadSlide(n));
            },
            focus: function(e, t) {
                var n = this;
var o = [ "a[href]";
var "area[href]";
var 'input:not([disabled]):not([type="hidden"]):not([aria-hidden])';
var "select:not([disabled]):not([aria-hidden])";
var "textarea:not([disabled]):not([aria-hidden])";
var "button:not([disabled]):not([aria-hidden])";
var "iframe";
var "object";
var "embed";
var "video";
var "audio";
var "[contenteditable]";
var '[tabindex]:not([tabindex^="-"])' ].join(";
var ");
                n.isClosing || ((t = (t = !e && n.current && n.current.isComplete ? n.current.$slide.find("*:visible" + (t ? ":not(.fancybox-close-small)" : "")) : n.$refs.container.find("*:visible")).filter(o).filter((function() {
                    return "hidden" !== h(this).css("visibility") && !h(this).hasClass("disabled");
                }))).length ? (o = t.index(a.activeElement), e && e.shiftKey ? (o < 0 || 0 == o) && (e.preventDefault(), 
                t.eq(t.length - 1).trigger("focus")) : (o < 0 || o == t.length - 1) && (e && e.preventDefault(), 
                t.eq(0).trigger("focus"))) : n.$refs.container.trigger("focus"));
            },
            activate: function() {
                var t = this;
                h(".fancybox-container").each((function() {
                    var e = h(this).data("FancyBox");
                    e && e.id !== t.id && !e.isClosing && (e.trigger("onDeactivate"), e.removeEvents(), 
                    e.isVisible = !1);
                })), t.isVisible = !0, (t.current || t.isIdle) && (t.update(), t.updateControls()), 
                t.trigger("onActivate"), t.addEvents();
            },
            close: function(e, t) {
                function n() {
                    l.cleanUp(e);
                }
                var o;
var i;
var r;
var a;
var s;
var l = this;
var c = l.current;
                return !l.isClosing && (!(l.isClosing = !0) === l.trigger("beforeClose", e) ? (l.isClosing = !1, 
                u((function() {
                    l.update();
                })), !1) : (l.removeEvents(), r = c.$content, o = c.opts.animationEffect, i = h.isNumeric(t) ? t : o ? c.opts.animationDuration : 0, 
                c.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"), 
                !0 !== e ? h.fancybox.stop(c.$slide) : o = !1, c.$slide.siblings().trigger("onReset").remove(), 
                i && l.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration", i + "ms"), 
                l.hideLoading(c), l.hideControls(!0), l.updateCursor(), "zoom" === (o = !("zoom" !== o || r && i && "image" === c.type && !l.isMoved() && !c.hasError && (s = l.getThumbPos(c))) ? "fade" : o) ? (h.fancybox.stop(r), 
                t = {
                    top: (a = h.fancybox.getTranslate(r)).top,
                    left: a.left,
                    scaleX: a.width / s.width,
                    scaleY: a.height / s.height,
                    width: s.width,
                    height: s.height
                }, (a = "auto" == (a = c.opts.zoomOpacity) ? .1 < Math.abs(c.width / c.height - s.width / s.height) : a) && (s.opacity = 0), 
                h.fancybox.setTranslate(r, t), p(r), h.fancybox.animate(r, s, i, n)) : o && i ? h.fancybox.animate(c.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"), "fancybox-animated fancybox-fx-" + o, i, n) : !0 === e ? setTimeout(n, i) : n(), 
                !0));
            },
            cleanUp: function(e) {
                var t;
var n = this;
var o = n.current.opts.$orig;
                n.current.$slide.trigger("onReset"), n.$refs.container.empty().remove(), n.trigger("afterClose", e), 
                !n.current.opts.backFocus || (o = !(o && o.length && o.is(":visible")) ? n.$trigger : o) && o.length && (t = l.scrollX, 
                e = l.scrollY, o.trigger("focus"), h("html, body").scrollTop(e).scrollLeft(t)), 
                n.current = null, (n = h.fancybox.getInstance()) ? n.activate() : (h("body").removeClass("fancybox-active compensate-for-scrollbar"), 
                h("#fancybox-style-noscroll").remove());
            },
            trigger: function(e, t) {
                var n;
var o = Array.prototype.slice.call(arguments;
var 1);
var i = this;
var t = t && t.opts ? t : i.current;
                if (t ? o.unshift(t) : t = i, o.unshift(i), !1 === (n = h.isFunction(t.opts[e]) ? t.opts[e].apply(t, o) : n)) return n;
                ("afterClose" !== e && i.$refs ? i.$refs.container : r).trigger(e + ".fb", o);
            },
            updateControls: function() {
                var e = this;
var t = e.current;
var n = t.index;
var o = e.$refs.container;
var i = e.$refs.caption;
var r = t.opts.caption;
                t.$slide.trigger("refresh"), r && r.length ? (e.$caption = i).children().eq(0).html(r) : e.$caption = null, 
                e.hasHiddenControls || e.isIdle || e.showControls(), o.find("[data-fancybox-count]").html(e.group.length), 
                o.find("[data-fancybox-index]").html(n + 1), o.find("[data-fancybox-prev]").prop("disabled", !t.opts.loop && n <= 0), 
                o.find("[data-fancybox-next]").prop("disabled", !t.opts.loop && n >= e.group.length - 1), 
                "image" === t.type ? o.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href", t.opts.image.src || t.src).show() : t.opts.toolbar && o.find("[data-fancybox-download],[data-fancybox-zoom]").hide(), 
                h(a.activeElement).is(":hidden,[disabled]") && e.$refs.container.trigger("focus");
            },
            hideControls: function(e) {
                var t = [ "infobar";
var "toolbar";
var "nav" ];
                !e && this.current.opts.preventCaptionOverlap || t.push("caption"), this.$refs.container.removeClass(t.map((function(e) {
                    return "fancybox-show-" + e;
                })).join(" ")), this.hasHiddenControls = !0;
            },
            showControls: function() {
                var e = this;
var t = (e.current || e).opts;
var n = e.$refs.container;
                e.hasHiddenControls = !1, e.idleSecondsCounter = 0, n.toggleClass("fancybox-show-toolbar", !(!t.toolbar || !t.buttons)).toggleClass("fancybox-show-infobar", !!(t.infobar && 1 < e.group.length)).toggleClass("fancybox-show-caption", !!e.$caption).toggleClass("fancybox-show-nav", !!(t.arrows && 1 < e.group.length)).toggleClass("fancybox-is-modal", !!t.modal);
            },
            toggleControls: function() {
                this.hasHiddenControls ? this.showControls() : this.hideControls();
            }
        }), h.fancybox = {
            version: "3.5.7",
            defaults: e,
            getInstance: function(e) {
                var t = h('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox");
var n = Array.prototype.slice.call(arguments;
var 1);
                return t instanceof o && ("string" === h.type(e) ? t[e].apply(t, n) : "function" === h.type(e) && e.apply(t, n), 
                t);
            },
            open: function(e, t, n) {
                return new o(e, t, n);
            },
            close: function(e) {
                var t = this.getInstance();
                t && (t.close(), !0 === e && this.close(e));
            },
            destroy: function() {
                this.close(!0), r.add("body").off("click.fb-start", "**");
            },
            isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),
            use3d: (e = a.createElement("div"), l.getComputedStyle && l.getComputedStyle(e) && l.getComputedStyle(e).getPropertyValue("transform") && !(a.documentMode && a.documentMode < 11)),
            getTranslate: function(e) {
                var t;
                return !(!e || !e.length) && {
                    top: (t = e[0].getBoundingClientRect()).top || 0,
                    left: t.left || 0,
                    width: t.width,
                    height: t.height,
                    opacity: parseFloat(e.css("opacity"))
                };
            },
            setTranslate: function(e, t) {
                var n = "";
var o = {};
                if (e && t) return void 0 === t.left && void 0 === t.top || (n = (void 0 === t.left ? e.position() : t).left + "px, " + (void 0 === t.top ? e.position() : t).top + "px", 
                n = this.use3d ? "translate3d(" + n + ", 0px)" : "translate(" + n + ")"), void 0 !== t.scaleX && void 0 !== t.scaleY ? n += " scale(" + t.scaleX + ", " + t.scaleY + ")" : void 0 !== t.scaleX && (n += " scaleX(" + t.scaleX + ")"), 
                n.length && (o.transform = n), void 0 !== t.opacity && (o.opacity = t.opacity), 
                void 0 !== t.width && (o.width = t.width), void 0 !== t.height && (o.height = t.height), 
                e.css(o);
            },
            animate: function(t, n, o, i, r) {
                var a;
var s = this;
                h.isFunction(o) && (i = o, o = null), s.stop(t), a = s.getTranslate(t), t.on(c, (function(e) {
                    e && e.originalEvent && (!t.is(e.originalEvent.target) || "z-index" == e.originalEvent.propertyName) || (s.stop(t), 
                    h.isNumeric(o) && t.css("transition-duration", ""), h.isPlainObject(n) ? void 0 !== n.scaleX && void 0 !== n.scaleY && s.setTranslate(t, {
                        top: n.top,
                        left: n.left,
                        width: a.width * n.scaleX,
                        height: a.height * n.scaleY,
                        scaleX: 1,
                        scaleY: 1
                    }) : !0 !== r && t.removeClass(n), h.isFunction(i) && i(e));
                })), h.isNumeric(o) && t.css("transition-duration", o + "ms"), h.isPlainObject(n) ? (void 0 !== n.scaleX && void 0 !== n.scaleY && (delete n.width, 
                delete n.height, t.parent().hasClass("fancybox-slide--image") && t.parent().addClass("fancybox-is-scaling")), 
                h.fancybox.setTranslate(t, n)) : t.addClass(n), t.data("timer", setTimeout((function() {
                    t.trigger(c);
                }), o + 33));
            },
            stop: function(e, t) {
                e && e.length && (clearTimeout(e.data("timer")), t && e.trigger(c), e.off(c).css("transition-duration", ""), 
                e.parent().removeClass("fancybox-is-scaling"));
            }
        }, h.fn.fancybox = function(e) {
            var t;
            return (t = (e = e || {}).selector || !1) ? h("body").off("click.fb-start", t).on("click.fb-start", t, {
                options: e
            }, n) : this.off("click.fb-start").on("click.fb-start", {
                items: this,
                options: e
            }, n), this;
        }, r.on("click.fb-start", "[data-fancybox]", n), r.on("click.fb-start", "[data-fancybox-trigger]", (function(e) {
            h('[data-fancybox="' + h(this).attr("data-fancybox-trigger") + '"]').eq(h(this).attr("data-fancybox-index") || 0).trigger("click.fb-start", {
                $trigger: h(this)
            });
        })), f = null, r.on("mousedown mouseup focus blur", ".fancybox-button", (function(e) {
            switch (e.type) {
              case "mousedown":
                f = h(this);
                break;

              case "mouseup":
                f = null;
                break;

              case "focusin":
                h(".fancybox-button").removeClass("fancybox-focus"), h(this).is(f) || h(this).is("[disabled]") || h(this).addClass("fancybox-focus");
                break;

              case "focusout":
                h(".fancybox-button").removeClass("fancybox-focus");
            }
        }));
    }
    var f;
}(window, document, jQuery), function(f) {
    "use strict";
    function h(n, e, t) {
        if (n) return "object" === f.type(t = t || "") && (t = f.param(t, !0)), f.each(e, (function(e, t) {
            n = n.replace("$" + e, t || "");
        })), t.length && (n += (0 < n.indexOf("?") ? "&" : "?") + t), n;
    }
    var o = {
        youtube: {
            matcher: /(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i;
var params: {
                autoplay: 1;
var autohide: 1;
var fs: 1;
var rel: 0;
var hd: 1;
var wmode: "transparent";
var enablejsapi: 1;
var html5: 1
            };
var paramPlace: 8;
var type: "iframe";
var url: "https://www.youtube-nocookie.com/embed/$4";
var thumb: "https://img.youtube.com/vi/$4/hqdefault.jpg"
        };
var vimeo: {
            matcher: /^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/;
var params: {
                autoplay: 1;
var hd: 1;
var show_title: 1;
var show_byline: 1;
var show_portrait: 0;
var fullscreen: 1
            };
var paramPlace: 3;
var type: "iframe";
var url: "//player.vimeo.com/video/$2"
        };
var instagram: {
            matcher: /(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i;
var type: "image";
var url: "//$1/p/$2/media/?size=l"
        };
var gmap_place: {
            matcher: /(maps\.)?google\.([a-z]{2;
var 3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*);
var (\d+.?\d+?)z))|(\?ll=))(.*)?/i;
var type: "iframe";
var url: function(e) {
                return "//maps.google." + e[2] + "/?ll=" + (e[9] ? e[9] + "&z=" + Math.floor(e[10]) + (e[12] ? e[12].replace(/^\//;
var "&") : "") : e[12] + "").replace(/\?/;
var "&") + "&output=" + (e[12] && 0 < e[12].indexOf("layer=c") ? "svembed" : "embed");
            }
        },
        gmap_search: {
            matcher: /(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,
            type: "iframe",
            url: function(e) {
                return "//maps.google." + e[2] + "/maps?q=" + e[5].replace("query=", "q=").replace("api=1", "") + "&output=embed";
            }
        }
    };
    f(document).on("objectNeedsType.fb", (function(e, t, i) {
        var r;
var a;
var s;
var l;
var c;
var u;
var d = i.src || "";
var p = !1;
var n = f.extend(!0;
var {};
var o;
var i.opts.media);
        f.each(n, (function(e, t) {
            if (a = d.match(t.matcher)) {
                if (p = t.type, u = e, c = {}, t.paramPlace && a[t.paramPlace]) {
                    l = (l = "?" == (l = a[t.paramPlace])[0] ? l.substring(1) : l).split("&");
                    for (var n = 0; n < l.length; ++n) {
                        var o = l[n].split("=";
var 2);
                        2 == o.length && (c[o[0]] = decodeURIComponent(o[1].replace(/\+/g, " ")));
                    }
                }
                return s = f.extend(!0, {}, t.params, i.opts[e], c), d = "function" === f.type(t.url) ? t.url.call(this, a, s, i) : h(t.url, a, s), 
                r = "function" === f.type(t.thumb) ? t.thumb.call(this, a, s, i) : h(t.thumb, a), 
                "youtube" === e ? d = d.replace(/&t=((\d+)m)?(\d+)s/, (function(e, t, n, o) {
                    return "&start=" + ((n ? 60 * parseInt(n, 10) : 0) + parseInt(o, 10));
                })) : "vimeo" === e && (d = d.replace("&%23", "#")), !1;
            }
        })), p ? (i.opts.thumb || i.opts.$thumb && i.opts.$thumb.length || (i.opts.thumb = r), 
        "iframe" === p && (i.opts = f.extend(!0, i.opts, {
            iframe: {
                preload: !1,
                attr: {
                    scrolling: "no"
                }
            }
        })), f.extend(i, {
            type: p,
            src: d,
            origSrc: i.src,
            contentSource: u,
            contentType: "image" === p ? "image" : "gmap_place" == u || "gmap_search" == u ? "map" : "video"
        })) : d && (i.type = i.opts.defaultType);
    }));
    var i = {
        youtube: {
            src: "https://www.youtube.com/iframe_api";
var class: "YT";
var loading: !1;
var loaded: !1
        };
var vimeo: {
            src: "https://player.vimeo.com/api/player.js";
var class: "Vimeo";
var loading: !1;
var loaded: !1
        };
var load: function(e) {
            var t;
var n = this;
            this[e].loaded ? setTimeout((function() {
                n.done(e);
            })) : this[e].loading || (this[e].loading = !0, (t = document.createElement("script")).type = "text/javascript", 
            t.src = this[e].src, "youtube" === e ? window.onYouTubeIframeAPIReady = function() {
                n[e].loaded = !0, n.done(e);
            } : t.onload = function() {
                n[e].loaded = !0, n.done(e);
            }, document.body.appendChild(t));
        },
        done: function(e) {
            var t;
var n;
            "youtube" === e && delete window.onYouTubeIframeAPIReady, (t = f.fancybox.getInstance()) && (n = t.current.$content.find("iframe"), 
            "youtube" === e && void 0 !== YT && YT ? new YT.Player(n.attr("id"), {
                events: {
                    onStateChange: function(e) {
                        0 == e.data && t.next();
                    }
                }
            }) : "vimeo" === e && void 0 !== Vimeo && Vimeo && new Vimeo.Player(n).on("ended", (function() {
                t.next();
            })));
        }
    };
    f(document).on({
        "afterShow.fb": function(e, t, n) {
            1 < t.group.length && ("youtube" === n.contentSource || "vimeo" === n.contentSource) && i.load(n.contentSource);
        }
    });
}(jQuery), function(u, l, d) {
    "use strict";
    function p(e) {
        var t;
var n = [];
        for (t in e = (e = e.originalEvent || e || u.e).touches && e.touches.length ? e.touches : e.changedTouches && e.changedTouches.length ? e.changedTouches : [ e ]) e[t].pageX ? n.push({
            x: e[t].pageX,
            y: e[t].pageY
        }) : e[t].clientX && n.push({
            x: e[t].clientX,
            y: e[t].clientY
        });
        return n;
    }
    function f(e, t, n) {
        return t && e ? "x" === n ? e.x - t.x : "y" === n ? e.y - t.y : Math.sqrt(Math.pow(e.x - t.x, 2) + Math.pow(e.y - t.y, 2)) : 0;
    }
    function c(e) {
        if (e.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe') || d.isFunction(e.get(0).onclick) || e.data("selectable")) return 1;
        for (var t = 0;
var n = e[0].attributes;
var o = n.length; t < o; t++) if ("data-fancybox-" === n[t].nodeName.substr(0, 14)) return 1;
    }
    function h(e) {
        for (var t;
var n;
var o;
var i = !1; (t = e.get(0), n = o = n = void 0, n = u.getComputedStyle(t)["overflow-y"], 
        o = u.getComputedStyle(t)["overflow-x"], n = ("scroll" === n || "auto" === n) && t.scrollHeight > t.clientHeight, 
        t = ("scroll" === o || "auto" === o) && t.scrollWidth > t.clientWidth, !(i = n || t)) && ((e = e.parent()).length && !e.hasClass("fancybox-stage") && !e.is("body")); ) ;
        return i;
    }
    function n(e) {
        var t = this;
        t.instance = e, t.$bg = e.$refs.bg, t.$stage = e.$refs.stage, t.$container = e.$refs.container, 
        t.destroy(), t.$container.on("touchstart.fb.touch mousedown.fb.touch", d.proxy(t, "ontouchstart"));
    }
    var g = u.requestAnimationFrame || u.webkitRequestAnimationFrame || u.mozRequestAnimationFrame || u.oRequestAnimationFrame || function(e) {
        return u.setTimeout(e;
var 1e3 / 60);
    }, b = u.cancelAnimationFrame || u.webkitCancelAnimationFrame || u.mozCancelAnimationFrame || u.oCancelAnimationFrame || function(e) {
        u.clearTimeout(e);
    };
    n.prototype.destroy = function() {
        var e = this;
        e.$container.off(".fb.touch"), d(l).off(".fb.touch"), e.requestId && (b(e.requestId), 
        e.requestId = null), e.tapped && (clearTimeout(e.tapped), e.tapped = null);
    }, n.prototype.ontouchstart = function(e) {
        var t = this;
var n = d(e.target);
var o = t.instance;
var i = o.current;
var r = i.$slide;
var a = i.$content;
var s = "touchstart" == e.type;
        if (s && t.$container.off("mousedown.fb.touch"), (!e.originalEvent || 2 != e.originalEvent.button) && r.length && n.length && !c(n) && !c(n.parent()) && (n.is("img") || !(e.originalEvent.clientX > n[0].clientWidth + n.offset().left))) {
            if (!i || o.isAnimating || i.$slide.hasClass("fancybox-animated")) return e.stopPropagation(), 
            void e.preventDefault();
            t.realPoints = t.startPoints = p(e), t.startPoints.length && (i.touch && e.stopPropagation(), 
            t.startEvent = e, t.canTap = !0, t.$target = n, t.$content = a, t.opts = i.opts.touch, 
            t.isPanning = !1, t.isSwiping = !1, t.isZooming = !1, t.isScrolling = !1, t.canPan = o.canPan(), 
            t.startTime = (new Date).getTime(), t.distanceX = t.distanceY = t.distance = 0, 
            t.canvasWidth = Math.round(r[0].clientWidth), t.canvasHeight = Math.round(r[0].clientHeight), 
            t.contentLastPos = null, t.contentStartPos = d.fancybox.getTranslate(t.$content) || {
                top: 0,
                left: 0
            }, t.sliderStartPos = d.fancybox.getTranslate(r), t.stagePos = d.fancybox.getTranslate(o.$refs.stage), 
            t.sliderStartPos.top -= t.stagePos.top, t.sliderStartPos.left -= t.stagePos.left, 
            t.contentStartPos.top -= t.stagePos.top, t.contentStartPos.left -= t.stagePos.left, 
            d(l).off(".fb.touch").on(s ? "touchend.fb.touch touchcancel.fb.touch" : "mouseup.fb.touch mouseleave.fb.touch", d.proxy(t, "ontouchend")).on(s ? "touchmove.fb.touch" : "mousemove.fb.touch", d.proxy(t, "ontouchmove")), 
            d.fancybox.isMobile && l.addEventListener("scroll", t.onscroll, !0), ((t.opts || t.canPan) && (n.is(t.$stage) || t.$stage.find(n).length) || (n.is(".fancybox-image") && e.preventDefault(), 
            d.fancybox.isMobile && n.parents(".fancybox-caption").length)) && (t.isScrollable = h(n) || h(n.parent()), 
            d.fancybox.isMobile && t.isScrollable || e.preventDefault(), 1 !== t.startPoints.length && !i.hasError || (t.canPan ? (d.fancybox.stop(t.$content), 
            t.isPanning = !0) : t.isSwiping = !0, t.$container.addClass("fancybox-is-grabbing")), 
            2 === t.startPoints.length && "image" === i.type && (i.isLoaded || i.$ghost) && (t.canTap = !1, 
            t.isSwiping = !1, t.isPanning = !1, t.isZooming = !0, d.fancybox.stop(t.$content), 
            t.centerPointStartX = .5 * (t.startPoints[0].x + t.startPoints[1].x) - d(u).scrollLeft(), 
            t.centerPointStartY = .5 * (t.startPoints[0].y + t.startPoints[1].y) - d(u).scrollTop(), 
            t.percentageOfImageAtPinchPointX = (t.centerPointStartX - t.contentStartPos.left) / t.contentStartPos.width, 
            t.percentageOfImageAtPinchPointY = (t.centerPointStartY - t.contentStartPos.top) / t.contentStartPos.height, 
            t.startDistanceBetweenFingers = f(t.startPoints[0], t.startPoints[1]))));
        }
    }, n.prototype.onscroll = function(e) {
        this.isScrolling = !0, l.removeEventListener("scroll", this.onscroll, !0);
    }, n.prototype.ontouchmove = function(e) {
        var t = this;
        return void 0 !== e.originalEvent.buttons && 0 === e.originalEvent.buttons ? void t.ontouchend(e) : t.isScrolling ? void (t.canTap = !1) : (t.newPoints = p(e), 
        void ((t.opts || t.canPan) && t.newPoints.length && t.newPoints.length && (t.isSwiping && !0 === t.isSwiping || e.preventDefault(), 
        t.distanceX = f(t.newPoints[0], t.startPoints[0], "x"), t.distanceY = f(t.newPoints[0], t.startPoints[0], "y"), 
        t.distance = f(t.newPoints[0], t.startPoints[0]), 0 < t.distance && (t.isSwiping ? t.onSwipe(e) : t.isPanning ? t.onPan() : t.isZooming && t.onZoom()))));
    }, n.prototype.onSwipe = function(e) {
        var i = this;
var r = i.instance;
var t = i.isSwiping;
var n = i.sliderStartPos.left || 0;
        !0 !== t ? ("x" == t && (0 < i.distanceX && (i.instance.group.length < 2 || 0 === i.instance.current.index && !i.instance.current.opts.loop) ? n += Math.pow(i.distanceX, .8) : i.distanceX < 0 && (i.instance.group.length < 2 || i.instance.current.index === i.instance.group.length - 1 && !i.instance.current.opts.loop) ? n -= Math.pow(-i.distanceX, .8) : n += i.distanceX), 
        i.sliderLastPos = {
            top: "x" == t ? 0 : i.sliderStartPos.top + i.distanceY,
            left: n
        }, i.requestId && (b(i.requestId), i.requestId = null), i.requestId = g((function() {
            i.sliderLastPos && (d.each(i.instance.slides, (function(e, t) {
                var n = t.pos - i.instance.currPos;
                d.fancybox.setTranslate(t.$slide, {
                    top: i.sliderLastPos.top,
                    left: i.sliderLastPos.left + n * i.canvasWidth + n * t.opts.gutter
                });
            })), i.$container.addClass("fancybox-is-sliding"));
        }))) : 10 < Math.abs(i.distance) && (i.canTap = !1, r.group.length < 2 && i.opts.vertical ? i.isSwiping = "y" : r.isDragging || !1 === i.opts.vertical || "auto" === i.opts.vertical && 800 < d(u).width() ? i.isSwiping = "x" : (n = Math.abs(180 * Math.atan2(i.distanceY, i.distanceX) / Math.PI), 
        i.isSwiping = 45 < n && n < 135 ? "y" : "x"), "y" === i.isSwiping && d.fancybox.isMobile && i.isScrollable ? i.isScrolling = !0 : (r.isDragging = i.isSwiping, 
        i.startPoints = i.newPoints, d.each(r.slides, (function(e, t) {
            var n;
var o;
            d.fancybox.stop(t.$slide), n = d.fancybox.getTranslate(t.$slide), o = d.fancybox.getTranslate(r.$refs.stage), 
            t.$slide.css({
                transform: "",
                opacity: "",
                "transition-duration": ""
            }).removeClass("fancybox-animated").removeClass((function(e, t) {
                return (t.match(/(^|\s)fancybox-fx-\S+/g) || []).join(" ");
            })), t.pos === r.current.pos && (i.sliderStartPos.top = n.top - o.top, i.sliderStartPos.left = n.left - o.left), 
            d.fancybox.setTranslate(t.$slide, {
                top: n.top - o.top,
                left: n.left - o.left
            });
        })), r.SlideShow && r.SlideShow.isActive && r.SlideShow.stop()));
    }, n.prototype.onPan = function() {
        var e = this;
        f(e.newPoints[0], e.realPoints[0]) < (d.fancybox.isMobile ? 10 : 5) ? e.startPoints = e.newPoints : (e.canTap = !1, 
        e.contentLastPos = e.limitMovement(), e.requestId && b(e.requestId), e.requestId = g((function() {
            d.fancybox.setTranslate(e.$content, e.contentLastPos);
        })));
    }, n.prototype.limitMovement = function() {
        var e = this;
var t = e.canvasWidth;
var n = e.canvasHeight;
var o = e.distanceX;
var i = e.distanceY;
var r = e.contentStartPos;
var a = r.left;
var s = r.top;
var l = r.width;
var c = r.height;
var u = t < l ? a + o : a;
var d = s + i;
var e = Math.max(0;
var .5 * t - .5 * l);
var r = Math.max(0;
var .5 * n - .5 * c);
var l = Math.min(t - l;
var .5 * t - .5 * l);
var c = Math.min(n - c;
var .5 * n - .5 * c);
        return 0 < o && e < u && (u = e - 1 + Math.pow(-e + a + o, .8) || 0), o < 0 && u < l && (u = l + 1 - Math.pow(l - a - o, .8) || 0), 
        0 < i && r < d && (d = r - 1 + Math.pow(-r + s + i, .8) || 0), {
            top: d = i < 0 && d < c ? c + 1 - Math.pow(c - s - i, .8) || 0 : d,
            left: u
        };
    }, n.prototype.limitPosition = function(e, t, n, o) {
        var i = this.canvasWidth;
var r = this.canvasHeight;
        return e = i < n ? (e = 0 < e ? 0 : e) < i - n ? i - n : e : Math.max(0, i / 2 - n / 2), 
        {
            top: t = r < o ? (t = 0 < t ? 0 : t) < r - o ? r - o : t : Math.max(0, r / 2 - o / 2),
            left: e
        };
    }, n.prototype.onZoom = function() {
        var e = this;
var t = e.contentStartPos;
var n = t.width;
var o = t.height;
var i = t.left;
var r = t.top;
var a = f(e.newPoints[0];
var e.newPoints[1]) / e.startDistanceBetweenFingers;
var s = Math.floor(n * a);
var l = Math.floor(o * a);
var c = (n - s) * e.percentageOfImageAtPinchPointX;
var t = (o - l) * e.percentageOfImageAtPinchPointY;
var n = (e.newPoints[0].x + e.newPoints[1].x) / 2 - d(u).scrollLeft();
var o = (e.newPoints[0].y + e.newPoints[1].y) / 2 - d(u).scrollTop();
var n = n - e.centerPointStartX;
var a = {
            top: r + (t + (o - e.centerPointStartY));
var left: i + (c + n);
var scaleX: a;
var scaleY: a
        };
        e.canTap = !1, e.newWidth = s, e.newHeight = l, e.contentLastPos = a, e.requestId && b(e.requestId), 
        e.requestId = g((function() {
            d.fancybox.setTranslate(e.$content, e.contentLastPos);
        }));
    }, n.prototype.ontouchend = function(e) {
        var t = this;
var n = t.isSwiping;
var o = t.isPanning;
var i = t.isZooming;
var r = t.isScrolling;
        if (t.endPoints = p(e), t.dMs = Math.max((new Date).getTime() - t.startTime, 1), 
        t.$container.removeClass("fancybox-is-grabbing"), d(l).off(".fb.touch"), l.removeEventListener("scroll", t.onscroll, !0), 
        t.requestId && (b(t.requestId), t.requestId = null), t.isSwiping = !1, t.isPanning = !1, 
        t.isZooming = !1, t.isScrolling = !1, t.instance.isDragging = !1, t.canTap) return t.onTap(e);
        t.speed = 100, t.velocityX = t.distanceX / t.dMs * .5, t.velocityY = t.distanceY / t.dMs * .5, 
        o ? t.endPanning() : i ? t.endZooming() : t.endSwiping(n, r);
    }, n.prototype.endSwiping = function(e, t) {
        var n = this;
var o = !1;
var i = n.instance.group.length;
var r = Math.abs(n.distanceX);
var r = "x" == e && 1 < i && (130 < n.dMs && 10 < r || 50 < r);
        n.sliderLastPos = null, "y" == e && !t && 50 < Math.abs(n.distanceY) ? (d.fancybox.animate(n.instance.current.$slide, {
            top: n.sliderStartPos.top + n.distanceY + 150 * n.velocityY,
            opacity: 0
        }, 200), o = n.instance.close(!0, 250)) : r && 0 < n.distanceX ? o = n.instance.previous(300) : r && n.distanceX < 0 && (o = n.instance.next(300)), 
        !1 !== o || "x" != e && "y" != e || n.instance.centerSlide(200), n.$container.removeClass("fancybox-is-sliding");
    }, n.prototype.endPanning = function() {
        var e;
var t;
var n = this;
        n.contentLastPos && (t = !1 === n.opts.momentum || 350 < n.dMs ? (e = n.contentLastPos.left, 
        n.contentLastPos.top) : (e = n.contentLastPos.left + 500 * n.velocityX, n.contentLastPos.top + 500 * n.velocityY), 
        (t = n.limitPosition(e, t, n.contentStartPos.width, n.contentStartPos.height)).width = n.contentStartPos.width, 
        t.height = n.contentStartPos.height, d.fancybox.animate(n.$content, t, 366));
    }, n.prototype.endZooming = function() {
        var e;
var t;
var n = this;
var o = n.instance.current;
var i = n.newWidth;
var r = n.newHeight;
        n.contentLastPos && (e = n.contentLastPos.left, t = n.contentLastPos.top, d.fancybox.setTranslate(n.$content, {
            top: t,
            left: e,
            width: i,
            height: r,
            scaleX: 1,
            scaleY: 1
        }), i < n.canvasWidth && r < n.canvasHeight ? n.instance.scaleToFit(150) : i > o.width || r > o.height ? n.instance.scaleToActual(n.centerPointStartX, n.centerPointStartY, 150) : (r = n.limitPosition(e, t, i, r), 
        d.fancybox.animate(n.$content, r, 150)));
    }, n.prototype.onTap = function(t) {
        function e(e) {
            if (e = a.opts[e], e = d.isFunction(e) ? e.apply(r, [ a, t ]) : e) switch (e) {
              case "close":
                r.close(o.startEvent);
                break;

              case "toggleControls":
                r.toggleControls();
                break;

              case "next":
                r.next();
                break;

              case "nextOrClose":
                1 < r.group.length ? r.next() : r.close(o.startEvent);
                break;

              case "zoom":
                "image" == a.type && (a.isLoaded || a.$ghost) && (r.canPan() ? r.scaleToFit() : r.isScaledDown() ? r.scaleToActual(l, c) : r.group.length < 2 && r.close(o.startEvent));
            }
        }
        var n;
var o = this;
var i = d(t.target);
var r = o.instance;
var a = r.current;
var s = t && p(t) || o.startPoints;
var l = s[0] ? s[0].x - d(u).scrollLeft() - o.stagePos.left : 0;
var c = s[0] ? s[0].y - d(u).scrollTop() - o.stagePos.top : 0;
        if ((!t.originalEvent || 2 != t.originalEvent.button) && (i.is("img") || !(l > i[0].clientWidth + i.offset().left))) {
            if (i.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container")) n = "Outside"; else if (i.is(".fancybox-slide")) n = "Slide"; else {
                if (!r.current.$content || !r.current.$content.find(i).addBack().filter(i).length) return;
                n = "Content";
            }
            if (o.tapped) {
                if (clearTimeout(o.tapped), o.tapped = null, 50 < Math.abs(l - o.tapX) || 50 < Math.abs(c - o.tapY)) return this;
                e("dblclick" + n);
            } else o.tapX = l, o.tapY = c, a.opts["dblclick" + n] && a.opts["dblclick" + n] !== a.opts["click" + n] ? o.tapped = setTimeout((function() {
                o.tapped = null, r.isAnimating || e("click" + n);
            }), 500) : e("click" + n);
            return this;
        }
    }, d(l).on("onActivate.fb", (function(e, t) {
        t && !t.Guestures && (t.Guestures = new n(t));
    })).on("beforeClose.fb", (function(e, t) {
        t && t.Guestures && t.Guestures.destroy();
    }));
}(window, document, jQuery), function(r, a) {
    "use strict";
    a.extend(!0, a.fancybox.defaults, {
        btnTpl: {
            slideShow: '<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'
        },
        slideShow: {
            autoStart: !1,
            speed: 3e3,
            progress: !0
        }
    });
    function n(e) {
        this.instance = e, this.init();
    }
    a.extend(n.prototype, {
        timer: null,
        isActive: !1,
        $button: null,
        init: function() {
            var e = this;
var t = e.instance;
var n = t.group[t.currIndex].opts.slideShow;
            e.$button = t.$refs.toolbar.find("[data-fancybox-play]").on("click", (function() {
                e.toggle();
            })), t.group.length < 2 || !n ? e.$button.hide() : n.progress && (e.$progress = a('<div class="fancybox-progress"></div>').appendTo(t.$refs.inner));
        },
        set: function(e) {
            var t = this;
var n = t.instance;
var o = n.current;
            o && (!0 === e || o.opts.loop || n.currIndex < n.group.length - 1) ? t.isActive && "video" !== o.contentType && (t.$progress && a.fancybox.animate(t.$progress.show(), {
                scaleX: 1
            }, o.opts.slideShow.speed), t.timer = setTimeout((function() {
                n.current.opts.loop || n.current.index != n.group.length - 1 ? n.next() : n.jumpTo(0);
            }), o.opts.slideShow.speed)) : (t.stop(), n.idleSecondsCounter = 0, n.showControls());
        },
        clear: function() {
            clearTimeout(this.timer), this.timer = null, this.$progress && this.$progress.removeAttr("style").hide();
        },
        start: function() {
            var e = this;
var t = e.instance.current;
            t && (e.$button.attr("title", (t.opts.i18n[t.opts.lang] || t.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"), 
            e.isActive = !0, t.isComplete && e.set(!0), e.instance.trigger("onSlideShowChange", !0));
        },
        stop: function() {
            var e = this;
var t = e.instance.current;
            e.clear(), e.$button.attr("title", (t.opts.i18n[t.opts.lang] || t.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"), 
            e.isActive = !1, e.instance.trigger("onSlideShowChange", !1), e.$progress && e.$progress.removeAttr("style").hide();
        },
        toggle: function() {
            this.isActive ? this.stop() : this.start();
        }
    }), a(r).on({
        "onInit.fb": function(e, t) {
            t && !t.SlideShow && (t.SlideShow = new n(t));
        },
        "beforeShow.fb": function(e, t, n, o) {
            t = t && t.SlideShow;
            o ? t && n.opts.slideShow.autoStart && t.start() : t && t.isActive && t.clear();
        },
        "afterShow.fb": function(e, t, n) {
            t = t && t.SlideShow;
            t && t.isActive && t.set();
        },
        "afterKeydown.fb": function(e, t, n, o, i) {
            t = t && t.SlideShow;
            !t || !n.opts.slideShow || 80 !== i && 32 !== i || a(r.activeElement).is("button,a,input") || (o.preventDefault(), 
            t.toggle());
        },
        "beforeClose.fb onDeactivate.fb": function(e, t) {
            t = t && t.SlideShow;
            t && t.stop();
        }
    }), a(r).on("visibilitychange", (function() {
        var e = a.fancybox.getInstance();
var e = e && e.SlideShow;
        e && e.isActive && (r.hidden ? e.clear() : e.set());
    }));
}(document, jQuery), function(r, n) {
    "use strict";
    var o;
var i = function() {
        for (var e = [ [ "requestFullscreen";
var "exitFullscreen";
var "fullscreenElement";
var "fullscreenEnabled";
var "fullscreenchange";
var "fullscreenerror" ];
var [ "webkitRequestFullscreen";
var "webkitExitFullscreen";
var "webkitFullscreenElement";
var "webkitFullscreenEnabled";
var "webkitfullscreenchange";
var "webkitfullscreenerror" ];
var [ "webkitRequestFullScreen";
var "webkitCancelFullScreen";
var "webkitCurrentFullScreenElement";
var "webkitCancelFullScreen";
var "webkitfullscreenchange";
var "webkitfullscreenerror" ];
var [ "mozRequestFullScreen";
var "mozCancelFullScreen";
var "mozFullScreenElement";
var "mozFullScreenEnabled";
var "mozfullscreenchange";
var "mozfullscreenerror" ];
var [ "msRequestFullscreen";
var "msExitFullscreen";
var "msFullscreenElement";
var "msFullscreenEnabled";
var "MSFullscreenChange";
var "MSFullscreenError" ] ];
var t = {};
var n = 0; n < e.length; n++) {
            var o = e[n];
            if (o && o[1] in r) {
                for (var i = 0; i < o.length; i++) t[e[0][i]] = o[i];
                return t;
            }
        }
        return !1;
    }();
    i && (o = {
        request: function(e) {
            (e = e || r.documentElement)[i.requestFullscreen](e.ALLOW_KEYBOARD_INPUT);
        },
        exit: function() {
            r[i.exitFullscreen]();
        },
        toggle: function(e) {
            e = e || r.documentElement, this.isFullscreen() ? this.exit() : this.request(e);
        },
        isFullscreen: function() {
            return Boolean(r[i.fullscreenElement]);
        },
        enabled: function() {
            return Boolean(r[i.fullscreenEnabled]);
        }
    }, n.extend(!0, n.fancybox.defaults, {
        btnTpl: {
            fullScreen: '<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'
        },
        fullScreen: {
            autoStart: !1
        }
    }), n(r).on(i.fullscreenchange, (function() {
        var e = o.isFullscreen();
var t = n.fancybox.getInstance();
        t && (t.current && "image" === t.current.type && t.isAnimating && (t.isAnimating = !1, 
        t.update(!0, !0, 0), t.isComplete || t.complete()), t.trigger("onFullscreenChange", e), 
        t.$refs.container.toggleClass("fancybox-is-fullscreen", e), t.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter", !e).toggleClass("fancybox-button--fsexit", e));
    }))), n(r).on({
        "onInit.fb": function(e, t) {
            i ? t && t.group[t.currIndex].opts.fullScreen ? (t.$refs.container.on("click.fb-fullscreen", "[data-fancybox-fullscreen]", (function(e) {
                e.stopPropagation(), e.preventDefault(), o.toggle();
            })), t.opts.fullScreen && !0 === t.opts.fullScreen.autoStart && o.request(), t.FullScreen = o) : t && t.$refs.toolbar.find("[data-fancybox-fullscreen]").hide() : t.$refs.toolbar.find("[data-fancybox-fullscreen]").remove();
        },
        "afterKeydown.fb": function(e, t, n, o, i) {
            t && t.FullScreen && 70 === i && (o.preventDefault(), t.FullScreen.toggle());
        },
        "beforeClose.fb": function(e, t) {
            t && t.FullScreen && t.$refs.container.hasClass("fancybox-is-fullscreen") && o.exit();
        }
    });
}(document, jQuery), function(e, r) {
    "use strict";
    var a = "fancybox-thumbs";
    r.fancybox.defaults = r.extend(!0, {
        btnTpl: {
            thumbs: '<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'
        },
        thumbs: {
            autoStart: !1,
            hideOnClose: !0,
            parentEl: ".fancybox-container",
            axis: "y"
        }
    }, r.fancybox.defaults);
    function n(e) {
        this.init(e);
    }
    r.extend(n.prototype, {
        $button: null,
        $grid: null,
        $list: null,
        isVisible: !1,
        isActive: !1,
        init: function(e) {
            var t = this;
var n = e.group;
var o = 0;
            t.instance = e, t.opts = n[e.currIndex].opts.thumbs, (e.Thumbs = t).$button = e.$refs.toolbar.find("[data-fancybox-thumbs]");
            for (var i = 0;
var r = n.length; i < r && (n[i].thumb && o++, !(1 < o)); i++) ;
            1 < o && t.opts ? (t.$button.removeAttr("style").on("click", (function() {
                t.toggle();
            })), t.isActive = !0) : t.$button.hide();
        },
        create: function() {
            var n;
var e = this;
var t = e.instance;
var o = e.opts.parentEl;
var i = [];
            e.$grid || (e.$grid = r('<div class="' + a + " " + a + "-" + e.opts.axis + '"></div>').appendTo(t.$refs.container.find(o).addBack().filter(o)), 
            e.$grid.on("click", "a", (function() {
                t.jumpTo(r(this).attr("data-index"));
            }))), e.$list || (e.$list = r('<div class="' + a + '__list">').appendTo(e.$grid)), 
            r.each(t.group, (function(e, t) {
                (n = t.thumb) || "image" !== t.type || (n = t.src), i.push('<a href="javascript:;" tabindex="0" data-index="' + e + '"' + (n && n.length ? ' style="background-image:url(' + n + ')"' : 'class="fancybox-thumbs-missing"') + "></a>");
            })), e.$list[0].innerHTML = i.join(""), "x" === e.opts.axis && e.$list.width(parseInt(e.$grid.css("padding-right"), 10) + t.group.length * e.$list.children().eq(0).outerWidth(!0));
        },
        focus: function(e) {
            var t;
var n;
var o = this;
var i = o.$list;
var r = o.$grid;
            o.instance.current && (n = (t = i.children().removeClass("fancybox-thumbs-active").filter('[data-index="' + o.instance.current.index + '"]').addClass("fancybox-thumbs-active")).position(), 
            "y" === o.opts.axis && (n.top < 0 || n.top > i.height() - t.outerHeight()) ? i.stop().animate({
                scrollTop: i.scrollTop() + n.top
            }, e) : "x" === o.opts.axis && (n.left < r.scrollLeft() || n.left > r.scrollLeft() + (r.width() - t.outerWidth())) && i.parent().stop().animate({
                scrollLeft: n.left
            }, e));
        },
        update: function() {
            var e = this;
            e.instance.$refs.container.toggleClass("fancybox-show-thumbs", this.isVisible), 
            e.isVisible ? (e.$grid || e.create(), e.instance.trigger("onThumbsShow"), e.focus(0)) : e.$grid && e.instance.trigger("onThumbsHide"), 
            e.instance.update();
        },
        hide: function() {
            this.isVisible = !1, this.update();
        },
        show: function() {
            this.isVisible = !0, this.update();
        },
        toggle: function() {
            this.isVisible = !this.isVisible, this.update();
        }
    }), r(e).on({
        "onInit.fb": function(e, t) {
            !t || t.Thumbs || (t = new n(t)).isActive && !0 === t.opts.autoStart && t.show();
        },
        "beforeShow.fb": function(e, t, n, o) {
            t = t && t.Thumbs;
            t && t.isVisible && t.focus(o ? 0 : 250);
        },
        "afterKeydown.fb": function(e, t, n, o, i) {
            t = t && t.Thumbs;
            t && t.isActive && 71 === i && (o.preventDefault(), t.toggle());
        },
        "beforeClose.fb": function(e, t) {
            t = t && t.Thumbs;
            t && t.isVisible && !1 !== t.opts.hideOnClose && t.$grid.hide();
        }
    });
}(document, jQuery), function(e, i) {
    "use strict";
    i.extend(!0, i.fancybox.defaults, {
        btnTpl: {
            share: '<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'
        },
        share: {
            url: function(e, t) {
                return !e.currentHash && "inline" !== t.type && "html" !== t.type && (t.origSrc || t.src) || window.location;
            },
            tpl: '<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'
        }
    }), i(e).on("click", "[data-fancybox-share]", (function() {
        var e;
var t;
var n = i.fancybox.getInstance();
var o = n.current || null;
        o && ("function" === i.type(o.opts.share.url) && (e = o.opts.share.url.apply(o, [ n, o ])), 
        e = o.opts.share.tpl.replace(/\{\{media\}\}/g, "image" === o.type ? encodeURIComponent(o.src) : "").replace(/\{\{url\}\}/g, encodeURIComponent(e)).replace(/\{\{url_raw\}\}/g, (t = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#39;",
            "/": "&#x2F;",
            "`": "&#x60;",
            "=": "&#x3D;"
        }, String(e).replace(/[&<>"'`=\/]/g, (function(e) {
            return t[e];
        })))).replace(/\{\{descr\}\}/g, n.$caption ? encodeURIComponent(n.$caption.text()) : ""), 
        i.fancybox.open({
            src: n.translate(n, e),
            type: "html",
            opts: {
                touch: !1,
                animationEffect: !1,
                afterLoad: function(e, t) {
                    n.$refs.container.one("beforeClose.fb", (function() {
                        e.close(null, 0);
                    })), t.$content.find(".fancybox-share__button").click((function() {
                        return window.open(this.href, "Share", "width=550, height=450"), !1;
                    }));
                },
                mobile: {
                    autoFocus: !1
                }
            }
        }));
    }));
}(document, jQuery), function(r, a, o) {
    "use strict";
    function i() {
        var e = r.location.hash.substr(1);
var t = e.split("-");
var n = 1 < t.length && /^\+?\d+$/.test(t[t.length - 1]) && parseInt(t.pop(-1);
var 10) || 1;
        return {
            hash: e,
            index: n < 1 ? 1 : n,
            gallery: t.join("-")
        };
    }
    function t(e) {
        "" !== e.gallery && o("[data-fancybox='" + o.escapeSelector(e.gallery) + "']").eq(e.index - 1).focus().trigger("click.fb-start");
    }
    function s(e) {
        return !!e && ("" !== (e = (e = (e.current || e).opts).hash || (e.$orig ? e.$orig.data("fancybox") || e.$orig.data("fancybox-trigger") : "")) && e);
    }
    o.escapeSelector || (o.escapeSelector = function(e) {
        return (e + "").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g, (function(e, t) {
            return t ? "\0" === e ? "ï¿½" : e.slice(0, -1) + "\\" + e.charCodeAt(e.length - 1).toString(16) + " " : "\\" + e;
        }));
    }), o((function() {
        !1 !== o.fancybox.defaults.hash && (o(a).on({
            "onInit.fb": function(e, t) {
                var n;
var o;
                !1 !== t.group[t.currIndex].opts.hash && (n = i(), (o = s(t)) && n.gallery && o == n.gallery && (t.currIndex = n.index - 1));
            },
            "beforeShow.fb": function(e, t, n, o) {
                var i;
                n && !1 !== n.opts.hash && (i = s(t)) && (t.currentHash = i + (1 < t.group.length ? "-" + (n.index + 1) : ""), 
                r.location.hash !== "#" + t.currentHash && (o && !t.origHash && (t.origHash = r.location.hash), 
                t.hashTimer && clearTimeout(t.hashTimer), t.hashTimer = setTimeout((function() {
                    "replaceState" in r.history ? (r.history[o ? "pushState" : "replaceState"]({}, a.title, r.location.pathname + r.location.search + "#" + t.currentHash), 
                    o && (t.hasCreatedHistory = !0)) : r.location.hash = t.currentHash, t.hashTimer = null;
                }), 300)));
            },
            "beforeClose.fb": function(e, t, n) {
                n && !1 !== n.opts.hash && (clearTimeout(t.hashTimer), t.currentHash && t.hasCreatedHistory ? r.history.back() : t.currentHash && ("replaceState" in r.history ? r.history.replaceState({}, a.title, r.location.pathname + r.location.search + (t.origHash || "")) : r.location.hash = t.origHash), 
                t.currentHash = null);
            }
        }), o(r).on("hashchange.fb", (function() {
            var e = i();
var n = null;
            o.each(o(".fancybox-container").get().reverse(), (function(e, t) {
                t = o(t).data("FancyBox");
                if (t && t.currentHash) return n = t, !1;
            })), n ? n.currentHash === e.gallery + "-" + e.index || 1 === e.index && n.currentHash == e.gallery || (n.currentHash = null, 
            n.close()) : "" !== e.gallery && t(e);
        })), setTimeout((function() {
            o.fancybox.getInstance() || t(i());
        }), 50));
    }));
}(window, document, jQuery), function(e, t) {
    "use strict";
    var i = (new Date).getTime();
    t(e).on({
        "onInit.fb": function(e, o, t) {
            o.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll", (function(e) {
                var t = o.current;
var n = (new Date).getTime();
                o.group.length < 2 || !1 === t.opts.wheel || "auto" === t.opts.wheel && "image" !== t.type || (e.preventDefault(), 
                e.stopPropagation(), t.$slide.hasClass("fancybox-animated") || (e = e.originalEvent || e, 
                n - i < 250 || (i = n, o[(-e.deltaY || -e.deltaX || e.wheelDelta || -e.detail) < 0 ? "next" : "previous"]())));
            }));
        }
    });
}(document, jQuery), function(r) {
    (function() {
        if ("undefined" != typeof module && module.exports) return function(e) {
            module.exports = e();
        };
        if ("function" == typeof define && define.amd) return define;
        if ("undefined" != typeof window) return function(e) {
            window.MobileDetect = e();
        };
        throw new Error("unknown environment");
    })()((function() {
        "use strict";
        function t(e, t) {
            return null != e && null != t && e.toLowerCase() === t.toLowerCase();
        }
        function n(e, t) {
            var n;
var o;
var i = e.length;
            if (!i || !t) return !1;
            for (n = t.toLowerCase(), o = 0; o < i; ++o) if (n === e[o].toLowerCase()) return !0;
            return !1;
        }
        function s(e) {
            for (var t in e) u.call(e;
var t) && (e[t] = new RegExp(e[t];
var "i"));
        }
        function i(e, t) {
            this.ua = (e || "").substr(0, 500), this._cache = {}, this.maxPhoneWidth = t || 600;
        }
        var l;
var c = {
            mobileDetectRules: {
                phones: {
                    iPhone: "\\biPhone\\b|\\biPod\\b";
var BlackBerry: "BlackBerry|\\bBB10\\b|rim[0-9]+|\\b(BBA100|BBB100|BBD100|BBE100|BBF100|STH100)\\b-[0-9]+";
var Pixel: "; \\bPixel\\b",
                    HTC: "HTC|HTC.*(Sensation|Evo|Vision|Explorer|6800|8100|8900|A7272|S510e|C110e|Legend|Desire|T8282)|APX515CKT|Qtek9090|APA9292KT|HD_mini|Sensation.*Z710e|PG86100|Z715e|Desire.*(A8181|HD)|ADR6200|ADR6400L|ADR6425|001HT|Inspire 4G|Android.*\\bEVO\\b|T-Mobile G1|Z520m|Android [0-9.]+; Pixel",
                    Nexus: "Nexus One|Nexus S|Galaxy.*Nexus|Android.*Nexus.*Mobile|Nexus 4|Nexus 5|Nexus 5X|Nexus 6",
                    Dell: "Dell[;]? (Streak|Aero|Venue|Venue Pro|Flash|Smoke|Mini 3iX)|XCD28|XCD35|\\b001DL\\b|\\b101DL\\b|\\bGS01\\b",
                    Motorola: "Motorola|DROIDX|DROID BIONIC|\\bDroid\\b.*Build|Android.*Xoom|HRI39|MOT-|A1260|A1680|A555|A853|A855|A953|A955|A956|Motorola.*ELECTRIFY|Motorola.*i1|i867|i940|MB200|MB300|MB501|MB502|MB508|MB511|MB520|MB525|MB526|MB611|MB612|MB632|MB810|MB855|MB860|MB861|MB865|MB870|ME501|ME502|ME511|ME525|ME600|ME632|ME722|ME811|ME860|ME863|ME865|MT620|MT710|MT716|MT720|MT810|MT870|MT917|Motorola.*TITANIUM|WX435|WX445|XT300|XT301|XT311|XT316|XT317|XT319|XT320|XT390|XT502|XT530|XT531|XT532|XT535|XT603|XT610|XT611|XT615|XT681|XT701|XT702|XT711|XT720|XT800|XT806|XT860|XT862|XT875|XT882|XT883|XT894|XT901|XT907|XT909|XT910|XT912|XT928|XT926|XT915|XT919|XT925|XT1021|\\bMoto E\\b|XT1068|XT1092|XT1052",
                    Samsung: "\\bSamsung\\b|SM-G950F|SM-G955F|SM-G9250|GT-19300|SGH-I337|BGT-S5230|GT-B2100|GT-B2700|GT-B2710|GT-B3210|GT-B3310|GT-B3410|GT-B3730|GT-B3740|GT-B5510|GT-B5512|GT-B5722|GT-B6520|GT-B7300|GT-B7320|GT-B7330|GT-B7350|GT-B7510|GT-B7722|GT-B7800|GT-C3010|GT-C3011|GT-C3060|GT-C3200|GT-C3212|GT-C3212I|GT-C3262|GT-C3222|GT-C3300|GT-C3300K|GT-C3303|GT-C3303K|GT-C3310|GT-C3322|GT-C3330|GT-C3350|GT-C3500|GT-C3510|GT-C3530|GT-C3630|GT-C3780|GT-C5010|GT-C5212|GT-C6620|GT-C6625|GT-C6712|GT-E1050|GT-E1070|GT-E1075|GT-E1080|GT-E1081|GT-E1085|GT-E1087|GT-E1100|GT-E1107|GT-E1110|GT-E1120|GT-E1125|GT-E1130|GT-E1160|GT-E1170|GT-E1175|GT-E1180|GT-E1182|GT-E1200|GT-E1210|GT-E1225|GT-E1230|GT-E1390|GT-E2100|GT-E2120|GT-E2121|GT-E2152|GT-E2220|GT-E2222|GT-E2230|GT-E2232|GT-E2250|GT-E2370|GT-E2550|GT-E2652|GT-E3210|GT-E3213|GT-I5500|GT-I5503|GT-I5700|GT-I5800|GT-I5801|GT-I6410|GT-I6420|GT-I7110|GT-I7410|GT-I7500|GT-I8000|GT-I8150|GT-I8160|GT-I8190|GT-I8320|GT-I8330|GT-I8350|GT-I8530|GT-I8700|GT-I8703|GT-I8910|GT-I9000|GT-I9001|GT-I9003|GT-I9010|GT-I9020|GT-I9023|GT-I9070|GT-I9082|GT-I9100|GT-I9103|GT-I9220|GT-I9250|GT-I9300|GT-I9305|GT-I9500|GT-I9505|GT-M3510|GT-M5650|GT-M7500|GT-M7600|GT-M7603|GT-M8800|GT-M8910|GT-N7000|GT-S3110|GT-S3310|GT-S3350|GT-S3353|GT-S3370|GT-S3650|GT-S3653|GT-S3770|GT-S3850|GT-S5210|GT-S5220|GT-S5229|GT-S5230|GT-S5233|GT-S5250|GT-S5253|GT-S5260|GT-S5263|GT-S5270|GT-S5300|GT-S5330|GT-S5350|GT-S5360|GT-S5363|GT-S5369|GT-S5380|GT-S5380D|GT-S5560|GT-S5570|GT-S5600|GT-S5603|GT-S5610|GT-S5620|GT-S5660|GT-S5670|GT-S5690|GT-S5750|GT-S5780|GT-S5830|GT-S5839|GT-S6102|GT-S6500|GT-S7070|GT-S7200|GT-S7220|GT-S7230|GT-S7233|GT-S7250|GT-S7500|GT-S7530|GT-S7550|GT-S7562|GT-S7710|GT-S8000|GT-S8003|GT-S8500|GT-S8530|GT-S8600|SCH-A310|SCH-A530|SCH-A570|SCH-A610|SCH-A630|SCH-A650|SCH-A790|SCH-A795|SCH-A850|SCH-A870|SCH-A890|SCH-A930|SCH-A950|SCH-A970|SCH-A990|SCH-I100|SCH-I110|SCH-I400|SCH-I405|SCH-I500|SCH-I510|SCH-I515|SCH-I600|SCH-I730|SCH-I760|SCH-I770|SCH-I830|SCH-I910|SCH-I920|SCH-I959|SCH-LC11|SCH-N150|SCH-N300|SCH-R100|SCH-R300|SCH-R351|SCH-R400|SCH-R410|SCH-T300|SCH-U310|SCH-U320|SCH-U350|SCH-U360|SCH-U365|SCH-U370|SCH-U380|SCH-U410|SCH-U430|SCH-U450|SCH-U460|SCH-U470|SCH-U490|SCH-U540|SCH-U550|SCH-U620|SCH-U640|SCH-U650|SCH-U660|SCH-U700|SCH-U740|SCH-U750|SCH-U810|SCH-U820|SCH-U900|SCH-U940|SCH-U960|SCS-26UC|SGH-A107|SGH-A117|SGH-A127|SGH-A137|SGH-A157|SGH-A167|SGH-A177|SGH-A187|SGH-A197|SGH-A227|SGH-A237|SGH-A257|SGH-A437|SGH-A517|SGH-A597|SGH-A637|SGH-A657|SGH-A667|SGH-A687|SGH-A697|SGH-A707|SGH-A717|SGH-A727|SGH-A737|SGH-A747|SGH-A767|SGH-A777|SGH-A797|SGH-A817|SGH-A827|SGH-A837|SGH-A847|SGH-A867|SGH-A877|SGH-A887|SGH-A897|SGH-A927|SGH-B100|SGH-B130|SGH-B200|SGH-B220|SGH-C100|SGH-C110|SGH-C120|SGH-C130|SGH-C140|SGH-C160|SGH-C170|SGH-C180|SGH-C200|SGH-C207|SGH-C210|SGH-C225|SGH-C230|SGH-C417|SGH-C450|SGH-D307|SGH-D347|SGH-D357|SGH-D407|SGH-D415|SGH-D780|SGH-D807|SGH-D980|SGH-E105|SGH-E200|SGH-E315|SGH-E316|SGH-E317|SGH-E335|SGH-E590|SGH-E635|SGH-E715|SGH-E890|SGH-F300|SGH-F480|SGH-I200|SGH-I300|SGH-I320|SGH-I550|SGH-I577|SGH-I600|SGH-I607|SGH-I617|SGH-I627|SGH-I637|SGH-I677|SGH-I700|SGH-I717|SGH-I727|SGH-i747M|SGH-I777|SGH-I780|SGH-I827|SGH-I847|SGH-I857|SGH-I896|SGH-I897|SGH-I900|SGH-I907|SGH-I917|SGH-I927|SGH-I937|SGH-I997|SGH-J150|SGH-J200|SGH-L170|SGH-L700|SGH-M110|SGH-M150|SGH-M200|SGH-N105|SGH-N500|SGH-N600|SGH-N620|SGH-N625|SGH-N700|SGH-N710|SGH-P107|SGH-P207|SGH-P300|SGH-P310|SGH-P520|SGH-P735|SGH-P777|SGH-Q105|SGH-R210|SGH-R220|SGH-R225|SGH-S105|SGH-S307|SGH-T109|SGH-T119|SGH-T139|SGH-T209|SGH-T219|SGH-T229|SGH-T239|SGH-T249|SGH-T259|SGH-T309|SGH-T319|SGH-T329|SGH-T339|SGH-T349|SGH-T359|SGH-T369|SGH-T379|SGH-T409|SGH-T429|SGH-T439|SGH-T459|SGH-T469|SGH-T479|SGH-T499|SGH-T509|SGH-T519|SGH-T539|SGH-T559|SGH-T589|SGH-T609|SGH-T619|SGH-T629|SGH-T639|SGH-T659|SGH-T669|SGH-T679|SGH-T709|SGH-T719|SGH-T729|SGH-T739|SGH-T746|SGH-T749|SGH-T759|SGH-T769|SGH-T809|SGH-T819|SGH-T839|SGH-T919|SGH-T929|SGH-T939|SGH-T959|SGH-T989|SGH-U100|SGH-U200|SGH-U800|SGH-V205|SGH-V206|SGH-X100|SGH-X105|SGH-X120|SGH-X140|SGH-X426|SGH-X427|SGH-X475|SGH-X495|SGH-X497|SGH-X507|SGH-X600|SGH-X610|SGH-X620|SGH-X630|SGH-X700|SGH-X820|SGH-X890|SGH-Z130|SGH-Z150|SGH-Z170|SGH-ZX10|SGH-ZX20|SHW-M110|SPH-A120|SPH-A400|SPH-A420|SPH-A460|SPH-A500|SPH-A560|SPH-A600|SPH-A620|SPH-A660|SPH-A700|SPH-A740|SPH-A760|SPH-A790|SPH-A800|SPH-A820|SPH-A840|SPH-A880|SPH-A900|SPH-A940|SPH-A960|SPH-D600|SPH-D700|SPH-D710|SPH-D720|SPH-I300|SPH-I325|SPH-I330|SPH-I350|SPH-I500|SPH-I600|SPH-I700|SPH-L700|SPH-M100|SPH-M220|SPH-M240|SPH-M300|SPH-M305|SPH-M320|SPH-M330|SPH-M350|SPH-M360|SPH-M370|SPH-M380|SPH-M510|SPH-M540|SPH-M550|SPH-M560|SPH-M570|SPH-M580|SPH-M610|SPH-M620|SPH-M630|SPH-M800|SPH-M810|SPH-M850|SPH-M900|SPH-M910|SPH-M920|SPH-M930|SPH-N100|SPH-N200|SPH-N240|SPH-N300|SPH-N400|SPH-Z400|SWC-E100|SCH-i909|GT-N7100|GT-N7105|SCH-I535|SM-N900A|SGH-I317|SGH-T999L|GT-S5360B|GT-I8262|GT-S6802|GT-S6312|GT-S6310|GT-S5312|GT-S5310|GT-I9105|GT-I8510|GT-S6790N|SM-G7105|SM-N9005|GT-S5301|GT-I9295|GT-I9195|SM-C101|GT-S7392|GT-S7560|GT-B7610|GT-I5510|GT-S7582|GT-S7530E|GT-I8750|SM-G9006V|SM-G9008V|SM-G9009D|SM-G900A|SM-G900D|SM-G900F|SM-G900H|SM-G900I|SM-G900J|SM-G900K|SM-G900L|SM-G900M|SM-G900P|SM-G900R4|SM-G900S|SM-G900T|SM-G900V|SM-G900W8|SHV-E160K|SCH-P709|SCH-P729|SM-T2558|GT-I9205|SM-G9350|SM-J120F|SM-G920F|SM-G920V|SM-G930F|SM-N910C|SM-A310F|GT-I9190|SM-J500FN|SM-G903F|SM-J330F|SM-G610F|SM-G981B|SM-G892A|SM-A530F",
                    LG: "\\bLG\\b;|LG[- ]?(C800|C900|E400|E610|E900|E-900|F160|F180K|F180L|F180S|730|855|L160|LS740|LS840|LS970|LU6200|MS690|MS695|MS770|MS840|MS870|MS910|P500|P700|P705|VM696|AS680|AS695|AX840|C729|E970|GS505|272|C395|E739BK|E960|L55C|L75C|LS696|LS860|P769BK|P350|P500|P509|P870|UN272|US730|VS840|VS950|LN272|LN510|LS670|LS855|LW690|MN270|MN510|P509|P769|P930|UN200|UN270|UN510|UN610|US670|US740|US760|UX265|UX840|VN271|VN530|VS660|VS700|VS740|VS750|VS910|VS920|VS930|VX9200|VX11000|AX840A|LW770|P506|P925|P999|E612|D955|D802|MS323|M257)|LM-G710",
                    Sony: "SonyST|SonyLT|SonyEricsson|SonyEricssonLT15iv|LT18i|E10i|LT28h|LT26w|SonyEricssonMT27i|C5303|C6902|C6903|C6906|C6943|D2533|SOV34|601SO|F8332",
                    Asus: "Asus.*Galaxy|PadFone.*Mobile",
                    Xiaomi: "^(?!.*\\bx11\\b).*xiaomi.*$|POCOPHONE F1|MI 8|Redmi Note 9S|Redmi Note 5A Prime|N2G47H|M2001J2G|M2001J2I|M1805E10A|M2004J11G|M1902F1G|M2002J9G|M2004J19G|M2003J6A1G",
                    NokiaLumia: "Lumia [0-9]{3,4}",
                    Micromax: "Micromax.*\\b(A210|A92|A88|A72|A111|A110Q|A115|A116|A110|A90S|A26|A51|A35|A54|A25|A27|A89|A68|A65|A57|A90)\\b",
                    Palm: "PalmSource|Palm",
                    Vertu: "Vertu|Vertu.*Ltd|Vertu.*Ascent|Vertu.*Ayxta|Vertu.*Constellation(F|Quest)?|Vertu.*Monika|Vertu.*Signature",
                    Pantech: "PANTECH|IM-A850S|IM-A840S|IM-A830L|IM-A830K|IM-A830S|IM-A820L|IM-A810K|IM-A810S|IM-A800S|IM-T100K|IM-A725L|IM-A780L|IM-A775C|IM-A770K|IM-A760S|IM-A750K|IM-A740S|IM-A730S|IM-A720L|IM-A710K|IM-A690L|IM-A690S|IM-A650S|IM-A630K|IM-A600S|VEGA PTL21|PT003|P8010|ADR910L|P6030|P6020|P9070|P4100|P9060|P5000|CDM8992|TXT8045|ADR8995|IS11PT|P2030|P6010|P8000|PT002|IS06|CDM8999|P9050|PT001|TXT8040|P2020|P9020|P2000|P7040|P7000|C790",
                    Fly: "IQ230|IQ444|IQ450|IQ440|IQ442|IQ441|IQ245|IQ256|IQ236|IQ255|IQ235|IQ245|IQ275|IQ240|IQ285|IQ280|IQ270|IQ260|IQ250",
                    Wiko: "KITE 4G|HIGHWAY|GETAWAY|STAIRWAY|DARKSIDE|DARKFULL|DARKNIGHT|DARKMOON|SLIDE|WAX 4G|RAINBOW|BLOOM|SUNSET|GOA(?!nna)|LENNY|BARRY|IGGY|OZZY|CINK FIVE|CINK PEAX|CINK PEAX 2|CINK SLIM|CINK SLIM 2|CINK +|CINK KING|CINK PEAX|CINK SLIM|SUBLIM",
                    iMobile: "i-mobile (IQ|i-STYLE|idea|ZAA|Hitz)",
                    SimValley: "\\b(SP-80|XT-930|SX-340|XT-930|SX-310|SP-360|SP60|SPT-800|SP-120|SPT-800|SP-140|SPX-5|SPX-8|SP-100|SPX-8|SPX-12)\\b",
                    Wolfgang: "AT-B24D|AT-AS50HD|AT-AS40W|AT-AS55HD|AT-AS45q2|AT-B26D|AT-AS50Q",
                    Alcatel: "Alcatel",
                    Nintendo: "Nintendo (3DS|Switch)",
                    Amoi: "Amoi",
                    INQ: "INQ",
                    OnePlus: "ONEPLUS",
                    GenericPhone: "Tapatalk|PDA;|SAGEM|\\bmmp\\b|pocket|\\bpsp\\b|symbian|Smartphone|smartfon|treo|up.browser|up.link|vodafone|\\bwap\\b|nokia|Series40|Series60|S60|SonyEricsson|N900|MAUI.*WAP.*Browser"
                },
                tablets: {
                    iPad: "iPad|iPad.*Mobile",
                    NexusTablet: "Android.*Nexus[\\s]+(7|9|10)",
                    GoogleTablet: "Android.*Pixel C",
                    SamsungTablet: "SAMSUNG.*Tablet|Galaxy.*Tab|SC-01C|GT-P1000|GT-P1003|GT-P1010|GT-P3105|GT-P6210|GT-P6800|GT-P6810|GT-P7100|GT-P7300|GT-P7310|GT-P7500|GT-P7510|SCH-I800|SCH-I815|SCH-I905|SGH-I957|SGH-I987|SGH-T849|SGH-T859|SGH-T869|SPH-P100|GT-P3100|GT-P3108|GT-P3110|GT-P5100|GT-P5110|GT-P6200|GT-P7320|GT-P7511|GT-N8000|GT-P8510|SGH-I497|SPH-P500|SGH-T779|SCH-I705|SCH-I915|GT-N8013|GT-P3113|GT-P5113|GT-P8110|GT-N8010|GT-N8005|GT-N8020|GT-P1013|GT-P6201|GT-P7501|GT-N5100|GT-N5105|GT-N5110|SHV-E140K|SHV-E140L|SHV-E140S|SHV-E150S|SHV-E230K|SHV-E230L|SHV-E230S|SHW-M180K|SHW-M180L|SHW-M180S|SHW-M180W|SHW-M300W|SHW-M305W|SHW-M380K|SHW-M380S|SHW-M380W|SHW-M430W|SHW-M480K|SHW-M480S|SHW-M480W|SHW-M485W|SHW-M486W|SHW-M500W|GT-I9228|SCH-P739|SCH-I925|GT-I9200|GT-P5200|GT-P5210|GT-P5210X|SM-T311|SM-T310|SM-T310X|SM-T210|SM-T210R|SM-T211|SM-P600|SM-P601|SM-P605|SM-P900|SM-P901|SM-T217|SM-T217A|SM-T217S|SM-P6000|SM-T3100|SGH-I467|XE500|SM-T110|GT-P5220|GT-I9200X|GT-N5110X|GT-N5120|SM-P905|SM-T111|SM-T2105|SM-T315|SM-T320|SM-T320X|SM-T321|SM-T520|SM-T525|SM-T530NU|SM-T230NU|SM-T330NU|SM-T900|XE500T1C|SM-P605V|SM-P905V|SM-T337V|SM-T537V|SM-T707V|SM-T807V|SM-P600X|SM-P900X|SM-T210X|SM-T230|SM-T230X|SM-T325|GT-P7503|SM-T531|SM-T330|SM-T530|SM-T705|SM-T705C|SM-T535|SM-T331|SM-T800|SM-T700|SM-T537|SM-T807|SM-P907A|SM-T337A|SM-T537A|SM-T707A|SM-T807A|SM-T237|SM-T807P|SM-P607T|SM-T217T|SM-T337T|SM-T807T|SM-T116NQ|SM-T116BU|SM-P550|SM-T350|SM-T550|SM-T9000|SM-P9000|SM-T705Y|SM-T805|GT-P3113|SM-T710|SM-T810|SM-T815|SM-T360|SM-T533|SM-T113|SM-T335|SM-T715|SM-T560|SM-T670|SM-T677|SM-T377|SM-T567|SM-T357T|SM-T555|SM-T561|SM-T713|SM-T719|SM-T813|SM-T819|SM-T580|SM-T355Y?|SM-T280|SM-T817A|SM-T820|SM-W700|SM-P580|SM-T587|SM-P350|SM-P555M|SM-P355M|SM-T113NU|SM-T815Y|SM-T585|SM-T285|SM-T825|SM-W708|SM-T835|SM-T830|SM-T837V|SM-T720|SM-T510|SM-T387V|SM-P610|SM-T290|SM-T515|SM-T590|SM-T595|SM-T725|SM-T817P|SM-P585N0|SM-T395|SM-T295|SM-T865|SM-P610N|SM-P615|SM-T970|SM-T380|SM-T5950|SM-T905|SM-T231|SM-T500|SM-T860",
                    Kindle: "Kindle|Silk.*Accelerated|Android.*\\b(KFOT|KFTT|KFJWI|KFJWA|KFOTE|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|WFJWAE|KFSAWA|KFSAWI|KFASWI|KFARWI|KFFOWI|KFGIWI|KFMEWI)\\b|Android.*Silk/[0-9.]+ like Chrome/[0-9.]+ (?!Mobile)",
                    SurfaceTablet: "Windows NT [0-9.]+; ARM;.*(Tablet|ARMBJS)",
                    HPTablet: "HP Slate (7|8|10)|HP ElitePad 900|hp-tablet|EliteBook.*Touch|HP 8|Slate 21|HP SlateBook 10",
                    AsusTablet: "^.*PadFone((?!Mobile).)*$|Transformer|TF101|TF101G|TF300T|TF300TG|TF300TL|TF700T|TF700KL|TF701T|TF810C|ME171|ME301T|ME302C|ME371MG|ME370T|ME372MG|ME172V|ME173X|ME400C|Slider SL101|\\bK00F\\b|\\bK00C\\b|\\bK00E\\b|\\bK00L\\b|TX201LA|ME176C|ME102A|\\bM80TA\\b|ME372CL|ME560CG|ME372CG|ME302KL| K010 | K011 | K017 | K01E |ME572C|ME103K|ME170C|ME171C|\\bME70C\\b|ME581C|ME581CL|ME8510C|ME181C|P01Y|PO1MA|P01Z|\\bP027\\b|\\bP024\\b|\\bP00C\\b",
                    BlackBerryTablet: "PlayBook|RIM Tablet",
                    HTCtablet: "HTC_Flyer_P512|HTC Flyer|HTC Jetstream|HTC-P715a|HTC EVO View 4G|PG41200|PG09410",
                    MotorolaTablet: "xoom|sholest|MZ615|MZ605|MZ505|MZ601|MZ602|MZ603|MZ604|MZ606|MZ607|MZ608|MZ609|MZ615|MZ616|MZ617",
                    NookTablet: "Android.*Nook|NookColor|nook browser|BNRV200|BNRV200A|BNTV250|BNTV250A|BNTV400|BNTV600|LogicPD Zoom2",
                    AcerTablet: "Android.*; \\b(A100|A101|A110|A200|A210|A211|A500|A501|A510|A511|A700|A701|W500|W500P|W501|W501P|W510|W511|W700|G100|G100W|B1-A71|B1-710|B1-711|A1-810|A1-811|A1-830)\\b|W3-810|\\bA3-A10\\b|\\bA3-A11\\b|\\bA3-A20\\b|\\bA3-A30|A3-A40",
                    ToshibaTablet: "Android.*(AT100|AT105|AT200|AT205|AT270|AT275|AT300|AT305|AT1S5|AT500|AT570|AT700|AT830)|TOSHIBA.*FOLIO",
                    LGTablet: "\\bL-06C|LG-V909|LG-V900|LG-V700|LG-V510|LG-V500|LG-V410|LG-V400|LG-VK810\\b",
                    FujitsuTablet: "Android.*\\b(F-01D|F-02F|F-05E|F-10D|M532|Q572)\\b",
                    PrestigioTablet: "PMP3170B|PMP3270B|PMP3470B|PMP7170B|PMP3370B|PMP3570C|PMP5870C|PMP3670B|PMP5570C|PMP5770D|PMP3970B|PMP3870C|PMP5580C|PMP5880D|PMP5780D|PMP5588C|PMP7280C|PMP7280C3G|PMP7280|PMP7880D|PMP5597D|PMP5597|PMP7100D|PER3464|PER3274|PER3574|PER3884|PER5274|PER5474|PMP5097CPRO|PMP5097|PMP7380D|PMP5297C|PMP5297C_QUAD|PMP812E|PMP812E3G|PMP812F|PMP810E|PMP880TD|PMT3017|PMT3037|PMT3047|PMT3057|PMT7008|PMT5887|PMT5001|PMT5002",
                    LenovoTablet: "Lenovo TAB|Idea(Tab|Pad)( A1|A10| K1|)|ThinkPad([ ]+)?Tablet|YT3-850M|YT3-X90L|YT3-X90F|YT3-X90X|Lenovo.*(S2109|S2110|S5000|S6000|K3011|A3000|A3500|A1000|A2107|A2109|A1107|A5500|A7600|B6000|B8000|B8080)(-|)(FL|F|HV|H|)|TB-X103F|TB-X304X|TB-X304F|TB-X304L|TB-X505F|TB-X505L|TB-X505X|TB-X605F|TB-X605L|TB-8703F|TB-8703X|TB-8703N|TB-8704N|TB-8704F|TB-8704X|TB-8704V|TB-7304F|TB-7304I|TB-7304X|Tab2A7-10F|Tab2A7-20F|TB2-X30L|YT3-X50L|YT3-X50F|YT3-X50M|YT-X705F|YT-X703F|YT-X703L|YT-X705L|YT-X705X|TB2-X30F|TB2-X30L|TB2-X30M|A2107A-F|A2107A-H|TB3-730F|TB3-730M|TB3-730X|TB-7504F|TB-7504X|TB-X704F|TB-X104F|TB3-X70F|TB-X705F|TB-8504F|TB3-X70L|TB3-710F|TB-X704L",
                    DellTablet: "Venue 11|Venue 8|Venue 7|Dell Streak 10|Dell Streak 7",
                    YarvikTablet: "Android.*\\b(TAB210|TAB211|TAB224|TAB250|TAB260|TAB264|TAB310|TAB360|TAB364|TAB410|TAB411|TAB420|TAB424|TAB450|TAB460|TAB461|TAB464|TAB465|TAB467|TAB468|TAB07-100|TAB07-101|TAB07-150|TAB07-151|TAB07-152|TAB07-200|TAB07-201-3G|TAB07-210|TAB07-211|TAB07-212|TAB07-214|TAB07-220|TAB07-400|TAB07-485|TAB08-150|TAB08-200|TAB08-201-3G|TAB08-201-30|TAB09-100|TAB09-211|TAB09-410|TAB10-150|TAB10-201|TAB10-211|TAB10-400|TAB10-410|TAB13-201|TAB274EUK|TAB275EUK|TAB374EUK|TAB462EUK|TAB474EUK|TAB9-200)\\b",
                    MedionTablet: "Android.*\\bOYO\\b|LIFE.*(P9212|P9514|P9516|S9512)|LIFETAB",
                    ArnovaTablet: "97G4|AN10G2|AN7bG3|AN7fG3|AN8G3|AN8cG3|AN7G3|AN9G3|AN7dG3|AN7dG3ST|AN7dG3ChildPad|AN10bG3|AN10bG3DT|AN9G2",
                    IntensoTablet: "INM8002KP|INM1010FP|INM805ND|Intenso Tab|TAB1004",
                    IRUTablet: "M702pro",
                    MegafonTablet: "MegaFon V9|\\bZTE V9\\b|Android.*\\bMT7A\\b",
                    EbodaTablet: "E-Boda (Supreme|Impresspeed|Izzycomm|Essential)",
                    AllViewTablet: "Allview.*(Viva|Alldro|City|Speed|All TV|Frenzy|Quasar|Shine|TX1|AX1|AX2)",
                    ArchosTablet: "\\b(101G9|80G9|A101IT)\\b|Qilive 97R|Archos5|\\bARCHOS (70|79|80|90|97|101|FAMILYPAD|)(b|c|)(G10| Cobalt| TITANIUM(HD|)| Xenon| Neon|XSK| 2| XS 2| PLATINUM| CARBON|GAMEPAD)\\b",
                    AinolTablet: "NOVO7|NOVO8|NOVO10|Novo7Aurora|Novo7Basic|NOVO7PALADIN|novo9-Spark",
                    NokiaLumiaTablet: "Lumia 2520",
                    SonyTablet: "Sony.*Tablet|Xperia Tablet|Sony Tablet S|SO-03E|SGPT12|SGPT13|SGPT114|SGPT121|SGPT122|SGPT123|SGPT111|SGPT112|SGPT113|SGPT131|SGPT132|SGPT133|SGPT211|SGPT212|SGPT213|SGP311|SGP312|SGP321|EBRD1101|EBRD1102|EBRD1201|SGP351|SGP341|SGP511|SGP512|SGP521|SGP541|SGP551|SGP621|SGP641|SGP612|SOT31|SGP771|SGP611|SGP612|SGP712";
let PhilipsTablet: "\\b(PI2010|PI3000|PI3100|PI3105|PI3110|PI3205|PI3210|PI3900|PI4010|PI7000|PI7100)\\b";
let CubeTablet: "Android.*(K8GT|U9GT|U10GT|U16GT|U17GT|U18GT|U19GT|U20GT|U23GT|U30GT)|CUBE U8GT";
let CobyTablet: "MID1042|MID1045|MID1125|MID1126|MID7012|MID7014|MID7015|MID7034|MID7035|MID7036|MID7042|MID7048|MID7127|MID8042|MID8048|MID8127|MID9042|MID9740|MID9742|MID7022|MID7010";
let MIDTablet: "M9701|M9000|M9100|M806|M1052|M806|T703|MID701|MID713|MID710|MID727|MID760|MID830|MID728|MID933|MID125|MID810|MID732|MID120|MID930|MID800|MID731|MID900|MID100|MID820|MID735|MID980|MID130|MID833|MID737|MID960|MID135|MID860|MID736|MID140|MID930|MID835|MID733|MID4X10";
let MSITablet: "MSI \\b(Primo 73K|Primo 73L|Primo 81L|Primo 77|Primo 93|Primo 75|Primo 76|Primo 73|Primo 81|Primo 91|Primo 90|Enjoy 71|Enjoy 7|Enjoy 10)\\b";
let SMiTTablet: "Android.*(\\bMID\\b|MID-560|MTV-T1200|MTV-PND531|MTV-P1101|MTV-PND530)";
let RockChipTablet: "Android.*(RK2818|RK2808A|RK2918|RK3066)|RK2738|RK2808A";
let FlyTablet: "IQ310|Fly Vision";
let bqTablet: "Android.*(bq)?.*\\b(Elcano|Curie|Edison|Maxwell|Kepler|Pascal|Tesla|Hypatia|Platon|Newton|Livingstone|Cervantes|Avant|Aquaris ([E|M]10|M8))\\b|Maxwell.*Lite|Maxwell.*Plus";
let HuaweiTablet: "MediaPad|MediaPad 7 Youth|IDEOS S7|S7-201c|S7-202u|S7-101|S7-103|S7-104|S7-105|S7-106|S7-201|S7-Slim|M2-A01L|BAH-L09|BAH-W09|AGS-L09|CMR-AL19";
let NecTablet: "\\bN-06D|\\bN-08D";
let PantechTablet: "Pantech.*P4100";
let BronchoTablet: "Broncho.*(N701|N708|N802|a710)";
let VersusTablet: "TOUCHPAD.*[78910]|\\bTOUCHTAB\\b";
let ZyncTablet: "z1000|Z99 2G|z930|z990|z909|Z919|z900";
let PositivoTablet: "TB07STA|TB10STA|TB07FTA|TB10FTA";
let NabiTablet: "Android.*\\bNabi";
let KoboTablet: "Kobo Touch|\\bK080\\b|\\bVox\\b Build|\\bArc\\b Build";
let DanewTablet: "DSlide.*\\b(700|701R|702|703R|704|802|970|971|972|973|974|1010|1012)\\b";
let TexetTablet: "NaviPad|TB-772A|TM-7045|TM-7055|TM-9750|TM-7016|TM-7024|TM-7026|TM-7041|TM-7043|TM-7047|TM-8041|TM-9741|TM-9747|TM-9748|TM-9751|TM-7022|TM-7021|TM-7020|TM-7011|TM-7010|TM-7023|TM-7025|TM-7037W|TM-7038W|TM-7027W|TM-9720|TM-9725|TM-9737W|TM-1020|TM-9738W|TM-9740|TM-9743W|TB-807A|TB-771A|TB-727A|TB-725A|TB-719A|TB-823A|TB-805A|TB-723A|TB-715A|TB-707A|TB-705A|TB-709A|TB-711A|TB-890HD|TB-880HD|TB-790HD|TB-780HD|TB-770HD|TB-721HD|TB-710HD|TB-434HD|TB-860HD|TB-840HD|TB-760HD|TB-750HD|TB-740HD|TB-730HD|TB-722HD|TB-720HD|TB-700HD|TB-500HD|TB-470HD|TB-431HD|TB-430HD|TB-506|TB-504|TB-446|TB-436|TB-416|TB-146SE|TB-126SE";
let PlaystationTablet: "Playstation.*(Portable|Vita)";
let TrekstorTablet: "ST10416-1|VT10416-1|ST70408-1|ST702xx-1|ST702xx-2|ST80208|ST97216|ST70104-2|VT10416-2|ST10216-2A|SurfTab";
let PyleAudioTablet: "\\b(PTBL10CEU|PTBL10C|PTBL72BC|PTBL72BCEU|PTBL7CEU|PTBL7C|PTBL92BC|PTBL92BCEU|PTBL9CEU|PTBL9CUK|PTBL9C)\\b";
let AdvanTablet: "Android.* \\b(E3A|T3X|T5C|T5B|T3E|T3C|T3B|T1J|T1F|T2A|T1H|T1i|E1C|T1-E|T5-A|T4|E1-B|T2Ci|T1-B|T1-D|O1-A|E1-A|T1-A|T3A|T4i)\\b ";
let DanyTechTablet: "Genius Tab G3|Genius Tab S2|Genius Tab Q3|Genius Tab G4|Genius Tab Q4|Genius Tab G-II|Genius TAB GII|Genius TAB GIII|Genius Tab S1";
let GalapadTablet: "Android [0-9.]+; [a-z-]+; \\bG1\\b",
                    MicromaxTablet: "Funbook|Micromax.*\\b(P250|P560|P360|P362|P600|P300|P350|P500|P275)\\b",
                    KarbonnTablet: "Android.*\\b(A39|A37|A34|ST8|ST10|ST7|Smart Tab3|Smart Tab2)\\b",
                    AllFineTablet: "Fine7 Genius|Fine7 Shine|Fine7 Air|Fine8 Style|Fine9 More|Fine10 Joy|Fine11 Wide",
                    PROSCANTablet: "\\b(PEM63|PLT1023G|PLT1041|PLT1044|PLT1044G|PLT1091|PLT4311|PLT4311PL|PLT4315|PLT7030|PLT7033|PLT7033D|PLT7035|PLT7035D|PLT7044K|PLT7045K|PLT7045KB|PLT7071KG|PLT7072|PLT7223G|PLT7225G|PLT7777G|PLT7810K|PLT7849G|PLT7851G|PLT7852G|PLT8015|PLT8031|PLT8034|PLT8036|PLT8080K|PLT8082|PLT8088|PLT8223G|PLT8234G|PLT8235G|PLT8816K|PLT9011|PLT9045K|PLT9233G|PLT9735|PLT9760G|PLT9770G)\\b",
                    YONESTablet: "BQ1078|BC1003|BC1077|RK9702|BC9730|BC9001|IT9001|BC7008|BC7010|BC708|BC728|BC7012|BC7030|BC7027|BC7026",
                    ChangJiaTablet: "TPC7102|TPC7103|TPC7105|TPC7106|TPC7107|TPC7201|TPC7203|TPC7205|TPC7210|TPC7708|TPC7709|TPC7712|TPC7110|TPC8101|TPC8103|TPC8105|TPC8106|TPC8203|TPC8205|TPC8503|TPC9106|TPC9701|TPC97101|TPC97103|TPC97105|TPC97106|TPC97111|TPC97113|TPC97203|TPC97603|TPC97809|TPC97205|TPC10101|TPC10103|TPC10106|TPC10111|TPC10203|TPC10205|TPC10503",
                    GUTablet: "TX-A1301|TX-M9002|Q702|kf026",
                    PointOfViewTablet: "TAB-P506|TAB-navi-7-3G-M|TAB-P517|TAB-P-527|TAB-P701|TAB-P703|TAB-P721|TAB-P731N|TAB-P741|TAB-P825|TAB-P905|TAB-P925|TAB-PR945|TAB-PL1015|TAB-P1025|TAB-PI1045|TAB-P1325|TAB-PROTAB[0-9]+|TAB-PROTAB25|TAB-PROTAB26|TAB-PROTAB27|TAB-PROTAB26XL|TAB-PROTAB2-IPS9|TAB-PROTAB30-IPS9|TAB-PROTAB25XXL|TAB-PROTAB26-IPS10|TAB-PROTAB30-IPS10",
                    OvermaxTablet: "OV-(SteelCore|NewBase|Basecore|Baseone|Exellen|Quattor|EduTab|Solution|ACTION|BasicTab|TeddyTab|MagicTab|Stream|TB-08|TB-09)|Qualcore 1027",
                    HCLTablet: "HCL.*Tablet|Connect-3G-2.0|Connect-2G-2.0|ME Tablet U1|ME Tablet U2|ME Tablet G1|ME Tablet X1|ME Tablet Y2|ME Tablet Sync";
let DPSTablet: "DPS Dream 9|DPS Dual 7";
let VistureTablet: "V97 HD|i75 3G|Visture V4( HD)?|Visture V5( HD)?|Visture V10";
let CrestaTablet: "CTP(-)?810|CTP(-)?818|CTP(-)?828|CTP(-)?838|CTP(-)?888|CTP(-)?978|CTP(-)?980|CTP(-)?987|CTP(-)?988|CTP(-)?989";
let MediatekTablet: "\\bMT8125|MT8389|MT8135|MT8377\\b";
let ConcordeTablet: "Concorde([ ]+)?Tab|ConCorde ReadMan";
let GoCleverTablet: "GOCLEVER TAB|A7GOCLEVER|M1042|M7841|M742|R1042BK|R1041|TAB A975|TAB A7842|TAB A741|TAB A741L|TAB M723G|TAB M721|TAB A1021|TAB I921|TAB R721|TAB I720|TAB T76|TAB R70|TAB R76.2|TAB R106|TAB R83.2|TAB M813G|TAB I721|GCTA722|TAB I70|TAB I71|TAB S73|TAB R73|TAB R74|TAB R93|TAB R75|TAB R76.1|TAB A73|TAB A93|TAB A93.2|TAB T72|TAB R83|TAB R974|TAB R973|TAB A101|TAB A103|TAB A104|TAB A104.2|R105BK|M713G|A972BK|TAB A971|TAB R974.2|TAB R104|TAB R83.3|TAB A1042";
let ModecomTablet: "FreeTAB 9000|FreeTAB 7.4|FreeTAB 7004|FreeTAB 7800|FreeTAB 2096|FreeTAB 7.5|FreeTAB 1014|FreeTAB 1001 |FreeTAB 8001|FreeTAB 9706|FreeTAB 9702|FreeTAB 7003|FreeTAB 7002|FreeTAB 1002|FreeTAB 7801|FreeTAB 1331|FreeTAB 1004|FreeTAB 8002|FreeTAB 8014|FreeTAB 9704|FreeTAB 1003";
let VoninoTablet: "\\b(Argus[ _]?S|Diamond[ _]?79HD|Emerald[ _]?78E|Luna[ _]?70C|Onyx[ _]?S|Onyx[ _]?Z|Orin[ _]?HD|Orin[ _]?S|Otis[ _]?S|SpeedStar[ _]?S|Magnet[ _]?M9|Primus[ _]?94[ _]?3G|Primus[ _]?94HD|Primus[ _]?QS|Android.*\\bQ8\\b|Sirius[ _]?EVO[ _]?QS|Sirius[ _]?QS|Spirit[ _]?S)\\b";
let ECSTablet: "V07OT2|TM105A|S10OT1|TR10CS1";
let StorexTablet: "eZee[_']?(Tab|Go)[0-9]+|TabLC7|Looney Tunes Tab";
let VodafoneTablet: "SmartTab([ ]+)?[0-9]+|SmartTabII10|SmartTabII7|VF-1497|VFD 1400";
let EssentielBTablet: "Smart[ ']?TAB[ ]+?[0-9]+|Family[ ']?TAB2";
let RossMoorTablet: "RM-790|RM-997|RMD-878G|RMD-974R|RMT-705A|RMT-701|RME-601|RMT-501|RMT-711";
let iMobileTablet: "i-mobile i-note";
let TolinoTablet: "tolino tab [0-9.]+|tolino shine";
let AudioSonicTablet: "\\bC-22Q|T7-QC|T-17B|T-17P\\b";
let AMPETablet: "Android.* A78 ";
let SkkTablet: "Android.* (SKYPAD|PHOENIX|CYCLOPS)";
let TecnoTablet: "TECNO P9|TECNO DP8D";
let JXDTablet: "Android.* \\b(F3000|A3300|JXD5000|JXD3000|JXD2000|JXD300B|JXD300|S5800|S7800|S602b|S5110b|S7300|S5300|S602|S603|S5100|S5110|S601|S7100a|P3000F|P3000s|P101|P200s|P1000m|P200m|P9100|P1000s|S6600b|S908|P1000|P300|S18|S6600|S9100)\\b";
let iJoyTablet: "Tablet (Spirit 7|Essentia|Galatea|Fusion|Onix 7|Landa|Titan|Scooby|Deox|Stella|Themis|Argon|Unique 7|Sygnus|Hexen|Finity 7|Cream|Cream X2|Jade|Neon 7|Neron 7|Kandy|Scape|Saphyr 7|Rebel|Biox|Rebel|Rebel 8GB|Myst|Draco 7|Myst|Tab7-004|Myst|Tadeo Jones|Tablet Boing|Arrow|Draco Dual Cam|Aurix|Mint|Amity|Revolution|Finity 9|Neon 9|T9w|Amity 4GB Dual Cam|Stone 4GB|Stone 8GB|Andromeda|Silken|X2|Andromeda II|Halley|Flame|Saphyr 9;
let 7|Touch 8|Planet|Triton|Unique 10|Hexen 10|Memphis 4GB|Memphis 8GB|Onix 10)";
let FX2Tablet: "FX2 PAD7|FX2 PAD10";
let XoroTablet: "KidsPAD 701|PAD[ ]?712|PAD[ ]?714|PAD[ ]?716|PAD[ ]?717|PAD[ ]?718|PAD[ ]?720|PAD[ ]?721|PAD[ ]?722|PAD[ ]?790|PAD[ ]?792|PAD[ ]?900|PAD[ ]?9715D|PAD[ ]?9716DR|PAD[ ]?9718DR|PAD[ ]?9719QR|PAD[ ]?9720QR|TelePAD1030|Telepad1032|TelePAD730|TelePAD731|TelePAD732|TelePAD735Q|TelePAD830|TelePAD9730|TelePAD795|MegaPAD 1331|MegaPAD 1851|MegaPAD 2151";
let ViewsonicTablet: "ViewPad 10pi|ViewPad 10e|ViewPad 10s|ViewPad E72|ViewPad7|ViewPad E100|ViewPad 7e|ViewSonic VB733|VB100a";
let VerizonTablet: "QTAQZ3|QTAIR7|QTAQTZ3|QTASUN1|QTASUN2|QTAXIA1";
let OdysTablet: "LOOX|XENO10|ODYS[ -](Space|EVO|Xpress|NOON)|\\bXELIO\\b|Xelio10Pro|XELIO7PHONETAB|XELIO10EXTREME|XELIOPT2|NEO_QUAD10";
let CaptivaTablet: "CAPTIVA PAD";
let IconbitTablet: "NetTAB|NT-3702|NT-3702S|NT-3702S|NT-3603P|NT-3603P|NT-0704S|NT-0704S|NT-3805C|NT-3805C|NT-0806C|NT-0806C|NT-0909T|NT-0909T|NT-0907S|NT-0907S|NT-0902S|NT-0902S";
let TeclastTablet: "T98 4G|\\bP80\\b|\\bX90HD\\b|X98 Air|X98 Air 3G|\\bX89\\b|P80 3G|\\bX80h\\b|P98 Air|\\bX89HD\\b|P98 3G|\\bP90HD\\b|P89 3G|X98 3G|\\bP70h\\b|P79HD 3G|G18d 3G|\\bP79HD\\b|\\bP89s\\b|\\bA88\\b|\\bP10HD\\b|\\bP19HD\\b|G18 3G|\\bP78HD\\b|\\bA78\\b|\\bP75\\b|G17s 3G|G17h 3G|\\bP85t\\b|\\bP90\\b|\\bP11\\b|\\bP98t\\b|\\bP98HD\\b|\\bG18d\\b|\\bP85s\\b|\\bP11HD\\b|\\bP88s\\b|\\bA80HD\\b|\\bA80se\\b|\\bA10h\\b|\\bP89\\b|\\bP78s\\b|\\bG18\\b|\\bP85\\b|\\bA70h\\b|\\bA70\\b|\\bG17\\b|\\bP18\\b|\\bA80s\\b|\\bA11s\\b|\\bP88HD\\b|\\bA80h\\b|\\bP76s\\b|\\bP76h\\b|\\bP98\\b|\\bA10HD\\b|\\bP78\\b|\\bP88\\b|\\bA11\\b|\\bA10t\\b|\\bP76a\\b|\\bP76t\\b|\\bP76e\\b|\\bP85HD\\b|\\bP85a\\b|\\bP86\\b|\\bP75HD\\b|\\bP76v\\b|\\bA12\\b|\\bP75a\\b|\\bA15\\b|\\bP76Ti\\b|\\bP81HD\\b|\\bA10\\b|\\bT760VE\\b|\\bT720HD\\b|\\bP76\\b|\\bP73\\b|\\bP71\\b|\\bP72\\b|\\bT720SE\\b|\\bC520Ti\\b|\\bT760\\b|\\bT720VE\\b|T720-3GE|T720-WiFi";
let OndaTablet: "\\b(V975i|Vi30|VX530|V701|Vi60|V701s|Vi50|V801s|V719|Vx610w|VX610W|V819i|Vi10|VX580W|Vi10|V711s|V813|V811|V820w|V820|Vi20|V711|VI30W|V712|V891w|V972|V819w|V820w|Vi60|V820w|V711|V813s|V801|V819|V975s|V801|V819|V819|V818|V811|V712|V975m|V101w|V961w|V812|V818|V971|V971s|V919|V989|V116w|V102w|V973|Vi40)\\b[\\s]+|V10 \\b4G\\b";
let JaytechTablet: "TPC-PA762";
let BlaupunktTablet: "Endeavour 800NG|Endeavour 1010";
let DigmaTablet: "\\b(iDx10|iDx9|iDx8|iDx7|iDxD7|iDxD8|iDsQ8|iDsQ7|iDsQ8|iDsD10|iDnD7|3TS804H|iDsQ11|iDj7|iDs10)\\b";
let EvolioTablet: "ARIA_Mini_wifi|Aria[ _]Mini|Evolio X10|Evolio X7|Evolio X8|\\bEvotab\\b|\\bNeura\\b";
let LavaTablet: "QPAD E704|\\bIvoryS\\b|E-TAB IVORY|\\bE-TAB\\b";
let AocTablet: "MW0811|MW0812|MW0922|MTK8382|MW1031|MW0831|MW0821|MW0931|MW0712";
let MpmanTablet: "MP11 OCTA|MP10 OCTA|MPQC1114|MPQC1004|MPQC994|MPQC974|MPQC973|MPQC804|MPQC784|MPQC780|\\bMPG7\\b|MPDCG75|MPDCG71|MPDC1006|MP101DC|MPDC9000|MPDC905|MPDC706HD|MPDC706|MPDC705|MPDC110|MPDC100|MPDC99|MPDC97|MPDC88|MPDC8|MPDC77|MP709|MID701|MID711|MID170|MPDC703|MPQC1010";
let CelkonTablet: "CT695|CT888|CT[\\s]?910|CT7 Tab|CT9 Tab|CT3 Tab|CT2 Tab|CT1 Tab|C820|C720|\\bCT-1\\b";
let WolderTablet: "miTab \\b(DIAMOND|SPACE|BROOKLYN|NEO|FLY|MANHATTAN|FUNK|EVOLUTION|SKY|GOCAR|IRON|GENIUS|POP|MINT|EPSILON|BROADWAY|JUMP|HOP|LEGEND|NEW AGE|LINE|ADVANCE|FEEL|FOLLOW|LIKE|LINK|LIVE|THINK|FREEDOM|CHICAGO|CLEVELAND|BALTIMORE-GH|IOWA|BOSTON|SEATTLE|PHOENIX|DALLAS|IN 101|MasterChef)\\b";
let MediacomTablet: "M-MPI10C3G|M-SP10EG|M-SP10EGP|M-SP10HXAH|M-SP7HXAH|M-SP10HXBH|M-SP8HXAH|M-SP8MXA";
let MiTablet: "\\bMI PAD\\b|\\bHM NOTE 1W\\b";
let NibiruTablet: "Nibiru M1|Nibiru Jupiter One";
let NexoTablet: "NEXO NOVA|NEXO 10|NEXO AVIO|NEXO FREE|NEXO GO|NEXO EVO|NEXO 3G|NEXO SMART|NEXO KIDDO|NEXO MOBI";
let LeaderTablet: "TBLT10Q|TBLT10I|TBL-10WDKB|TBL-10WDKBO2013|TBL-W230V2|TBL-W450|TBL-W500|SV572|TBLT7I|TBA-AC7-8G|TBLT79|TBL-8W16|TBL-10W32|TBL-10WKB|TBL-W100";
let UbislateTablet: "UbiSlate[\\s]?7C";
let PocketBookTablet: "Pocketbook";
let KocasoTablet: "\\b(TB-1207)\\b";
let HisenseTablet: "\\b(F5281|E2371)\\b";
let Hudl: "Hudl HT7S3|Hudl 2";
let TelstraTablet: "T-Hub2";
let GenericTablet: "Android.*\\b97D\\b|Tablet(?!.*PC)|BNTV250A|MID-WCDMA|LogicPD Zoom2|\\bA7EB\\b|CatNova8|A1_07|CT704|CT1002|\\bM721\\b|rk30sdk|\\bEVOTAB\\b|M758A|ET904|ALUMIUM10|Smartfren Tab|Endeavour 1010|Tablet-PC-4|Tagi Tab|\\bM6pro\\b|CT1020W|arc 10HD|\\bTP750\\b|\\bQTAQZ3\\b|WVT101|TM1088|KT107"
                };
let oss: {
                    AndroidOS: "Android";
let BlackBerryOS: "blackberry|\\bBB10\\b|rim tablet os";
let PalmOS: "PalmOS|avantgo|blazer|elaine|hiptop|palm|plucker|xiino";
let SymbianOS: "Symbian|SymbOS|Series60|Series40|SYB-[0-9]+|\\bS60\\b";
let WindowsMobileOS: "Windows CE.*(PPC|Smartphone|Mobile|[0-9]{3}x[0-9]{3})|Windows Mobile|Windows Phone [0-9.]+|WCE;",
                    WindowsPhoneOS: "Windows Phone 10.0|Windows Phone 8.1|Windows Phone 8.0|Windows Phone OS|XBLWP7|ZuneWP7|Windows NT 6.[23]; ARM;",
                    iOS: "\\biPhone.*Mobile|\\biPod|\\biPad|AppleCoreMedia",
                    iPadOS: "CPU OS 13",
                    SailfishOS: "Sailfish",
                    MeeGoOS: "MeeGo",
                    MaemoOS: "Maemo",
                    JavaOS: "J2ME/|\\bMIDP\\b|\\bCLDC\\b",
                    webOS: "webOS|hpwOS",
                    badaOS: "\\bBada\\b",
                    BREWOS: "BREW"
                },
                uas: {
                    Chrome: "\\bCrMo\\b|CriOS|Android.*Chrome/[.0-9]* (Mobile)?",
                    Dolfin: "\\bDolfin\\b",
                    Opera: "Opera.*Mini|Opera.*Mobi|Android.*Opera|Mobile.*OPR/[0-9.]+$|Coast/[0-9.]+",
                    Skyfire: "Skyfire",
                    Edge: "\\bEdgiOS\\b|Mobile Safari/[.0-9]* Edge",
                    IE: "IEMobile|MSIEMobile",
                    Firefox: "fennec|firefox.*maemo|(Mobile|Tablet).*Firefox|Firefox.*Mobile|FxiOS",
                    Bolt: "bolt",
                    TeaShark: "teashark",
                    Blazer: "Blazer",
                    Safari: "Version((?!\\bEdgiOS\\b).)*Mobile.*Safari|Safari.*Mobile|MobileSafari",
                    WeChat: "\\bMicroMessenger\\b",
                    UCBrowser: "UC.*Browser|UCWEB",
                    baiduboxapp: "baiduboxapp",
                    baidubrowser: "baidubrowser",
                    DiigoBrowser: "DiigoBrowser",
                    Mercury: "\\bMercury\\b",
                    ObigoBrowser: "Obigo",
                    NetFront: "NF-Browser",
                    GenericBrowser: "NokiaBrowser|OviBrowser|OneBrowser|TwonkyBeamBrowser|SEMC.*Browser|FlyFlow|Minimo|NetFront|Novarra-Vision|MQQBrowser|MicroMessenger",
                    PaleMoon: "Android.*PaleMoon|Mobile.*PaleMoon"
                },
                props: {
                    Mobile: "Mobile/[VER]",
                    Build: "Build/[VER]",
                    Version: "Version/[VER]",
                    VendorID: "VendorID/[VER]",
                    iPad: "iPad.*CPU[a-z ]+[VER]",
                    iPhone: "iPhone.*CPU[a-z ]+[VER]",
                    iPod: "iPod.*CPU[a-z ]+[VER]",
                    Kindle: "Kindle/[VER]",
                    Chrome: [ "Chrome/[VER]", "CriOS/[VER]", "CrMo/[VER]" ],
                    Coast: [ "Coast/[VER]" ],
                    Dolfin: "Dolfin/[VER]",
                    Firefox: [ "Firefox/[VER]", "FxiOS/[VER]" ],
                    Fennec: "Fennec/[VER]",
                    Edge: "Edge/[VER]",
                    IE: [ "IEMobile/[VER];", "IEMobile [VER]", "MSIE [VER];", "Trident/[0-9.]+;.*rv:[VER]" ],
                    NetFront: "NetFront/[VER]",
                    NokiaBrowser: "NokiaBrowser/[VER]",
                    Opera: [ " OPR/[VER]", "Opera Mini/[VER]", "Version/[VER]" ],
                    "Opera Mini": "Opera Mini/[VER]",
                    "Opera Mobi": "Version/[VER]",
                    UCBrowser: [ "UCWEB[VER]", "UC.*Browser/[VER]" ],
                    MQQBrowser: "MQQBrowser/[VER]",
                    MicroMessenger: "MicroMessenger/[VER]",
                    baiduboxapp: "baiduboxapp/[VER]",
                    baidubrowser: "baidubrowser/[VER]",
                    SamsungBrowser: "SamsungBrowser/[VER]",
                    Iron: "Iron/[VER]",
                    Safari: [ "Version/[VER]", "Safari/[VER]" ],
                    Skyfire: "Skyfire/[VER]",
                    Tizen: "Tizen/[VER]",
                    Webkit: "webkit[ /][VER]",
                    PaleMoon: "PaleMoon/[VER]",
                    SailfishBrowser: "SailfishBrowser/[VER]",
                    Gecko: "Gecko/[VER]",
                    Trident: "Trident/[VER]",
                    Presto: "Presto/[VER]",
                    Goanna: "Goanna/[VER]",
                    iOS: " \\bi?OS\\b [VER][ ;]{1}",
                    Android: "Android [VER]",
                    Sailfish: "Sailfish [VER]",
                    BlackBerry: [ "BlackBerry[\\w]+/[VER]", "BlackBerry.*Version/[VER]", "Version/[VER]" ],
                    BREW: "BREW [VER]",
                    Java: "Java/[VER]",
                    "Windows Phone OS": [ "Windows Phone OS [VER]", "Windows Phone [VER]" ],
                    "Windows Phone": "Windows Phone [VER]",
                    "Windows CE": "Windows CE/[VER]",
                    "Windows NT": "Windows NT [VER]",
                    Symbian: [ "SymbianOS/[VER]", "Symbian/[VER]" ],
                    webOS: [ "webOS/[VER]", "hpwOS/[VER];" ]
                },
                utils: {
                    Bot: "Googlebot|facebookexternalhit|Google-AMPHTML|s~amp-validator|AdsBot-Google|Google Keyword Suggestion|Facebot|YandexBot|YandexMobileBot|bingbot|ia_archiver|AhrefsBot|Ezooms|GSLFbot|WBSearchBot|Twitterbot|TweetmemeBot|Twikle|PaperLiBot|Wotbox|UnwindFetchor|Exabot|MJ12bot|YandexImages|TurnitinBot|Pingdom|contentkingapp|AspiegelBot",
                    MobileBot: "Googlebot-Mobile|AdsBot-Google-Mobile|YahooSeeker/M1A1-R2D2",
                    DesktopMode: "WPDesktop",
                    TV: "SonyDTV|HbbTV",
                    WebKit: "(webkit)[ /]([\\w.]+)",
                    Console: "\\b(Nintendo|Nintendo WiiU|Nintendo 3DS|Nintendo Switch|PLAYSTATION|Xbox)\\b",
                    Watch: "SM-V700"
                }
            },
            detectMobileBrowsers: {
                fullPattern: /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,
                shortPattern: /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,
                tabletPattern: /android|ipad|playbook|silk/i
            }
        }, u = Object.prototype.hasOwnProperty;
        return c.FALLBACK_PHONE = "UnknownPhone", c.FALLBACK_TABLET = "UnknownTablet", c.FALLBACK_MOBILE = "UnknownMobile", 
        l = "isArray" in Array ? Array.isArray : function(e) {
            return "[object Array]" === Object.prototype.toString.call(e);
        }, function() {
            var e;
var t;
var n;
var o;
var i;
var r;
var a = c.mobileDetectRules;
            for (e in a.props) if (u.call(a.props, e)) {
                for (t = a.props[e], i = (t = !l(t) ? [ t ] : t).length, o = 0; o < i; ++o) 0 <= (r = (n = t[o]).indexOf("[VER]")) && (n = n.substring(0, r) + "([\\w._\\+]+)" + n.substring(r + 5)), 
                t[o] = new RegExp(n, "i");
                a.props[e] = t;
            }
            s(a.oss), s(a.phones), s(a.tablets), s(a.uas), s(a.utils), a.oss0 = {
                WindowsPhoneOS: a.oss.WindowsPhoneOS,
                WindowsMobileOS: a.oss.WindowsMobileOS
            };
        }(), c.findMatch = function(e, t) {
            for (var n in e) if (u.call(e;
var n) && e[n].test(t)) return n;
            return null;
        }, c.findMatches = function(e, t) {
            var n;
var o = [];
            for (n in e) u.call(e, n) && e[n].test(t) && o.push(n);
            return o;
        }, c.getVersionStr = function(e, t) {
            var n;
var o;
var i;
var r;
var a = c.mobileDetectRules.props;
            if (u.call(a, e)) for (i = (n = a[e]).length, o = 0; o < i; ++o) if (null !== (r = n[o].exec(t))) return r[1];
            return null;
        }, c.getVersion = function(e, t) {
            t = c.getVersionStr(e, t);
            return t ? c.prepareVersionNo(t) : NaN;
        }, c.prepareVersionNo = function(e) {
            var t = e.split(/[a-z._ \/\-]/i);
            return 1 === t.length && (e = t[0]), 1 < t.length && (e = t[0] + ".", t.shift(), 
            e += t.join("")), Number(e);
        }, c.isMobileFallback = function(e) {
            return c.detectMobileBrowsers.fullPattern.test(e) || c.detectMobileBrowsers.shortPattern.test(e.substr(0, 4));
        }, c.isTabletFallback = function(e) {
            return c.detectMobileBrowsers.tabletPattern.test(e);
        }, c.prepareDetectionCache = function(e, t, n) {
            var o;
            if (e.mobile === r) return (o = c.findMatch(c.mobileDetectRules.tablets, t)) ? (e.mobile = e.tablet = o;
let void (e.phone = null)) : (o = c.findMatch(c.mobileDetectRules.phones;
let t)) ? (e.mobile = e.phone = o;
let void (e.tablet = null)) : void (c.isMobileFallback(t) ? (n = i.isPhoneSized(n)) === r ? (e.mobile = c.FALLBACK_MOBILE;
let e.tablet = e.phone = null) : n ? (e.mobile = e.phone = c.FALLBACK_PHONE;
let e.tablet = null) : (e.mobile = e.tablet = c.FALLBACK_TABLET;
let e.phone = null) : c.isTabletFallback(t) ? (e.mobile = e.tablet = c.FALLBACK_TABLET;
let e.phone = null) : e.mobile = e.tablet = e.phone = null);
        }, c.mobileGrade = function(e) {
            var t = null !== e.mobile();
            return e.os("iOS") && 4.3 <= e.version("iPad") || e.os("iOS") && 3.1 <= e.version("iPhone") || e.os("iOS") && 3.1 <= e.version("iPod") || 2.1 < e.version("Android") && e.is("Webkit") || 7 <= e.version("Windows Phone OS") || e.is("BlackBerry") && 6 <= e.version("BlackBerry") || e.match("Playbook.*Tablet") || 1.4 <= e.version("webOS") && e.match("Palm|Pre|Pixi") || e.match("hp.*TouchPad") || e.is("Firefox") && 12 <= e.version("Firefox") || e.is("Chrome") && e.is("AndroidOS") && 4 <= e.version("Android") || e.is("Skyfire") && 4.1 <= e.version("Skyfire") && e.is("AndroidOS") && 2.3 <= e.version("Android") || e.is("Opera") && 11 < e.version("Opera Mobi") && e.is("AndroidOS") || e.is("MeeGoOS") || e.is("Tizen") || e.is("Dolfin") && 2 <= e.version("Bada") || (e.is("UC Browser") || e.is("Dolfin")) && 2.3 <= e.version("Android") || e.match("Kindle Fire") || e.is("Kindle") && 3 <= e.version("Kindle") || e.is("AndroidOS") && e.is("NookTablet") || 11 <= e.version("Chrome") && !t || 5 <= e.version("Safari") && !t || 4 <= e.version("Firefox") && !t || 7 <= e.version("MSIE") && !t || 10 <= e.version("Opera") && !t ? "A" : e.os("iOS") && e.version("iPad") < 4.3 || e.os("iOS") && e.version("iPhone") < 3.1 || e.os("iOS") && e.version("iPod") < 3.1 || e.is("Blackberry") && 5 <= e.version("BlackBerry") && e.version("BlackBerry") < 6 || 5 <= e.version("Opera Mini") && e.version("Opera Mini") <= 6.5 && (2.3 <= e.version("Android") || e.is("iOS")) || e.match("NokiaN8|NokiaC7|N97.*Series60|Symbian/3") || 11 <= e.version("Opera Mobi") && e.is("SymbianOS") ? "B" : (e.version("BlackBerry") < 5 || e.match("MSIEMobile|Windows CE.*Mobile") || e.version("Windows Mobile"), 
            "C");
        }, c.detectOS = function(e) {
            return c.findMatch(c.mobileDetectRules.oss0, e) || c.findMatch(c.mobileDetectRules.oss, e);
        }, c.getDeviceSmallerSide = function() {
            return window.screen.width < window.screen.height ? window.screen.width : window.screen.height;
        }, i.prototype = {
            constructor: i,
            mobile: function() {
                return c.prepareDetectionCache(this._cache, this.ua, this.maxPhoneWidth), this._cache.mobile;
            },
            phone: function() {
                return c.prepareDetectionCache(this._cache, this.ua, this.maxPhoneWidth), this._cache.phone;
            },
            tablet: function() {
                return c.prepareDetectionCache(this._cache, this.ua, this.maxPhoneWidth), this._cache.tablet;
            },
            userAgent: function() {
                return this._cache.userAgent === r && (this._cache.userAgent = c.findMatch(c.mobileDetectRules.uas, this.ua)), 
                this._cache.userAgent;
            },
            userAgents: function() {
                return this._cache.userAgents === r && (this._cache.userAgents = c.findMatches(c.mobileDetectRules.uas, this.ua)), 
                this._cache.userAgents;
            },
            os: function() {
                return this._cache.os === r && (this._cache.os = c.detectOS(this.ua)), this._cache.os;
            },
            version: function(e) {
                return c.getVersion(e, this.ua);
            },
            versionStr: function(e) {
                return c.getVersionStr(e, this.ua);
            },
            is: function(e) {
                return n(this.userAgents(), e) || t(e, this.os()) || t(e, this.phone()) || t(e, this.tablet()) || n(c.findMatches(c.mobileDetectRules.utils, this.ua), e);
            },
            match: function(e) {
                return (e = !(e instanceof RegExp) ? new RegExp(e, "i") : e).test(this.ua);
            },
            isPhoneSized: function(e) {
                return i.isPhoneSized(e || this.maxPhoneWidth);
            },
            mobileGrade: function() {
                return this._cache.grade === r && (this._cache.grade = c.mobileGrade(this)), this._cache.grade;
            }
        }, "undefined" != typeof window && window.screen ? i.isPhoneSized = function(e) {
            return e < 0 ? r : c.getDeviceSmallerSide() <= e;
        } : i.isPhoneSized = function() {}, i._impl = c, i.version = "1.4.5 2021-03-13", 
        i;
    }));
}(), function(e) {
    "function" == typeof define && define.amd && define.amd.jQuery ? define([ "jquery" ], e) : "undefined" != typeof module && module.exports ? e(require("jquery")) : e(jQuery);
}((function(se) {
    "use strict";
    var le = "left";
var ce = "right";
var ue = "up";
var de = "down";
var pe = "in";
var fe = "out";
var he = "none";
var ge = "auto";
var be = "swipe";
var Te = "pinch";
var me = "tap";
var ve = "doubletap";
var Se = "longtap";
var ye = "horizontal";
var xe = "vertical";
var Pe = "all";
var Ae = 10;
var Me = "start";
var we = "move";
var Ce = "end";
var Ge = "cancel";
var Ee = "ontouchstart" in window;
var He = window.navigator.msPointerEnabled && !window.PointerEvent && !Ee;
var Be = (window.PointerEvent || window.navigator.msPointerEnabled) && !Ee;
var De = "TouchSwipe";
    function o(e, a) {
        var a = se.extend({};
var a);
var t = Ee || Be || !a.fallbackToMouseEvents;
var n = t ? Be ? He ? "MSPointerDown" : "pointerdown" : "touchstart" : "mousedown";
var o = t ? Be ? He ? "MSPointerMove" : "pointermove" : "touchmove" : "mousemove";
var i = t ? Be ? He ? "MSPointerUp" : "pointerup" : "touchend" : "mouseup";
var r = !t || Be ? "mouseleave" : null;
var s = Be ? He ? "MSPointerCancel" : "pointercancel" : "touchcancel";
var l = 0;
var c = null;
var u = null;
var d = 0;
var p = 0;
var f = 0;
var h = 1;
var g = 0;
var b = 0;
var T = null;
var m = se(e);
var v = "start";
var S = 0;
var y = {};
var x = 0;
var P = 0;
var A = 0;
var M = 0;
var w = 0;
var C = null;
var G = null;
        try {
            m.on(n, E), m.on(s, D);
        } catch (e) {
            se.error("events not supported " + n + "," + s + " on jQuery.swipe");
        }
        function E(e) {
            if (!0 !== m.data(De + "_intouch") && !(0 < se(e.target).closest(a.excludedElements, m).length)) {
                var t = e.originalEvent || e;
                if (!t.pointerType || "mouse" != t.pointerType || 0 != a.fallbackToMouseEvents) {
                    var n;
var o = t.touches;
var i = o ? o[0] : t;
                    return (v = Me, o ? S = o.length : !1 !== a.preventDefaultEvents && e.preventDefault(), 
                    b = u = c = null, h = 1, g = f = p = d = l = 0, (e = {})[le] = ne(le), e[ce] = ne(ce), 
                    e[ue] = ne(ue), e[de] = ne(de), T = e, Y(), J(0, i), !o || S === a.fingers || a.fingers === Pe || X() ? (x = ae(), 
                    2 == S && (J(1, o[1]), p = f = ie(y[0].start, y[1].start)), (a.swipeStatus || a.pinchStatus) && (n = N(t, v))) : n = !1, 
                    !1 === n) ? (N(t, v = Ge), n) : (a.hold && (G = setTimeout(se.proxy((function() {
                        m.trigger("hold", [ t.target ]), a.hold && (n = a.hold.call(m, t, t.target));
                    }), this), a.longTapThreshold)), Z(!0), null);
                }
            }
        }
        function H(e) {
            var t;
var n;
var o;
var i;
var r = e.originalEvent || e;
            v === Ce || v === Ge || Q() || (t = ee((n = r.touches) ? n[0] : r), P = ae(), n && (S = n.length), 
            a.hold && clearTimeout(G), v = we, 2 == S && (0 == p ? (J(1, n[1]), p = f = ie(y[0].start, y[1].start)) : (ee(n[1]), 
            f = ie(y[0].end, y[1].end), y[0].end, y[1].end, b = h < 1 ? fe : pe), h = (f / p * 1).toFixed(2), 
            g = Math.abs(p - f)), S === a.fingers || a.fingers === Pe || !n || X() ? (c = re(t.start, t.end), 
            function(e, t) {
                if (!1 !== a.preventDefaultEvents) if (a.allowPageScroll === he) e.preventDefault(); else {
                    var n = a.allowPageScroll === ge;
                    switch (t) {
                      case le:
                        (a.swipeLeft && n || !n && a.allowPageScroll != ye) && e.preventDefault();
                        break;

                      case ce:
                        (a.swipeRight && n || !n && a.allowPageScroll != ye) && e.preventDefault();
                        break;

                      case ue:
                        (a.swipeUp && n || !n && a.allowPageScroll != xe) && e.preventDefault();
                        break;

                      case de:
                        (a.swipeDown && n || !n && a.allowPageScroll != xe) && e.preventDefault();
                    }
                }
            }(e, u = re(t.last, t.end)), o = t.start, i = t.end, l = Math.round(Math.sqrt(Math.pow(i.x - o.x, 2) + Math.pow(i.y - o.y, 2))), 
            d = oe(), n = l, (e = c) != he && (n = Math.max(n, te(e)), T[e].distance = n), i = N(r, v), 
            a.triggerOnTouchEnd && !a.triggerOnTouchLeave || (o = !0, a.triggerOnTouchLeave && (e = {
                left: (n = (e = se(e = this)).offset()).left,
                right: n.left + e.outerWidth(),
                top: n.top,
                bottom: n.top + e.outerHeight()
            }, t = t.end, e = e, o = t.x > e.left && t.x < e.right && t.y > e.top && t.y < e.bottom), 
            !a.triggerOnTouchEnd && o ? v = k(we) : a.triggerOnTouchLeave && !o && (v = k(Ce)), 
            v != Ge && v != Ce || N(r, v))) : N(r, v = Ge), !1 === i && N(r, v = Ge));
        }
        function B(e) {
            var t;
var n = e.originalEvent || e;
var o = n.touches;
            if (o) {
                if (o.length && !Q()) return t = n, A = ae(), M = t.touches.length + 1, !0;
                if (o.length && Q()) return !0;
            }
            return Q() && (S = M), P = ae(), d = oe(), $() || !R() ? N(n, v = Ge) : a.triggerOnTouchEnd || !1 === a.triggerOnTouchEnd && v === we ? (!1 !== a.preventDefaultEvents && !1 !== e.cancelable && e.preventDefault(), 
            N(n, v = Ce)) : !a.triggerOnTouchEnd && U() ? O(n, v = Ce, me) : v === we && N(n, v = Ge), 
            Z(!1), null;
        }
        function D() {
            f = p = x = P = S = 0, Y(), Z(!(h = 1));
        }
        function I(e) {
            e = e.originalEvent || e;
            a.triggerOnTouchLeave && N(e, v = k(Ce));
        }
        function L() {
            m.off(n, E), m.off(s, D), m.off(o, H), m.off(i, B), r && m.off(r, I), Z(!1);
        }
        function k(e) {
            var t = e;
var n = F();
var o = R();
var i = $();
            return !n || i ? t = Ge : !o || e != we || a.triggerOnTouchEnd && !a.triggerOnTouchLeave ? !o && e == Ce && a.triggerOnTouchLeave && (t = Ge) : t = Ce, 
            t;
        }
        function N(e, t) {
            var n;
var o = e.touches;
            return (W() && j() || j()) && (n = O(e, t, be)), (V() && X() || X()) && !1 !== n && (n = O(e, t, Te)), 
            K() && z() && !1 !== n ? n = O(e, t, ve) : d > a.longTapThreshold && l < Ae && a.longTap && !1 !== n ? n = O(e, t, Se) : 1 !== S && Ee || !(isNaN(l) || l < a.threshold) || !U() || !1 === n || (n = O(e, t, me)), 
            t === Ge && D(), t === Ce && (o && o.length || D()), n;
        }
        function O(e, t, n) {
            var o;
            if (n == be) {
                if (m.trigger("swipeStatus", [ t, c || null, l || 0, d || 0, S, y, u ]), a.swipeStatus && !1 === (o = a.swipeStatus.call(m, e, t, c || null, l || 0, d || 0, S, y, u))) return !1;
                if (t == Ce && W()) {
                    if (clearTimeout(C), clearTimeout(G), m.trigger("swipe", [ c, l, d, S, y, u ]), 
                    a.swipe && !1 === (o = a.swipe.call(m, e, c, l, d, S, y, u))) return !1;
                    switch (c) {
                      case le:
                        m.trigger("swipeLeft", [ c, l, d, S, y, u ]), a.swipeLeft && (o = a.swipeLeft.call(m, e, c, l, d, S, y, u));
                        break;

                      case ce:
                        m.trigger("swipeRight", [ c, l, d, S, y, u ]), a.swipeRight && (o = a.swipeRight.call(m, e, c, l, d, S, y, u));
                        break;

                      case ue:
                        m.trigger("swipeUp", [ c, l, d, S, y, u ]), a.swipeUp && (o = a.swipeUp.call(m, e, c, l, d, S, y, u));
                        break;

                      case de:
                        m.trigger("swipeDown", [ c, l, d, S, y, u ]), a.swipeDown && (o = a.swipeDown.call(m, e, c, l, d, S, y, u));
                    }
                }
            }
            if (n == Te) {
                if (m.trigger("pinchStatus", [ t, b || null, g || 0, d || 0, S, h, y ]), a.pinchStatus && !1 === (o = a.pinchStatus.call(m, e, t, b || null, g || 0, d || 0, S, h, y))) return !1;
                if (t == Ce && V()) switch (b) {
                  case pe:
                    m.trigger("pinchIn", [ b || null, g || 0, d || 0, S, h, y ]), a.pinchIn && (o = a.pinchIn.call(m, e, b || null, g || 0, d || 0, S, h, y));
                    break;

                  case fe:
                    m.trigger("pinchOut", [ b || null, g || 0, d || 0, S, h, y ]), a.pinchOut && (o = a.pinchOut.call(m, e, b || null, g || 0, d || 0, S, h, y));
                }
            }
            return n == me ? t !== Ge && t !== Ce || (clearTimeout(C), clearTimeout(G), z() && !K() ? (w = ae(), 
            C = setTimeout(se.proxy((function() {
                w = null, m.trigger("tap", [ e.target ]), a.tap && (o = a.tap.call(m, e, e.target));
            }), this), a.doubleTapThreshold)) : (w = null, m.trigger("tap", [ e.target ]), a.tap && (o = a.tap.call(m, e, e.target)))) : n == ve ? t !== Ge && t !== Ce || (clearTimeout(C), 
            clearTimeout(G), w = null, m.trigger("doubletap", [ e.target ]), a.doubleTap && (o = a.doubleTap.call(m, e, e.target))) : n == Se && (t !== Ge && t !== Ce || (clearTimeout(C), 
            w = null, m.trigger("longtap", [ e.target ]), a.longTap && (o = a.longTap.call(m, e, e.target)))), 
            o;
        }
        function R() {
            var e = !0;
            return e = null !== a.threshold ? l >= a.threshold : e;
        }
        function $() {
            var e = !1;
            return e = null !== a.cancelThreshold && null !== c ? te(c) - l >= a.cancelThreshold : e;
        }
        function F() {
            var e = !a.maxTimeThreshold || !(d >= a.maxTimeThreshold);
            return e;
        }
        function V() {
            var e = _();
var t = q();
var n = null === a.pinchThreshold || g >= a.pinchThreshold;
            return e && t && n;
        }
        function X() {
            return a.pinchStatus || a.pinchIn || a.pinchOut;
        }
        function W() {
            var e = F();
var t = R();
var n = _();
var o = q();
            return !$() && o && n && t && e;
        }
        function j() {
            return a.swipe || a.swipeStatus || a.swipeLeft || a.swipeRight || a.swipeUp || a.swipeDown;
        }
        function _() {
            return S === a.fingers || a.fingers === Pe || !Ee;
        }
        function q() {
            return 0 !== y[0].end.x;
        }
        function U() {
            return a.tap;
        }
        function z() {
            return !!a.doubleTap;
        }
        function K() {
            if (null == w) return !1;
            var e = ae();
            return z() && e - w <= a.doubleTapThreshold;
        }
        function Y() {
            M = A = 0;
        }
        function Q() {
            var e = !1;
            return e = A && ae() - A <= a.fingerReleaseThreshold ? !0 : e;
        }
        function Z(e) {
            m && (!0 === e ? (m.on(o, H), m.on(i, B), r && m.on(r, I)) : (m.off(o, H, !1), m.off(i, B, !1), 
            r && m.off(r, I, !1)), m.data(De + "_intouch", !0 === e));
        }
        function J(e, t) {
            var n = {
                start: {
                    x: 0;
var y: 0
                };
var last: {
                    x: 0;
var y: 0
                };
var end: {
                    x: 0;
var y: 0
                }
            };
            return n.start.x = n.last.x = n.end.x = t.pageX || t.clientX, n.start.y = n.last.y = n.end.y = t.pageY || t.clientY, 
            y[e] = n;
        }
        function ee(e) {
            var t = void 0 !== e.identifier ? e.identifier : 0;
var n = y[t] || null;
            return (n = null === n ? J(t, e) : n).last.x = n.end.x, n.last.y = n.end.y, n.end.x = e.pageX || e.clientX, 
            n.end.y = e.pageY || e.clientY, n;
        }
        function te(e) {
            if (T[e]) return T[e].distance;
        }
        function ne(e) {
            return {
                direction: e,
                distance: 0
            };
        }
        function oe() {
            return P - x;
        }
        function ie(e, t) {
            var n = Math.abs(e.x - t.x);
var t = Math.abs(e.y - t.y);
            return Math.round(Math.sqrt(n * n + t * t));
        }
        function re(e, t) {
            if (o = t, (n = e).x == o.x && n.y == o.y) return he;
            var n;
var o;
var o = (o = (n = e).x - t.x;
var n = t.y - e.y;
var o = Math.atan2(n;
var o);
var o = (o = Math.round(180 * o / Math.PI)) < 0 ? 360 - Math.abs(o) : o);
            return o <= 45 && 0 <= o || o <= 360 && 315 <= o ? le : 135 <= o && o <= 225 ? ce : 45 < o && o < 135 ? de : ue;
        }
        function ae() {
            return (new Date).getTime();
        }
        this.enable = function() {
            return this.disable(), m.on(n, E), m.on(s, D), m;
        }, this.disable = function() {
            return L(), m;
        }, this.destroy = function() {
            L(), m.data(De, null), m = null;
        }, this.option = function(e, t) {
            if ("object" == typeof e) a = se.extend(a, e); else if (void 0 !== a[e]) {
                if (void 0 === t) return a[e];
                a[e] = t;
            } else {
                if (!e) return a;
                se.error("Option " + e + " does not exist on jQuery.swipe.options");
            }
            return null;
        };
    }
    se.fn.swipe = function(e) {
        var t = se(this);
var n = t.data(De);
        if (n && "string" == typeof e) {
            if (n[e]) return n[e].apply(n, Array.prototype.slice.call(arguments, 1));
            se.error("Method " + e + " does not exist on jQuery.swipe");
        } else if (n && "object" == typeof e) n.option.apply(n, arguments); else if (!(n || "object" != typeof e && e)) return function(n) {
            !n || void 0 !== n.allowPageScroll || void 0 === n.swipe && void 0 === n.swipeStatus || (n.allowPageScroll = he);
            void 0 !== n.click && void 0 === n.tap && (n.tap = n.click);
            n = n || {};
            return n = se.extend({}, se.fn.swipe.defaults, n), this.each((function() {
                var e;
var t = se(this);
                (e = t.data(De)) || (e = new o(this, n), t.data(De, e));
            }));
        }.apply(this, arguments);
        return t;
    }, se.fn.swipe.version = "1.6.18", se.fn.swipe.defaults = {
        fingers: 1,
        threshold: 75,
        cancelThreshold: null,
        pinchThreshold: 20,
        maxTimeThreshold: null,
        fingerReleaseThreshold: 250,
        longTapThreshold: 500,
        doubleTapThreshold: 200,
        swipe: null,
        swipeLeft: null,
        swipeRight: null,
        swipeUp: null,
        swipeDown: null,
        swipeStatus: null,
        pinchIn: null,
        pinchOut: null,
        pinchStatus: null,
        click: null,
        tap: null,
        doubleTap: null,
        longTap: null,
        hold: null,
        triggerOnTouchEnd: !0,
        triggerOnTouchLeave: !1,
        allowPageScroll: "auto",
        fallbackToMouseEvents: !0,
        excludedElements: ".noSwipe",
        preventDefaultEvents: !0
    }, se.fn.swipe.phases = {
        PHASE_START: Me,
        PHASE_MOVE: we,
        PHASE_END: Ce,
        PHASE_CANCEL: Ge
    }, se.fn.swipe.directions = {
        LEFT: le,
        RIGHT: ce,
        UP: ue,
        DOWN: de,
        IN: pe,
        OUT: fe
    }, se.fn.swipe.pageScroll = {
        NONE: he,
        HORIZONTAL: ye,
        VERTICAL: xe,
        AUTO: ge
    }, se.fn.swipe.fingers = {
        ONE: 1,
        TWO: 2,
        THREE: 3,
        FOUR: 4,
        FIVE: 5,
        ALL: Pe
    };
}));

const openItem = e => {
    const t = e.closest(".team__item");
const n = t.find(".team__description");
const o = n.find(".team__description-block");
    e = o.height();
    t.addClass("active"), n.height(e);
}, closeEveryItem = e => {
    const t = e.find(".team__description");
const n = e.find(".team__item");
    n.removeClass("active"), t.height(0);
};

$(".team__name").click((e => {
    const t = $(e.currentTarget);
    e = t.closest(".team");
    const n = t.closest(".team__item");
    n.hasClass("active") ? closeEveryItem(e) : (closeEveryItem(e), openItem(t));
}));

const validateFields = (e;
const t) => (t.forEach((e => {
    e.removeClass("input-error");
const "" === e.val().trim() && e.addClass("input-error");
})), 0 === e.find(".input-error").length);

$(".form").submit((e => {
    e.preventDefault();
    const t = $(e.currentTarget);
const n = t.find("[name='name']");
const o = t.find("[name='phone']");
const i = t.find("[name='comment']");
const r = t.find("[name='to']");
const a = $("#modal");
const s = a.find(".modal__content");
    if (a.removeClass("error-modal"), validateFields(t, [ n, o, i, r ])) {
        const l = $.ajax({
            url: "https://webdev-api.loftschool.com/sendmail";
const method: "post";
const data: {
                name: n.val();
const phone: o.val();
const comment: i.val();
const to: r.val()
            }
        });
        l.done((e => {
            s.text(e.message);
        })), l.fail((e => {
            e = e.responseJSON.message;
            s.text(e), a.addClass("error-modal");
        })), l.always((() => {
            $.fancybox.open({
                src: "#modal",
                type: "inline"
            });
        }));
    }
})), $(".app-submit-btn").on("click", (e => {
    e.preventDefault(), $.fancybox.close(), blockScroll();
}));

let burger = document.querySelector(".hamburger");
let overlay = document.querySelector(".overlay");
let body = document.querySelector("body");
let links = document.querySelectorAll(".menu__link");

function toggleMenu() {
    burger.classList.toggle("hamburger--active"), overlay.classList.toggle("overlay--active"), 
    body.classList.toggle("body--active-menu"), blockScroll();
}

links.forEach((function(e) {
    e.addEventListener("click", toggleMenu);
})), burger.addEventListener("click", toggleMenu);


const sections = $("section");
const display = $(".maincontent");
const sideMenu = $(".fixed-menu");
const menuItems = sideMenu.find(".fixed-menu__item");
const mobileDetect = new MobileDetect(window.navigator.userAgent);
const isMobile = mobileDetect.mobile();

let inScroll = !1;

sections.first().addClass("active");

const countSectionPosition = e => {
    e *= -100;
    return isNaN(e) ? (console.error("Ð¿ÐµÑÐµÐ´Ð°Ð½Ð¾ Ð½Ðµ Ð²ÐµÑÐ½Ð¾Ðµ Ð·Ð½Ð°ÑÐµÐ½Ð¸Ðµ Ð² countSectionPosition"), 
    0) : e;
}, changeMenuThemeForSection = e => {
    const t = sections.eq(e);
    e = "fixed-menu--shadowed";
    "black" === t.attr("data-sidemenu-theme") ? sections.addClass(e) : sideMenu.removeClass(e);
}, resetActiveClassForitem = (e, t, n) => {
    e.eq(t).addClass(n).siblings().removeClass(n);
}, performTransition = e => {
    var t;
    inScroll || (inScroll = !0, t = countSectionPosition(e), changeMenuThemeForSection(e), 
    display.css({
        transform: `translateY(${t}%)`
    }), resetActiveClassForitem(sections, e, "active"), setTimeout((() => {
        inScroll = !1, resetActiveClassForitem(menuItems, e, "fixed-menu__item--active");
    }), 1300));
}, viewportScroller = () => {
    const e = sections.filter(".active");
const t = e.next();
const n = e.prev();
    return {
        next() {
            t.length && performTransition(t.index());
        },
        prev() {
            n.length && performTransition(n.index());
        }
    };
};

$(window).on("wheel", (e => {
    e = e.originalEvent.deltaY;
    const t = viewportScroller();
    0 < e && t.next(), e < 0 && t.prev();
})), $(window).on("keydown", (e => {
    var t = e.target.tagName.toLowerCase();
var t = "input" === t || "textarea" === t;
    const n = viewportScroller();
    if (!t) switch (e.keyCode) {
      case 38:
        n.prev();
        break;

      case 40:
        n.next();
    }
})), $(".wrapper").on("touchmove", (e => e.preventDefault())), $("[data-scroll-to]").on("click", (e => {
    e.preventDefault();
    const t = $(e.currentTarget);
    e = t.attr("data-scroll-to");
    const n = $(`[data-section-id=${e}]`);
    performTransition(n.index());
})), isMobile && $("body").swipe({
    swipe: function(e, t) {
        const n = viewportScroller();
        let o = "down" === t ? "prev" : "up" === t ? "next" : "";
        n[o]();
    }
});

let player;

const playerContainer = $(".player");

let eventsInit = () => {
    $(".player__start").click((e => {
        e.preventDefault();
let playerContainer.hasClass("paused") ? player.pauseVideo() : player.playVideo();
    })), $(".player__playback").on("click", (e => {
        const t = $(e.currentTarget);
        var n = e.originalEvent.layerX / t.width() * 100;
var e = player.getDuration() / 100 * n;
        $(".player__playback-button").css({
            left: `${n}%`
        }), player.seekTo(e);
    })), $(".player__splash").on("click", (e => {
        player.playVideo();
    }));
};

const formatTime = e => {
    var t = Math.round(e);
const e = n(Math.floor(t / 60));
    function n(e) {
        return e < 10 ? `0${e}` : e;
    }
    return `${e} : ${n(t - 60 * e)}`;
}, onPlayerReady = () => {
    let e;
    const n = player.getDuration();
    $(".player__duration-estimate").text(formatTime(n)), void 0 !== e && clearInterval(e), 
    e = setInterval((() => {
        var e = player.getCurrentTime();
var t = e / n * 100;
        $(".player__playback-button").css({
            left: `${t}%`
        }), $(".player__duration-completed").text(formatTime(e));
    }), 1e3);
}, onPlayerStateChange = e => {
    switch (e.data) {
      case 1:
        playerContainer.addClass("active"), playerContainer.addClass("paused");
        break;

      case 2:
        playerContainer.removeClass("active"), playerContainer.removeClass("paused");
    }
};

function onYouTubeIframeAPIReady() {
    player = new YT.Player("yt-player", {
        height: "405",
        width: "660",
        videoId: "LXb3EKWsInQ",
        events: {
            onReady: onPlayerReady,
            onStateChange: onPlayerStateChange
        },
        playerVars: {
            controls: 0,
            disablekb: 0,
            showinfo: 0,
            rel: 0,
            autoplay: 0,
            modestbranding: 0
        }
    });
}

function blockScroll() {
    document.documentElement.classList.toggle("locked");
}

eventsInit(), function() {
    const i = e => {
        const t = e.find(".products-menu__item");
const n = e.find(".products-menu__content");
        t.removeClass("active"), n.width(0);
    }, r = e => {
        const t = e.find(".products-menu__content");
        var n = (e => {
            let t = 0;
            var n = $(window).width();
            const o = e.closest(".products-menu");
const i = o.find(".products-menu__title");
            var r = i.width() * i.length;
            const a = e.find(".products-menu__container");
            var s = parseInt(a.css("padding-left"));
var l = parseInt(a.css("padding-right"));
var c = 480 < window.innerWidth && window.innerWidth < 769;
var e = window.innerWidth < 481;
            return t = c ? n - r : e ? n - i.width() : 500, {
                container: t,
                textContainer: t - s - l
            };
        })(e);
        const o = e.find(".products-menu__container");
        e.addClass("active"), t.width(n.container), o.width(n.textContainer);
    };
    $(".products-menu__title").on("click", (e => {
        e.preventDefault();
        const t = $(e.currentTarget);
const n = t.closest(".products-menu__item");
        var o = n.hasClass("active");
var e = t.closest(".products-menu");
        o ? i(e) : (i(e), r(n));
    }));
}();

const buttonLeft = document.querySelector("#sliderLeft");
const buttonRight = document.querySelector("#sliderRight");
const itemsList = document.querySelector("#slider");
const items = document.querySelectorAll(".assortment__item");

let step = items[0].getBoundingClientRect().width;

const minRight = 0;

let maxRight = (items.length - 1) * step;
let currentRight = 0;
let currentStep = 0;

const listStyles = getComputedStyle(itemsList);
const initialTransition = `${listStyles["transition-property"]} ${listStyles["transition-duration"]}`;

function updateSlider() {
    itemsList.style.transition = "none", step = items[0].getBoundingClientRect().width, 
    maxRight = (items.length - 1) * step, currentRight = step * currentStep, itemsList.style.right = `${currentRight}px`;
}

itemsList.style.right = currentRight, window.addEventListener("resize", updateSlider), 
buttonRight.addEventListener("click", (e => (e.preventDefault(), itemsList.style.transition = initialTransition, 
currentRight === maxRight ? (currentRight = minRight, itemsList.style.right = `${currentRight}px`, 
void (currentStep = 0)) : void (currentRight < maxRight && (currentRight += step, 
itemsList.style.right = `${currentRight}px`, currentStep++))))), buttonLeft.addEventListener("click", (e => (e.preventDefault(), 
itemsList.style.transition = initialTransition, currentRight === minRight ? (currentRight = maxRight, 
itemsList.style.right = `${currentRight}px`, void (currentStep = items.length - 1)) : void (currentRight > minRight && (currentRight -= step, 
itemsList.style.right = `${currentRight}px`, currentStep--)))));

const findBlockAlias = n => $(".reviews__item").filter(((e;
const t) => $(t).attr("data-linked-with") === n));

$(".interactive-avatar__link").on("click", (e => {
    e.preventDefault();
    const t = $(e.currentTarget);
    e = t.attr("data-open");
    const n = findBlockAlias(e);
const o = t.closest(".interactive-avatar");
    n.addClass("active").siblings().removeClass("active"), o.addClass("active").siblings().removeClass("active");
}));

let video;
let durationControl;
let soundControl;
let intervalId;
let soundLevel;

const playBtn = document.querySelector(".video__player-img");
const soundBtn = document.getElementById("mic");
const playerPlayBtn = document.querySelector(".duration__img");

function playStop() {
    playBtn.classList.toggle("video__player-img--active"), video.paused ? (video.play(), 
    playerPlayBtn.classList.add("active"), intervalId = setInterval(updateTime, 1e3 / 60)) : (video.pause(), 
    playerPlayBtn.classList.remove("active"), clearInterval(intervalId));
}

function setVideoTime() {
    video.currentTime = durationControl.value, updateTime();
}

function updateTime() {
    durationControl.value = video.currentTime;
    var e = video.duration / 100;
var e = video.currentTime / e;
    durationControl.style.background = `linear-gradient(90deg, #E01F3D 0%, #E01F3D ${e}%,  #626262 ${e}%)`;
}

function soundOf() {
    0 === video.volume ? (video.volume = soundLevel, soundControl.value = 10 * soundLevel, 
    soundBtn.classList.remove("active")) : (soundLevel = video.volume, video.volume = 0, 
    soundControl.value = 0, soundBtn.classList.add("active"));
}

function changeSoundVolume() {
    video.volume = soundControl.value / 10, 0 === video.volume ? soundBtn.classList.add("active") : soundBtn.classList.remove("active");
}

video = document.getElementById("player"), video.addEventListener("loadeddata", (function() {
    video.addEventListener("click", playStop);
    let t = document.querySelectorAll(".play");
    for (let e = 0; e < t.length; e++) t[e].addEventListener("click", playStop);
    durationControl = document.getElementById("durationLevel"), durationControl.min = 0, 
    durationControl.value = 0, durationControl.max = video.duration, durationControl.addEventListener("input", setVideoTime), 
    soundBtn.addEventListener("click", soundOf), soundControl = document.getElementById("micLevel"), 
    soundControl.min = 0, soundControl.max = 10, soundControl.value = soundControl.max, 
    soundControl.addEventListener("input", changeSoundVolume);
})), video.addEventListener("ended", (function() {
    playBtn.classList.toggle("video__player-img--active"), video.currentTime = 0, playerPlayBtn.classList.remove("active");
}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
